{"version":3,"file":"request.umd.min.js","sources":["../../src/utils/process-params.ts","../../src/utils/encode-query-string.ts","../../src/utils/encode-form-data.ts","../../src/utils/ArcGISRequestError.ts","../../src/utils/warn.ts","../../src/request.ts","../../src/utils/ErrorTypes.ts","../../src/utils/decode-query-string.ts","../../src/utils/append-custom-params.ts","../../src/utils/clean-url.ts"],"sourcesContent":["/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Checks parameters to see if we should use FormData to send the request\n * @param params The object whose keys will be encoded.\n * @return A boolean indicating if FormData will be required.\n */\nexport function requiresFormData(params: any) {\n  return Object.keys(params).some(key => {\n    let value = params[key];\n\n    if (!value) {\n      return false;\n    }\n\n    if (value && value.toParam) {\n      value = value.toParam();\n    }\n\n    const type = value.constructor.name;\n\n    switch (type) {\n      case \"Array\":\n        return false;\n      case \"Object\":\n        return false;\n      case \"Date\":\n        return false;\n      case \"Function\":\n        return false;\n      case \"Boolean\":\n        return false;\n      case \"String\":\n        return false;\n      case \"Number\":\n        return false;\n      default:\n        return true;\n    }\n  });\n}\n\n/**\n * Converts parameters to the proper representation to send to the ArcGIS REST API.\n * @param params The object whose keys will be encoded.\n * @return A new object with properly encoded values.\n */\nexport function processParams(params: any): any {\n  const newParams: any = {};\n\n  Object.keys(params).forEach(key => {\n    let param = params[key];\n\n    if (param && param.toParam) {\n      param = param.toParam();\n    }\n\n    if (\n      !param &&\n      param !== 0 &&\n      typeof param !== \"boolean\" &&\n      typeof param !== \"string\"\n    ) {\n      return;\n    }\n\n    const type = param.constructor.name;\n\n    let value: any;\n\n    // properly encodes objects, arrays and dates for arcgis.com and other services.\n    // ported from https://github.com/Esri/esri-leaflet/blob/master/src/Request.js#L22-L30\n    // also see https://github.com/Esri/arcgis-rest-js/issues/18:\n    // null, undefined, function are excluded. If you want to send an empty key you need to send an empty string \"\".\n    switch (type) {\n      case \"Array\":\n        // Based on the first element of the array, classify array as an array of arrays, an array of objects\n        // to be stringified, or an array of non-objects to be comma-separated\n        // eslint-disable-next-line no-case-declarations\n        const firstElementType = param[0]?.constructor?.name;\n        value =\n          firstElementType === \"Array\" ? param : // pass thru array of arrays\n          firstElementType === \"Object\" ? JSON.stringify(param) : // stringify array of objects\n          param.join(\",\"); // join other types of array elements\n        break;\n      case \"Object\":\n        value = JSON.stringify(param);\n        break;\n      case \"Date\":\n        value = param.valueOf();\n        break;\n      case \"Function\":\n        value = null;\n        break;\n      case \"Boolean\":\n        value = param + \"\";\n        break;\n      default:\n        value = param;\n        break;\n    }\n    if (value || value === 0 || typeof value === \"string\" || Array.isArray(value)) {\n      newParams[key] = value;\n    }\n  });\n\n  return newParams;\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams } from \"./process-params\";\n\n/**\n * Encodes keys and parameters for use in a URL's query string.\n *\n * @param key Parameter's key\n * @param value Parameter's value\n * @returns Query string with key and value pairs separated by \"&\"\n */\nexport function encodeParam(key: string, value: any): string {\n  // For array of arrays, repeat key=value for each element of containing array\n  if (Array.isArray(value) && value[0] && Array.isArray(value[0])) {\n    return value.map((arrayElem: string) => encodeParam(key, arrayElem)).join(\"&\");\n  }\n\n  return encodeURIComponent(key) + \"=\" + encodeURIComponent(value);\n}\n\n/**\n * Encodes the passed object as a query string.\n *\n * @param params An object to be encoded.\n * @returns An encoded query string.\n */\nexport function encodeQueryString(params: any): string {\n  const newParams = processParams(params);\n  return Object.keys(newParams)\n    .map((key: any) => {\n      return encodeParam(key, newParams[key]);\n    })\n    .join(\"&\");\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { processParams, requiresFormData } from \"./process-params\";\nimport { encodeQueryString } from \"./encode-query-string\";\n/**\n * Encodes parameters in a [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object in browsers or in a [FormData](https://github.com/form-data/form-data) in Node.js\n *\n * @param params An object to be encoded.\n * @returns The complete [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) object.\n */\nexport function encodeFormData(\n  params: any,\n  forceFormData?: boolean\n): FormData | string {\n  // see https://github.com/Esri/arcgis-rest-js/issues/499 for more info.\n  const useFormData = requiresFormData(params) || forceFormData;\n  const newParams = processParams(params);\n  if (useFormData) {\n    const formData = new FormData();\n    Object.keys(newParams).forEach((key: any) => {\n      if (typeof Blob !== \"undefined\" && newParams[key] instanceof Blob) {\n        /* To name the Blob:\n         1. look to an alternate request parameter called 'fileName'\n         2. see if 'name' has been tacked onto the Blob manually\n         3. if all else fails, use the request parameter\n        */\n        const filename = newParams[\"fileName\"] || newParams[key].name || key;\n        formData.append(key, newParams[key], filename);\n      } else {\n        formData.append(key, newParams[key]);\n      }\n    });\n    return formData;\n  } else {\n    return encodeQueryString(params);\n  }\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions\";\n\n// TypeScript 2.1 no longer allows you to extend built in types. See https://github.com/Microsoft/TypeScript/issues/12790#issuecomment-265981442\n// and https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n//\n// This code is from MDN https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types.\nexport class ArcGISRequestError {\n  /**\n   * The name of this error. Will always be `\"ArcGISRequestError\"` to conform with the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class.\n   */\n  public name: string;\n\n  /**\n   * Formatted error message. See the [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) class for more details.\n   */\n  public message: string;\n\n  /**\n   * The errror message return from the request.\n   */\n  public originalMessage: string;\n\n  /**\n   * The error code returned from the request.\n   */\n  public code: string | number;\n\n  /**\n   * The original JSON response the caused the error.\n   */\n  public response: any;\n\n  /**\n   * The URL of the original request that caused the error\n   */\n  public url: string;\n\n  /**\n   * The options of the original request that caused the error\n   */\n  public options: IRequestOptions;\n\n  /**\n   * Create a new `ArcGISRequestError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options and parameters of the request\n   */\n  constructor(\n    message?: string,\n    code?: string | number,\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    message = message || \"UNKNOWN_ERROR\";\n    code = code || \"UNKNOWN_ERROR_CODE\";\n\n    this.name = \"ArcGISRequestError\";\n    this.message =\n      code === \"UNKNOWN_ERROR_CODE\" ? message : `${code}: ${message}`;\n    this.originalMessage = message;\n    this.code = code;\n    this.response = response;\n    this.url = url;\n    this.options = options;\n  }\n}\nArcGISRequestError.prototype = Object.create(Error.prototype);\nArcGISRequestError.prototype.constructor = ArcGISRequestError;\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Method used internally to surface messages to developers.\n */\nexport function warn(message: string) {\n  if (console && console.warn) {\n    console.warn.apply(console, [message]);\n  }\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { encodeFormData } from \"./utils/encode-form-data\";\nimport { encodeQueryString } from \"./utils/encode-query-string\";\nimport { requiresFormData } from \"./utils/process-params\";\nimport { ArcGISRequestError } from \"./utils/ArcGISRequestError\";\nimport { IRequestOptions } from \"./utils/IRequestOptions\";\nimport { IParams } from \"./utils/IParams\";\nimport { warn } from \"./utils/warn\";\nimport { IRetryAuthError } from \"./utils/retryAuthError\";\n\nexport const NODEJS_DEFAULT_REFERER_HEADER = `@esri/arcgis-rest-js`;\n\nlet DEFAULT_ARCGIS_REQUEST_OPTIONS: IRequestOptions = {\n  httpMethod: \"POST\",\n  params: {\n    f: \"json\",\n  },\n};\n\n/**\n * Sets the default options that will be passed in **all requests across all `@esri/arcgis-rest-js` modules**.\n *\n *\n * ```js\n * import { setDefaultRequestOptions } from \"@esri/arcgis-rest-request\";\n * setDefaultRequestOptions({\n *   authentication: userSession // all requests will use this session by default\n * })\n * ```\n * You should **never** set a default `authentication` when you are in a server side environment where you may be handling requests for many different authenticated users.\n *\n * @param options The default options to pass with every request. Existing default will be overwritten.\n * @param hideWarnings Silence warnings about setting default `authentication` in shared environments.\n */\nexport function setDefaultRequestOptions(\n  options: typeof DEFAULT_ARCGIS_REQUEST_OPTIONS,\n  hideWarnings?: boolean\n) {\n  if (options.authentication && !hideWarnings) {\n    warn(\n      \"You should not set `authentication` as a default in a shared environment such as a web server which will process multiple users requests. You can call `setDefaultRequestOptions` with `true` as a second argument to disable this warning.\"\n    );\n  }\n  DEFAULT_ARCGIS_REQUEST_OPTIONS = options;\n}\n\nexport class ArcGISAuthError extends ArcGISRequestError {\n  /**\n   * Create a new `ArcGISAuthError`  object.\n   *\n   * @param message - The error message from the API\n   * @param code - The error code from the API\n   * @param response - The original response from the API that caused the error\n   * @param url - The original url of the request\n   * @param options - The original options of the request\n   */\n  constructor(\n    message = \"AUTHENTICATION_ERROR\",\n    code: string | number = \"AUTHENTICATION_ERROR_CODE\",\n    response?: any,\n    url?: string,\n    options?: IRequestOptions\n  ) {\n    super(message, code, response, url, options);\n    this.name = \"ArcGISAuthError\";\n    this.message =\n      code === \"AUTHENTICATION_ERROR_CODE\" ? message : `${code}: ${message}`;\n  }\n\n  public retry(getSession: IRetryAuthError, retryLimit = 3) {\n    let tries = 0;\n\n    const retryRequest = (resolve: any, reject: any) => {\n      getSession(this.url, this.options)\n        .then((session) => {\n          const newOptions = {\n            ...this.options,\n            ...{ authentication: session },\n          };\n\n          tries = tries + 1;\n          return request(this.url, newOptions);\n        })\n        .then((response) => {\n          resolve(response);\n        })\n        .catch((e) => {\n          if (e.name === \"ArcGISAuthError\" && tries < retryLimit) {\n            retryRequest(resolve, reject);\n          } else if (e.name === \"ArcGISAuthError\" && tries >= retryLimit) {\n            reject(this);\n          } else {\n            reject(e);\n          }\n        });\n    };\n\n    return new Promise((resolve, reject) => {\n      retryRequest(resolve, reject);\n    });\n  }\n}\n\n/**\n * Checks for errors in a JSON response from the ArcGIS REST API. If there are no errors, it will return the `data` passed in. If there is an error, it will throw an `ArcGISRequestError` or `ArcGISAuthError`.\n *\n * @param data The response JSON to check for errors.\n * @param url The url of the original request\n * @param params The parameters of the original request\n * @param options The options of the original request\n * @returns The data that was passed in the `data` parameter\n */\nexport function checkForErrors(\n  response: any,\n  url?: string,\n  params?: IParams,\n  options?: IRequestOptions,\n  originalAuthError?: ArcGISAuthError\n): any {\n  // this is an error message from billing.arcgis.com backend\n  if (response.code >= 400) {\n    const { message, code } = response;\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  // error from ArcGIS Online or an ArcGIS Portal or server instance.\n  if (response.error) {\n    const { message, code, messageCode } = response.error;\n    const errorCode = messageCode || code || \"UNKNOWN_ERROR_CODE\";\n\n    if (\n      code === 498 ||\n      code === 499 ||\n      messageCode === \"GWM_0003\" ||\n      (code === 400 && message === \"Unable to generate token.\")\n    ) {\n      if (originalAuthError) {\n        throw originalAuthError;\n      } else {\n        throw new ArcGISAuthError(message, errorCode, response, url, options);\n      }\n    }\n\n    throw new ArcGISRequestError(message, errorCode, response, url, options);\n  }\n\n  // error from a status check\n  if (response.status === \"failed\" || response.status === \"failure\") {\n    let message: string;\n    let code = \"UNKNOWN_ERROR_CODE\";\n\n    try {\n      message = JSON.parse(response.statusMessage).message;\n      code = JSON.parse(response.statusMessage).code;\n    } catch (e) {\n      message = response.statusMessage || response.message;\n    }\n\n    throw new ArcGISRequestError(message, code, response, url, options);\n  }\n\n  return response;\n}\n\n/**\n * ```js\n * import { request } from '@esri/arcgis-rest-request';\n * //\n * request('https://www.arcgis.com/sharing/rest')\n *   .then(response) // response.currentVersion === 5.2\n * //\n * request('https://www.arcgis.com/sharing/rest', {\n *   httpMethod: \"GET\"\n * })\n * //\n * request('https://www.arcgis.com/sharing/rest/search', {\n *   params: { q: 'parks' }\n * })\n *   .then(response) // response.total => 78379\n * ```\n * Generic method for making HTTP requests to ArcGIS REST API endpoints.\n *\n * @param url - The URL of the ArcGIS REST API endpoint.\n * @param requestOptions - Options for the request, including parameters relevant to the endpoint.\n * @returns A Promise that will resolve with the data from the response.\n */\nexport function request(\n  url: string,\n  requestOptions: IRequestOptions = { params: { f: \"json\" } }\n): Promise<any> {\n  const options: IRequestOptions = {\n    ...{ httpMethod: \"POST\" },\n    ...DEFAULT_ARCGIS_REQUEST_OPTIONS,\n    ...requestOptions,\n    ...{\n      params: {\n        ...DEFAULT_ARCGIS_REQUEST_OPTIONS.params,\n        ...requestOptions.params,\n      },\n      headers: {\n        ...DEFAULT_ARCGIS_REQUEST_OPTIONS.headers,\n        ...requestOptions.headers,\n      },\n    },\n  };\n\n  const missingGlobals: string[] = [];\n  const recommendedPackages: string[] = [];\n\n  // don't check for a global fetch if a custom implementation was passed through\n  if (!options.fetch && typeof fetch !== \"undefined\") {\n    options.fetch = fetch.bind(Function(\"return this\")());\n  } else {\n    missingGlobals.push(\"`fetch`\");\n    recommendedPackages.push(\"`node-fetch`\");\n  }\n\n  if (typeof Promise === \"undefined\") {\n    missingGlobals.push(\"`Promise`\");\n    recommendedPackages.push(\"`es6-promise`\");\n  }\n\n  if (typeof FormData === \"undefined\") {\n    missingGlobals.push(\"`FormData`\");\n    recommendedPackages.push(\"`isomorphic-form-data`\");\n  }\n\n  if (\n    !options.fetch ||\n    typeof Promise === \"undefined\" ||\n    typeof FormData === \"undefined\"\n  ) {\n    throw new Error(\n      `\\`arcgis-rest-request\\` requires a \\`fetch\\` implementation and global variables for \\`Promise\\` and \\`FormData\\` to be present in the global scope. You are missing ${missingGlobals.join(\n        \", \"\n      )}. We recommend installing the ${recommendedPackages.join(\n        \", \"\n      )} modules at the root of your application to add these to the global scope. See https://bit.ly/2KNwWaJ for more info.`\n    );\n  }\n\n  const { httpMethod, authentication, rawResponse } = options;\n\n  const params: IParams = {\n    ...{ f: \"json\" },\n    ...options.params,\n  };\n\n  let originalAuthError: ArcGISAuthError = null;\n\n  const fetchOptions: RequestInit = {\n    method: httpMethod,\n    /* ensures behavior mimics XMLHttpRequest.\n    needed to support sending IWA cookies */\n    credentials: options.credentials || \"same-origin\",\n  };\n\n  // the /oauth2/platformSelf route will add X-Esri-Auth-Client-Id header\n  // and that request needs to send cookies cross domain\n  // so we need to set the credentials to \"include\"\n  if (\n    options.headers &&\n    options.headers[\"X-Esri-Auth-Client-Id\"] &&\n    url.indexOf(\"/oauth2/platformSelf\") > -1\n  ) {\n    fetchOptions.credentials = \"include\";\n  }\n\n  return (authentication\n    ? authentication.getToken(url, { fetch: options.fetch }).catch((err) => {\n        /**\n         * append original request url and requestOptions\n         * to the error thrown by getToken()\n         * to assist with retrying\n         */\n        err.url = url;\n        err.options = options;\n        /**\n         * if an attempt is made to talk to an unfederated server\n         * first try the request anonymously. if a 'token required'\n         * error is thrown, throw the UNFEDERATED error then.\n         */\n        originalAuthError = err;\n        return Promise.resolve(\"\");\n      })\n    : Promise.resolve(\"\")\n  )\n    .then((token) => {\n      if (token.length) {\n        params.token = token;\n      }\n\n      if (authentication && authentication.getDomainCredentials) {\n        fetchOptions.credentials = authentication.getDomainCredentials(url);\n      }\n\n      // Custom headers to add to request. IRequestOptions.headers with merge over requestHeaders.\n      const requestHeaders: {\n        [key: string]: any;\n      } = {};\n\n      if (fetchOptions.method === \"GET\") {\n        // Prevents token from being passed in query params when hideToken option is used.\n        /* istanbul ignore if - window is always defined in a browser. Test case is covered by Jasmine in node test */\n        if (\n          params.token &&\n          options.hideToken &&\n          // Sharing API does not support preflight check required by modern browsers https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request\n          typeof window === \"undefined\"\n        ) {\n          requestHeaders[\"X-Esri-Authorization\"] = `Bearer ${params.token}`;\n          delete params.token;\n        }\n        // encode the parameters into the query string\n        const queryParams = encodeQueryString(params);\n        // dont append a '?' unless parameters are actually present\n        const urlWithQueryString =\n          queryParams === \"\" ? url : url + \"?\" + encodeQueryString(params);\n\n        if (\n          // This would exceed the maximum length for URLs specified by the consumer and requires POST\n          (options.maxUrlLength &&\n            urlWithQueryString.length > options.maxUrlLength) ||\n          // Or if the customer requires the token to be hidden and it has not already been hidden in the header (for browsers)\n          (params.token && options.hideToken)\n        ) {\n          // the consumer specified a maximum length for URLs\n          // and this would exceed it, so use post instead\n          fetchOptions.method = \"POST\";\n\n          // If the token was already added as a Auth header, add the token back to body with other params instead of header\n          if (token.length && options.hideToken) {\n            params.token = token;\n            // Remove existing header that was added before url query length was checked\n            delete requestHeaders[\"X-Esri-Authorization\"];\n          }\n        } else {\n          // just use GET\n          url = urlWithQueryString;\n        }\n      }\n\n      /* updateResources currently requires FormData even when the input parameters dont warrant it.\n  https://developers.arcgis.com/rest/users-groups-and-items/update-resources.htm\n      see https://github.com/Esri/arcgis-rest-js/pull/500 for more info. */\n      const forceFormData = new RegExp(\"/items/.+/updateResources\").test(url);\n\n      if (fetchOptions.method === \"POST\") {\n        fetchOptions.body = encodeFormData(params, forceFormData);\n      }\n\n      // Mixin headers from request options\n      fetchOptions.headers = {\n        ...requestHeaders,\n        ...options.headers,\n      };\n\n      /* istanbul ignore next - karma reports coverage on browser tests only */\n      if (typeof window === \"undefined\" && !fetchOptions.headers.referer) {\n        fetchOptions.headers.referer = NODEJS_DEFAULT_REFERER_HEADER;\n      }\n\n      /* istanbul ignore else blob responses are difficult to make cross platform we will just have to trust the isomorphic fetch will do its job */\n      if (!requiresFormData(params) && !forceFormData) {\n        fetchOptions.headers[\"Content-Type\"] =\n          \"application/x-www-form-urlencoded\";\n      }\n\n      return options.fetch(url, fetchOptions);\n    })\n    .then((response) => {\n      if (!response.ok) {\n        // server responded w/ an actual error (404, 500, etc)\n        const { status, statusText } = response;\n        throw new ArcGISRequestError(\n          statusText,\n          `HTTP ${status}`,\n          response,\n          url,\n          options\n        );\n      }\n      if (rawResponse) {\n        return response;\n      }\n      switch (params.f) {\n        case \"json\":\n          return response.json();\n        case \"geojson\":\n          return response.json();\n        case \"html\":\n          return response.text();\n        case \"text\":\n          return response.text();\n        /* istanbul ignore next blob responses are difficult to make cross platform we will just have to trust that isomorphic fetch will do its job */\n        default:\n          return response.blob();\n      }\n    })\n    .then((data) => {\n      if ((params.f === \"json\" || params.f === \"geojson\") && !rawResponse) {\n        const response = checkForErrors(\n          data,\n          url,\n          params,\n          options,\n          originalAuthError\n        );\n\n        if (originalAuthError) {\n          /* If the request was made to an unfederated service that\n          didn't require authentication, add the base url and a dummy token\n          to the list of trusted servers to avoid another federation check\n          in the event of a repeat request */\n          const truncatedUrl: string = url\n            .toLowerCase()\n            .split(/\\/rest(\\/admin)?\\/services\\//)[0];\n\n          (options.authentication as any).federatedServers[truncatedUrl] = {\n            token: [],\n            // default to 24 hours\n            expires: new Date(Date.now() + 86400 * 1000),\n          };\n          originalAuthError = null;\n        }\n        return response;\n      } else {\n        return data;\n      }\n    });\n}\n","/* Copyright (c) 2017 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Enum describing the different errors that might be thrown by a request.\n *\n * ```ts\n * import { request, ErrorTypes } from '@esri/arcgis-rest-request';\n *\n * request(\"...\").catch((e) => {\n *   switch(e.name) {\n *     case ErrorType.ArcGISRequestError:\n *     // handle a general error from the API\n *     break;\n *\n *     case ErrorType.ArcGISAuthError:\n *     // handle an authentication error\n *     break;\n *\n *     default:\n *     // handle some other error (usually a network error)\n *   }\n * });\n * ```\n */\nexport enum ErrorTypes {\n  ArcGISRequestError = \"ArcGISRequestError\",\n  ArcGISAuthError = \"ArcGISAuthError\"\n}\n","/* Copyright (c) 2017-2020 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nexport function decodeParam(param: string): { key: string; value: string } {\n  const [key, value] = param.split(\"=\");\n  return { key: decodeURIComponent(key), value: decodeURIComponent(value) };\n}\n\n/**\n * Decodes the passed query string as an object.\n *\n * @param query A string to be decoded.\n * @returns A decoded query param object.\n */\nexport function decodeQueryString(query: string): { [key: string]: string } {\n  return query\n    .replace(/^#/, \"\")\n    .split(\"&\")\n    .reduce(\n      (acc, entry) => {\n        const { key, value } = decodeParam(entry);\n        acc[key] = value;\n        return acc;\n      },\n      {} as any\n    );\n}\n","/* Copyright (c) 2017-2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\nimport { IRequestOptions } from \"./IRequestOptions\";\n\n/**\n * Helper for methods with lots of first order request options to pass through as request parameters.\n */\nexport function appendCustomParams<T extends IRequestOptions>(\n  customOptions: T,\n  keys: Array<keyof T>,\n  baseOptions?: Partial<T>\n): IRequestOptions {\n  const requestOptionsKeys = [\n    \"params\",\n    \"httpMethod\",\n    \"rawResponse\",\n    \"authentication\",\n    \"portal\",\n    \"fetch\",\n    \"maxUrlLength\",\n    \"headers\"\n  ];\n\n  const options: T = {\n    ...{ params: {} },\n    ...baseOptions,\n    ...customOptions\n  };\n\n  // merge all keys in customOptions into options.params\n  options.params = keys.reduce((value, key) => {\n    if (customOptions[key] || typeof customOptions[key] === \"boolean\") {\n      value[key as any] = customOptions[key];\n    }\n    return value;\n  }, options.params);\n\n  // now remove all properties in options that don't exist in IRequestOptions\n  return requestOptionsKeys.reduce(\n    (value, key) => {\n      if ((options as any)[key]) {\n        (value as any)[key] = (options as any)[key];\n      }\n      return value;\n    },\n    {} as IRequestOptions\n  );\n}\n","/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.\n * Apache-2.0 */\n\n/**\n * Helper method to ensure that user supplied urls don't include whitespace or a trailing slash.\n */\nexport function cleanUrl(url: string) {\n  // Guard so we don't try to trim something that's not a string\n  if (typeof url !== \"string\") {\n    return url;\n  }\n  // trim leading and trailing spaces, but not spaces inside the url\n  url = url.trim();\n\n  // remove the trailing slash to the url if one was included\n  if (url[url.length - 1] === \"/\") {\n    url = url.slice(0, -1);\n  }\n  return url;\n}\n"],"names":["requiresFormData","params","Object","keys","some","key","value","toParam","constructor","name","processParams","newParams","forEach","param","firstElementType","JSON","stringify","join","valueOf","Array","isArray","encodeParam","map","arrayElem","encodeURIComponent","encodeQueryString","encodeFormData","forceFormData","useFormData","formData_1","FormData","filename","Blob","append","message","code","response","url","options","this","originalMessage","warn","console","apply","ArcGISRequestError","prototype","create","Error","NODEJS_DEFAULT_REFERER_HEADER","DEFAULT_ARCGIS_REQUEST_OPTIONS","httpMethod","f","ErrorTypes","ArcGISAuthError","getSession","retryLimit","tries","retryRequest","resolve","reject","_this","then","session","newOptions","authentication","request","catch","e","Promise","_super","checkForErrors","originalAuthError","error","_a","messageCode","errorCode","status","parse","statusMessage","requestOptions","headers","missingGlobals","recommendedPackages","fetch","push","bind","Function","rawResponse","fetchOptions","method","credentials","indexOf","getToken","err","token","length","getDomainCredentials","requestHeaders","hideToken","window","urlWithQueryString","maxUrlLength","RegExp","test","body","referer","ok","status_1","statusText","json","text","blob","data","truncatedUrl","toLowerCase","split","federatedServers","expires","Date","now","decodeParam","decodeURIComponent","customOptions","baseOptions","reduce","trim","slice","query","replace","acc","entry","hideWarnings"],"mappings":"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"}