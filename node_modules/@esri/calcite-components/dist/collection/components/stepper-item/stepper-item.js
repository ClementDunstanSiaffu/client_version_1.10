/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.
 * v1.0.0-beta.86
 */
import { Component, Element, Event, h, Host, Listen, Prop, Watch } from "@stencil/core";
import { getElementProp, toAriaBoolean } from "../../utils/dom";
import { updateHostInteraction } from "../../utils/interactive";
/**
 * @slot - A slot for adding custom content.
 */
export class StepperItem {
  constructor() {
    //--------------------------------------------------------------------------
    //
    //  Public Properties
    //
    //--------------------------------------------------------------------------
    /** is the step active */
    this.active = false;
    /** has the step been completed */
    this.complete = false;
    /** does the step contain an error that needs to be resolved by the user */
    this.error = false;
    /** is the step disabled and not navigable to by a user */
    this.disabled = false;
    // internal props inherited from wrapping calcite-stepper
    /** pass a title for the stepper item */
    /** @internal */
    this.layout = "horizontal";
    /** should the items display an icon based on status */
    /** @internal */
    this.icon = false;
    /** optionally display the step number next to the title and subtitle */
    /** @internal */
    this.numbered = false;
    /** the scale of the item */
    /** @internal */
    this.scale = "m";
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.keyDownHandler = (e) => {
      if (!this.disabled && e.target === this.el) {
        switch (e.key) {
          case " ":
          case "Enter":
            this.emitUserRequestedItem();
            e.preventDefault();
            break;
          case "ArrowUp":
          case "ArrowDown":
          case "ArrowLeft":
          case "ArrowRight":
          case "Home":
          case "End":
            this.calciteInternalStepperItemKeyEvent.emit({ item: e });
            e.preventDefault();
            break;
        }
      }
    };
    this.emitUserRequestedItem = () => {
      this.emitRequestedItem();
      if (!this.disabled) {
        const position = this.itemPosition;
        this.calciteInternalUserRequestedStepperItemSelect.emit({
          position
        });
      }
    };
    this.emitRequestedItem = () => {
      if (!this.disabled) {
        const position = this.itemPosition;
        const content = this.itemContent;
        this.calciteInternalStepperItemSelect.emit({
          position,
          content
        });
      }
    };
    this.setItemContent = (event) => {
      this.itemPosition = this.getItemPosition();
      const itemContent = event.target.assignedNodes({ flatten: true });
      if (itemContent.length) {
        this.itemContent = itemContent;
      }
      this.registerStepperItem();
      if (this.active) {
        this.emitRequestedItem();
      }
    };
  }
  // watch for removal of disabled to register step
  disabledWatcher() {
    this.registerStepperItem();
  }
  activeWatcher(active) {
    if (active) {
      this.emitRequestedItem();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  componentWillLoad() {
    this.icon = getElementProp(this.el, "icon", false);
    this.numbered = getElementProp(this.el, "numbered", false);
    this.layout = getElementProp(this.el, "layout", false);
    this.scale = getElementProp(this.el, "scale", "m");
    this.parentStepperEl = this.el.parentElement;
  }
  componentDidRender() {
    updateHostInteraction(this, true);
  }
  render() {
    return (h(Host, { "aria-expanded": toAriaBoolean(this.active), onClick: this.emitUserRequestedItem, onKeyDown: this.keyDownHandler },
      h("div", { class: "container" },
        h("div", { class: "stepper-item-header" },
          this.icon ? this.renderIcon() : null,
          this.numbered ? (h("div", { class: "stepper-item-number" },
            this.getItemPosition() + 1,
            ".")) : null,
          h("div", { class: "stepper-item-header-text" },
            h("span", { class: "stepper-item-heading" }, this.heading || this.itemTitle),
            h("span", { class: "stepper-item-description" }, this.description || this.itemSubtitle))),
        h("div", { class: "stepper-item-content" },
          h("slot", { onSlotchange: this.setItemContent })))));
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  updateActiveItemOnChange(event) {
    if (event.target === this.parentStepperEl ||
      event.composedPath().includes(this.parentStepperEl)) {
      this.activePosition = event.detail.position;
      this.determineActiveItem();
    }
    event.stopPropagation();
  }
  renderIcon() {
    const path = this.active
      ? "circleF"
      : this.error
        ? "exclamationMarkCircleF"
        : this.complete
          ? "checkCircleF"
          : "circle";
    return h("calcite-icon", { class: "stepper-item-icon", icon: path, scale: "s" });
  }
  determineActiveItem() {
    this.active = !this.disabled && this.itemPosition === this.activePosition;
  }
  registerStepperItem() {
    this.calciteInternalStepperItemRegister.emit({
      position: this.itemPosition,
      content: this.itemContent
    });
  }
  getItemPosition() {
    return Array.prototype.indexOf.call(this.parentStepperEl.querySelectorAll("calcite-stepper-item"), this.el);
  }
  static get is() { return "calcite-stepper-item"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["stepper-item.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["stepper-item.css"]
  }; }
  static get properties() { return {
    "active": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "is the step active"
      },
      "attribute": "active",
      "reflect": true,
      "defaultValue": "false"
    },
    "complete": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "has the step been completed"
      },
      "attribute": "complete",
      "reflect": true,
      "defaultValue": "false"
    },
    "error": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "does the step contain an error that needs to be resolved by the user"
      },
      "attribute": "error",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "is the step disabled and not navigable to by a user"
      },
      "attribute": "disabled",
      "reflect": true,
      "defaultValue": "false"
    },
    "itemTitle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "deprecated",
            "text": "use heading instead"
          }],
        "text": "pass a title for the stepper item"
      },
      "attribute": "item-title",
      "reflect": false
    },
    "heading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "stepper item heading"
      },
      "attribute": "heading",
      "reflect": false
    },
    "itemSubtitle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "deprecated",
            "text": "use description instead"
          }],
        "text": "pass a title for the stepper item"
      },
      "attribute": "item-subtitle",
      "reflect": false
    },
    "description": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "stepper item description"
      },
      "attribute": "description",
      "reflect": false
    },
    "layout": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "Extract<\"horizontal\" | \"vertical\", Layout>",
        "resolved": "\"horizontal\" | \"vertical\"",
        "references": {
          "Extract": {
            "location": "global"
          },
          "Layout": {
            "location": "import",
            "path": "../interfaces"
          }
        }
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "attribute": "layout",
      "reflect": true,
      "defaultValue": "\"horizontal\""
    },
    "icon": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "attribute": "icon",
      "reflect": false,
      "defaultValue": "false"
    },
    "numbered": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "attribute": "numbered",
      "reflect": false,
      "defaultValue": "false"
    },
    "scale": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "Scale",
        "resolved": "\"l\" | \"m\" | \"s\"",
        "references": {
          "Scale": {
            "location": "import",
            "path": "../interfaces"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "attribute": "scale",
      "reflect": true,
      "defaultValue": "\"m\""
    }
  }; }
  static get events() { return [{
      "method": "calciteInternalStepperItemKeyEvent",
      "name": "calciteInternalStepperItemKeyEvent",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "complexType": {
        "original": "StepperItemKeyEventDetail",
        "resolved": "StepperItemKeyEventDetail",
        "references": {
          "StepperItemKeyEventDetail": {
            "location": "import",
            "path": "../stepper/interfaces"
          }
        }
      }
    }, {
      "method": "calciteInternalStepperItemSelect",
      "name": "calciteInternalStepperItemSelect",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "complexType": {
        "original": "StepperItemEventDetail",
        "resolved": "StepperItemEventDetail",
        "references": {
          "StepperItemEventDetail": {
            "location": "import",
            "path": "../stepper/interfaces"
          }
        }
      }
    }, {
      "method": "calciteInternalUserRequestedStepperItemSelect",
      "name": "calciteInternalUserRequestedStepperItemSelect",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "complexType": {
        "original": "StepperItemChangeEventDetail",
        "resolved": "StepperItemChangeEventDetail",
        "references": {
          "StepperItemChangeEventDetail": {
            "location": "import",
            "path": "../stepper/interfaces"
          }
        }
      }
    }, {
      "method": "calciteInternalStepperItemRegister",
      "name": "calciteInternalStepperItemRegister",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [{
            "name": "internal",
            "text": undefined
          }],
        "text": ""
      },
      "complexType": {
        "original": "StepperItemEventDetail",
        "resolved": "StepperItemEventDetail",
        "references": {
          "StepperItemEventDetail": {
            "location": "import",
            "path": "../stepper/interfaces"
          }
        }
      }
    }]; }
  static get elementRef() { return "el"; }
  static get watchers() { return [{
      "propName": "disabled",
      "methodName": "disabledWatcher"
    }, {
      "propName": "active",
      "methodName": "activeWatcher"
    }]; }
  static get listeners() { return [{
      "name": "calciteInternalStepperItemChange",
      "method": "updateActiveItemOnChange",
      "target": "body",
      "capture": false,
      "passive": false
    }]; }
}
