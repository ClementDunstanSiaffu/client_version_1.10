/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { AccordionAppearance } from "./components/accordion/interfaces";
import { Alignment, Appearance, Columns, FlipContext, Layout, LogicalFlowPosition, Position, Scale, Status, Width } from "./components/interfaces";
import { ComputedPlacement, MenuPlacement, OverlayPositioning, PopperPlacement, ReferenceElement } from "./utils/popper";
import { AlertDuration, AlertPlacement, StatusColor } from "./components/alert/interfaces";
import { HeadingLevel } from "./components/functional/Heading";
import { BlockSectionToggleDisplay } from "./components/block-section/interfaces";
import { ButtonAlignment, ButtonAppearance, ButtonColor, DropdownIconType } from "./components/button/interfaces";
import { ChipColor } from "./components/chip/interfaces";
import { ColorAppearance, ColorValue, InternalColor } from "./components/color-picker/interfaces";
import { Format } from "./components/color-picker/utils";
import { ComboboxChildElement, ComboboxSelectionMode } from "./components/combobox/interfaces";
import { DateRangeChange } from "./components/date-picker/interfaces";
import { DateLocaleData } from "./components/date-picker/utils";
import { HoverRange } from "./utils/date";
import { SelectionMode } from "./components/dropdown-group/interfaces";
import { ItemKeyboardEvent } from "./components/dropdown/interfaces";
import { ColorStop, DataSeries } from "./components/graph/interfaces";
import { InputPlacement } from "./components/input/interfaces";
import { InputPlacement as InputPlacement1 } from "./components/input-number/interfaces";
import { ModalBackgroundColor } from "./components/modal/interfaces";
import { PaginationDetail } from "./components/pagination/pagination";
import { ListFocusId } from "./components/pick-list/shared-list-logic";
import { ICON_TYPES } from "./components/pick-list/resources";
import { RadioAppearance } from "./components/radio-group/interfaces";
import { StepperItemChangeEventDetail, StepperItemEventDetail, StepperItemKeyEventDetail } from "./components/stepper/interfaces";
import { TabID, TabLayout, TabPosition } from "./components/tabs/interfaces";
import { TabChangeEventDetail } from "./components/tab/interfaces";
import { TileSelectType } from "./components/tile-select/interfaces";
import { TileSelectGroupLayout } from "./components/tile-select-group/interfaces";
import { TimePart } from "./utils/time";
import { TreeSelectDetail, TreeSelectionMode } from "./components/tree/interfaces";
import { TreeItemSelectDetail } from "./components/tree-item/interfaces";
export namespace Components {
    interface CalciteAccordion {
        /**
          * Specifies the appearance of the component.
         */
        "appearance": AccordionAppearance;
        /**
          * Specifies the placement of the icon in the header.
         */
        "iconPosition": Position;
        /**
          * Specifies the type of the icon in the header.
         */
        "iconType": "chevron" | "caret" | "plus-minus";
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the selection mode - "multi" (allow any number of open items), "single" (allow one open item), or "single-persist" (allow and require one open item).
         */
        "selectionMode": "multi" | "single" | "single-persist";
    }
    interface CalciteAccordionItem {
        /**
          * When true, the component is active.
          * @deprecated use expanded instead
         */
        "active": boolean;
        /**
          * Specifies a description for the component.
         */
        "description": string;
        /**
          * When true, item is expanded
         */
        "expanded": boolean;
        /**
          * Specifies heading text for the component.
         */
        "heading"?: string;
        /**
          * Specifies an icon to display - accepts Calcite UI icon names.
         */
        "icon"?: string;
        /**
          * Specifies a subtitle for the component.
          * @deprecated Use `description` instead.
         */
        "itemSubtitle"?: string;
        /**
          * Specifies a title for the component.
          * @deprecated Use `heading` instead.
         */
        "itemTitle"?: string;
    }
    interface CalciteAction {
        /**
          * When true, the component is highlighted.
         */
        "active": boolean;
        /**
          * Specifies the horizontal alignment of button elements with text content.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the appearance of the component.
         */
        "appearance": Extract<"solid" | "clear", Appearance>;
        /**
          * When true, the side padding of the component is reduced. Compact mode is used internally by components, e.g. `calcite-block-section`.
         */
        "compact": boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies an icon to display - accepts Calcite UI icon names.
         */
        "icon"?: string;
        /**
          * When true, indicates unread changes.
         */
        "indicator": boolean;
        /**
          * Specifies the text label to display while loading.
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies text that accompanies the icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
    }
    interface CalciteActionBar {
        /**
          * When true, the expand-toggling behavior is disabled.
         */
        "expandDisabled": boolean;
        /**
          * When true, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Specifies the label of the expand icon when the component is collapsed.
         */
        "intlExpand"?: string;
        /**
          * Overflows actions that won't fit into menus.
         */
        "overflowActions": () => Promise<void>;
        /**
          * Disables automatically overflowing `calcite-action`s that won't fit into menus.
         */
        "overflowActionsDisabled": boolean;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position": Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
          * @param focusId
         */
        "setFocus": (focusId?: "expand-toggle") => Promise<void>;
    }
    interface CalciteActionGroup {
        /**
          * Indicates number of columns.
         */
        "columns"?: Columns;
        /**
          * When true, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies a text string for the `calcite-action-menu`.
         */
        "intlMore"?: string;
        /**
          * Indicates the layout of the component.
         */
        "layout": Layout;
        /**
          * When true, the `calcite-action-menu` is open.
         */
        "menuOpen": boolean;
        /**
          * Specifies the size of the `calcite-action-menu`.
         */
        "scale": Scale;
    }
    interface CalciteActionMenu {
        /**
          * When true, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * Specifies the text string for the component.
         */
        "label": string;
        /**
          * When true, the component is open.
         */
        "open": boolean;
        /**
          * Determines the type of positioning to use for the overlaid content. If your element is in a fixed container, use the "fixed" value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement": PopperPlacement;
        /**
          * Specifies the size of the component's trigger `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteActionPad {
        /**
          * When true, the expand-toggling behavior is disabled.
         */
        "expandDisabled": boolean;
        /**
          * When true, the component is expanded.
         */
        "expanded": boolean;
        /**
          * Specifies the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Specifies the label of the expand icon when the component is collapsed.
         */
        "intlExpand"?: string;
        /**
          * Indicates the layout of the component.
         */
        "layout": Layout;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position": Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
          * @param focusId
         */
        "setFocus": (focusId?: "expand-toggle") => Promise<void>;
    }
    interface CalciteAlert {
        /**
          * When true, the component is active.
         */
        "active": boolean;
        /**
          * When true, the component closes automatically (recommended for passive, non-blocking alerts).
         */
        "autoDismiss": boolean;
        /**
          * Specifies the duration before the component automatically closes (only use with `autoDismiss`).
         */
        "autoDismissDuration": AlertDuration;
        /**
          * Specifies the color for the component (will apply to top border and icon).
         */
        "color": StatusColor;
        /**
          * When true, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": string | boolean;
        /**
          * Specifies the text label for the close button.
          * @default "Close"
         */
        "intlClose": string;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        /**
          * Specifies the placement of the component
         */
        "placement": AlertPlacement;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteAvatar {
        /**
          * Specifies the full name of the user.
         */
        "fullName": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail": string;
        /**
          * Specifies the unique id of the user.
         */
        "userId": string;
        /**
          * Specifies the username of the user.
         */
        "username": string;
    }
    interface CalciteBlock {
        /**
          * When true, this block will be collapsible.
         */
        "collapsible": boolean;
        /**
          * Block description
         */
        "description": string;
        /**
          * When true, removes padding for the slotted content
         */
        "disablePadding": boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * When true, displays a drag handle in the header.
         */
        "dragHandle": boolean;
        /**
          * Block heading.
         */
        "heading": string;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadingLevel;
        /**
          * Aria-label for collapsing the toggle and tooltip used for the toggle when expanded.
          * @default "Collapse"
         */
        "intlCollapse"?: string;
        /**
          * Aria-label for expanding the toggle and tooltip used for the toggle when collapsed.
          * @default "Expand"
         */
        "intlExpand"?: string;
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Text string used for the actions menu
          * @default "Options"
         */
        "intlOptions"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * When true, the block's content will be displayed.
         */
        "open": boolean;
        /**
          * Block status. Updates or adds icon to show related icon and color.
         */
        "status"?: Status;
        /**
          * Block summary.
          * @deprecated use description instead
         */
        "summary": string;
    }
    interface CalciteBlockSection {
        /**
          * Tooltip used for the toggle when expanded.
         */
        "intlCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
         */
        "intlExpand"?: string;
        /**
          * When true, the block's section content will be displayed.
         */
        "open": boolean;
        /**
          * BlockSection status. Adds indicator to show valid or invalid status.
         */
        "status"?: Status;
        /**
          * Text displayed in the button.
         */
        "text": string;
        /**
          * This property determines the look of the section toggle. If the value is "switch", a toggle-switch will be displayed. If the value is "button", a clickable header is displayed.
         */
        "toggleDisplay": BlockSectionToggleDisplay;
    }
    interface CalciteButton {
        /**
          * optionally specify alignment of button elements.
         */
        "alignment"?: ButtonAlignment;
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance": ButtonAppearance;
        /**
          * specify the color of the button, defaults to blue
         */
        "color": ButtonColor;
        /**
          * is the button disabled
         */
        "disabled": boolean;
        /**
          * The form ID to associate with the component
          * @deprecated – this property is no longer needed if placed inside a form.
         */
        "form"?: string;
        /**
          * optionally pass a href - used to determine if the component should render as a button or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of a button - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of a button - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Applies to the aria-label attribute on the button or hyperlink
         */
        "label"?: string;
        /**
          * optionally add a calcite-loader component to the button, disabling interaction.
         */
        "loading": boolean;
        /**
          * The name attribute to apply to the button
         */
        "name"?: string;
        /**
          * The rel attribute to apply to the hyperlink
         */
        "rel"?: string;
        /**
          * optionally add a round style to the button
         */
        "round": boolean;
        /**
          * specify the scale of the button, defaults to m
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * is the button a child of a calcite-split-button
         */
        "splitChild"?: "primary" | "secondary" | false;
        /**
          * The target attribute to apply to the hyperlink
         */
        "target"?: string;
        /**
          * The type attribute to apply to the button
         */
        "type": string;
        /**
          * specify the width of the button, defaults to auto
         */
        "width": Width;
    }
    interface CalciteCard {
        /**
          * string to override English deselect text for checkbox when selectable is true
          * @default "Deselect"
         */
        "intlDeselect": string;
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * string to override English select text for checkbox when selectable is true
          * @default "Select"
         */
        "intlSelect": string;
        /**
          * When true, the cards content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Indicates whether the card is selectable.
         */
        "selectable": boolean;
        /**
          * Indicates whether the card is selected.
         */
        "selected": boolean;
        "thumbnailPosition": LogicalFlowPosition;
    }
    interface CalciteCheckbox {
        /**
          * The checked state of the checkbox.
         */
        "checked": boolean;
        /**
          * True if the checkbox is disabled
         */
        "disabled": boolean;
        /**
          * The id attribute of the checkbox.  When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * The hovered state of the checkbox.
         */
        "hovered": boolean;
        /**
          * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
         */
        "indeterminate": boolean;
        /**
          * The label of the checkbox input
         */
        "label"?: string;
        /**
          * The name of the checkbox input
         */
        "name": any;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * specify the scale of the checkbox, defaults to m
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the checkbox input
         */
        "value": any;
    }
    interface CalciteChip {
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance": Extract<"solid" | "clear", Appearance>;
        /**
          * When true, show abutton user can click to dismiss the chip.
         */
        "closable": boolean;
        /**
          * When true, hides the chip
         */
        "closed": boolean;
        /**
          * specify the color of the button, defaults to blue
         */
        "color": ChipColor;
        /**
          * Aria label for the "x" button
          * @default "Close"
         */
        "dismissLabel"?: string;
        /**
          * Optionally show a button the user can click to dismiss the chip
          * @deprecated use closable instead
         */
        "dismissible": boolean;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * flip the icon in rtl
         */
        "iconFlipRtl": boolean;
        /**
          * specify the scale of the chip, defaults to m
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The assigned value for the chip
         */
        "value": any;
    }
    interface CalciteColorPicker {
        /**
          * When false, empty color (null) will be allowed as a value. Otherwise, a color value is always enforced by the component.  When true, clearing the input and blurring will restore the last valid color set. When false, it will set it to empty.
         */
        "allowEmpty": boolean;
        /**
          * specify the appearance - default (containing border), or minimal (no containing border)
         */
        "appearance": ColorAppearance;
        /**
          * Internal prop for advanced use-cases.
         */
        "color": InternalColor | null;
        /**
          * When true, disabled prevents user interaction.
         */
        "disabled": boolean;
        /**
          * The format of the value property.  When "auto", the format will be inferred from `value` when set.
          * @default "auto"
         */
        "format": Format;
        /**
          * When true, hides the RGB/HSV channel inputs
         */
        "hideChannels": boolean;
        /**
          * When true, hides the hex input
         */
        "hideHex": boolean;
        /**
          * When true, hides the saved colors section
         */
        "hideSaved": boolean;
        /**
          * Label used for the blue channel
          * @default "B"
         */
        "intlB": string;
        /**
          * Label used for the blue channel description
          * @default "Blue"
         */
        "intlBlue": string;
        /**
          * Label used for the delete color button.
          * @default "Delete color"
         */
        "intlDeleteColor": string;
        /**
          * Label used for the green channel
          * @default "G"
         */
        "intlG": string;
        /**
          * Label used for the green channel description
          * @default "Green"
         */
        "intlGreen": string;
        /**
          * Label used for the hue channel
          * @default "H"
         */
        "intlH": string;
        /**
          * Label used for the hex input
          * @default "Hex"
         */
        "intlHex": string;
        /**
          * Label used for the HSV mode
          * @default "HSV"
         */
        "intlHsv": string;
        /**
          * Label used for the hue channel description
          * @default "Hue"
         */
        "intlHue": string;
        /**
          * Label used for the hex input when there is no color selected.
          * @default "No color"
         */
        "intlNoColor": string;
        /**
          * Label used for the red channel
          * @default "R"
         */
        "intlR": string;
        /**
          * Label used for the red channel description
          * @default "Red"
         */
        "intlRed": string;
        /**
          * Label used for the RGB mode
          * @default "RGB"
         */
        "intlRgb": string;
        /**
          * Label used for the saturation channel
          * @default "S"
         */
        "intlS": string;
        /**
          * Label used for the saturation channel description
          * @default "Saturation"
         */
        "intlSaturation": string;
        /**
          * Label used for the save color button.
          * @default "Save color"
         */
        "intlSaveColor": string;
        /**
          * Label used for the saved colors section
          * @default "Saved"
         */
        "intlSaved": string;
        /**
          * Label used for the value channel
          * @default "V"
         */
        "intlV": string;
        /**
          * Label used for the
          * @default "Value"
         */
        "intlValue": string;
        /**
          * standard UniCode numeral system tag for localization
         */
        "numberingSystem"?: string;
        /**
          * The scale of the color picker.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Storage ID for colors.
         */
        "storageId": string;
        /**
          * The color value.  This value can be either a {@link https ://developer.mozilla.org/en-US/docs/Web/CSS/color|CSS string} a RGB, HSL or HSV object.  The type will be preserved as the color is updated.
          * @default "#007ac2"
          * @see [ColorValue](https://github.com/Esri/calcite-components/blob/master/src/components/color-picker/interfaces.ts#L10)
         */
        "value": ColorValue | null;
    }
    interface CalciteColorPickerHexInput {
        /**
          * When false, empty color (null) will be allowed as a value. Otherwise, a color value is always enforced by the component.  When true, clearing the input and blurring will restore the last valid color set. When false, it will set it to empty.
         */
        "allowEmpty": boolean;
        /**
          * Label used for the hex input.
          * @default "Hex"
         */
        "intlHex": string;
        /**
          * Label used for the hex input when there is no color selected.
          * @default "No color"
         */
        "intlNoColor": string;
        /**
          * standard UniCode numeral system tag for localization
         */
        "numberingSystem"?: string;
        /**
          * The component's scale.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The hex value.
         */
        "value": string;
    }
    interface CalciteColorPickerSwatch {
        /**
          * Used to display whether the swatch is active or not.
         */
        "active": boolean;
        /**
          * The color value.
          * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
         */
        "color": string;
        /**
          * The component scale.
         */
        "scale": Scale;
    }
    interface CalciteCombobox {
        /**
          * When true, opens the combobox
          * @deprecated use open instead
         */
        "active": boolean;
        /**
          * Allow entry of custom values which are not in the original set of items
         */
        "allowCustomValues": boolean;
        /**
          * Disable combobox input
         */
        "disabled": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * string to override the English "Remove tag" text for when an item is selected.
          * @default "Remove tag"
         */
        "intlRemoveTag": string;
        /**
          * Aria label for combobox (required)
         */
        "label": string;
        /**
          * Specify the maximum number of combobox items (including nested children) to display before showing the scroller
         */
        "maxItems": number;
        /**
          * The name of the switch input
         */
        "name": string;
        /**
          * When true, opens the combobox
         */
        "open": boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Placeholder text for input
         */
        "placeholder"?: string;
        /**
          * Placeholder icon for input
         */
        "placeholderIcon"?: string;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * Specify the scale of the combobox, defaults to m
         */
        "scale": Scale;
        /**
          * specify the selection mode - multi: allow any number of selected items (default) - single: only one selection) - ancestors: like multi, but show ancestors of selected items as selected, only deepest children shown in chips
         */
        "selectionMode": ComboboxSelectionMode;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value(s) of the selectedItem(s)
         */
        "value": string | string[];
    }
    interface CalciteComboboxItem {
        /**
          * True when item is highlighted either from keyboard or mouse hover
         */
        "active": boolean;
        /**
          * Parent and grandparent combobox items, this is set internally for use from combobox
         */
        "ancestors": ComboboxChildElement[];
        /**
          * Don't filter this item based on the search text
          * @deprecated use filterDisabled instead
         */
        "constant": boolean;
        /**
          * When true, the item cannot be clicked and is visually muted.
         */
        "disabled": boolean;
        /**
          * Do not filter this item based on the search text
         */
        "filterDisabled": boolean;
        /**
          * Unique identifier, used for accessibility
         */
        "guid": string;
        /**
          * Custom icon to display both in combobox chips and next to combobox item text
         */
        "icon"?: string;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        /**
          * The main label for this item.
         */
        "textLabel": string;
        /**
          * Used to toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The item's associated value
         */
        "value": any;
    }
    interface CalciteComboboxItemGroup {
        /**
          * Parent and grandparent combobox items, this is set internally for use from combobox
         */
        "ancestors": ComboboxChildElement[];
        /**
          * Title of the group
         */
        "label": string;
    }
    interface CalciteDatePicker {
        /**
          * Active range
         */
        "activeRange"?: "start" | "end";
        /**
          * Selected end date
          * @deprecated use value instead
         */
        "end"?: string;
        /**
          * Selected end date as full date object
          * @deprecated use valueAsDate instead
         */
        "endAsDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadingLevel;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for "year" (used for aria label)
          * @default "Year"
         */
        "intlYear"?: string;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * Range mode activation
         */
        "range": boolean;
        /**
          * specify the scale of the date picker
         */
        "scale": "s" | "m" | "l";
        /**
          * Selected start date
          * @deprecated use value instead
         */
        "start"?: string;
        /**
          * Selected start date as full date object
          * @deprecated use valueAsDate instead
         */
        "startAsDate"?: Date;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteDatePickerDay {
        /**
          * Date is actively in focus for keyboard navigation
         */
        "active": boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth": boolean;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * Date is outside of range and can't be selected
         */
        "disabled": boolean;
        /**
          * Date is the end of date range
         */
        "endOfRange": boolean;
        /**
          * Date is currently highlighted as part of the range
         */
        "highlighted": boolean;
        /**
          * CLDR data for current locale
         */
        "localeData": DateLocaleData;
        /**
          * Showing date range
         */
        "range": boolean;
        /**
          * Date is being hovered and within the set range
         */
        "rangeHover": boolean;
        /**
          * specify the scale of the date picker
         */
        "scale": Scale;
        /**
          * Date is the current selected date of the picker
         */
        "selected": boolean;
        /**
          * Date is the start of date range
         */
        "startOfRange": boolean;
        /**
          * Date value for the day.
         */
        "value": Date;
    }
    interface CalciteDatePickerMonth {
        /**
          * Date currently active.
         */
        "activeDate": Date;
        /**
          * End date currently active
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered
         */
        "hoverRange": HoverRange;
        /**
          * CLDR locale data for current locale
         */
        "localeData": DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max": Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min": Date;
        /**
          * specify the scale of the date picker
         */
        "scale": Scale;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface CalciteDatePickerMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate": Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadingLevel;
        /**
          * Localized string for next month.
         */
        "intlNextMonth": string;
        /**
          * Localized string for previous month.
         */
        "intlPrevMonth": string;
        /**
          * Localized string for year.
         */
        "intlYear": string;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale": string;
        /**
          * CLDR locale data for translated calendar info
         */
        "localeData": DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max": Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min": Date;
        /**
          * specify the scale of the date picker
         */
        "scale": Scale;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
    }
    interface CalciteDropdown {
        /**
          * Opens or closes the dropdown
          * @deprecated use open instead.
         */
        "active": boolean;
        /**
          * allow the dropdown to remain open after a selection is made if the selection-mode of the selected item's containing group is "none", the dropdown will always close
         */
        "disableCloseOnSelect": boolean;
        /**
          * is the dropdown disabled
         */
        "disabled": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * specify the maximum number of calcite-dropdown-items to display before showing the scroller, must be greater than 0 - this value does not include groupTitles passed to calcite-dropdown-group
         */
        "maxItems": number;
        /**
          * When true, opens the dropdown
         */
        "open": boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the dropdown will be positioned relative to the button.
          * @default "bottom-leading"
         */
        "placement": MenuPlacement;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
        /**
          * specify the scale of dropdown, defaults to m
         */
        "scale": Scale;
        /**
          * **read-only** The currently selected items
          * @readonly
         */
        "selectedItems": HTMLCalciteDropdownItemElement[];
        /**
          * specify whether the dropdown is opened by hover or click of a trigger element
         */
        "type": "hover" | "click";
        /**
          * specify the width of dropdown
         */
        "width"?: Scale;
    }
    interface CalciteDropdownGroup {
        /**
          * optionally set a group title for display
         */
        "groupTitle"?: string;
        /**
          * Specifies the size of the action.
         */
        "scale": Scale;
        /**
          * specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item), none (no active items), defaults to single
         */
        "selectionMode": SelectionMode;
    }
    interface CalciteDropdownItem {
        /**
          * Indicates whether the item is active.
         */
        "active": boolean;
        /**
          * optionally pass a href - used to determine if the component should render as anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of an item - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of an item - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * Applies to the aria-label attribute on the button or hyperlink
         */
        "label"?: string;
        /**
          * The rel attribute to apply to the hyperlink
         */
        "rel"?: string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The target attribute to apply to the hyperlink
         */
        "target"?: string;
    }
    interface CalciteFab {
        /**
          * Used to set the button's appearance. Default is outline.
         */
        "appearance": Extract<"solid" | "outline", Appearance>;
        /**
          * Used to set the button's color. Default is light.
         */
        "color": ButtonColor;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
          * @default "plus"
         */
        "icon"?: string;
        /**
          * Label of the FAB, exposed on hover when textEnabled is false. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
        /**
          * Specifies the size of the fab.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Text that accompanies the FAB icon.
         */
        "text"?: string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
    }
    interface CalciteFilter {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * The resulting items after filtering.
          * @readonly
         */
        "filteredItems": object[];
        /**
          * A text label that will appear on the clear button.
         */
        "intlClear"?: string;
        /**
          * A text label that will appear next to the input field.
         */
        "intlLabel"?: string;
        /**
          * The items to filter through. The filter uses this as the starting point, and returns items that contain the string entered in the input, using a partial match and recursive search.  This property is required.
         */
        "items": object[];
        /**
          * Placeholder text for the input element's placeholder attribute
         */
        "placeholder"?: string;
        /**
          * specify the scale of filter, defaults to m
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Filter value.
         */
        "value": string;
    }
    interface CalciteFlow {
        /**
          * Removes the currently active `calcite-panel`.
         */
        "back": () => Promise<HTMLCalcitePanelElement>;
    }
    interface CalciteGraph {
        /**
          * Array of values describing a single color stop ([offset, color, opacity]) These color stops should be sorted by offset value
         */
        "colorStops": ColorStop[];
        /**
          * Array of tuples describing a single data point ([x, y]) These data points should be sorted by x-axis value
         */
        "data": DataSeries;
        /**
          * End of highlight color if highlighting range
         */
        "highlightMax": number;
        /**
          * Start of highlight color if highlighting range
         */
        "highlightMin": number;
        /**
          * Highest point of the range
         */
        "max": number;
        /**
          * Lowest point of the range
         */
        "min": number;
    }
    interface CalciteHandle {
        "activated": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Value for the button title attribute
         */
        "textTitle": string;
    }
    interface CalciteIcon {
        /**
          * When true, the icon will be flipped when the element direction is 'rtl'.
         */
        "flipRtl": boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon": string;
        /**
          * Icon scale.
         */
        "scale": Scale;
        /**
          * The icon label.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel": string;
    }
    interface CalciteInlineEditable {
        /**
          * when controls, specify a callback to be executed prior to disabling editing. when provided, loading state will be handled automatically.
         */
        "afterConfirm"?: () => Promise<void>;
        /**
          * specify whether save/cancel controls should be displayed when editingEnabled is true, defaults to false
         */
        "controls": boolean;
        /**
          * specify whether editing can be enabled
         */
        "disabled": boolean;
        /**
          * specify whether the wrapped input element is editable, defaults to false
         */
        "editingEnabled": boolean;
        /**
          * specify text to be user for the cancel editing button's aria-label, defaults to `Cancel`
          * @default "Cancel"
         */
        "intlCancelEditing": string;
        /**
          * specify text to be user for the confirm changes button's aria-label, defaults to `Save`
          * @default "Save"
         */
        "intlConfirmChanges": string;
        /**
          * specify text to be user for the enable editing button's aria-label, defaults to `Click to edit`
          * @default "Click to edit"
         */
        "intlEnableEditing": string;
        /**
          * specify whether the confirm button should display a loading state, defaults to false
         */
        "loading": boolean;
        /**
          * specify the scale of the inline-editable component, defaults to the scale of the wrapped calcite-input or the scale of the closest wrapping component with a set scale
         */
        "scale"?: Scale;
        "setFocus": () => Promise<void>;
    }
    interface CalciteInput {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Position;
        /**
          * When true, the component is focused on page load.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus": boolean;
        /**
          * When true, a clear button is displayed when the component has a value. The clear button shows by default for "search", "time", and "date" types, and will not display for the "textarea" type.
         */
        "clearable": boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * When true, number values are displayed with the locale's group separator.
         */
        "groupSeparator": boolean;
        /**
          * When true, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden": boolean;
        /**
          * When true, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": string | boolean;
        /**
          * When true, the icon is flipped in RTL.
         */
        "iconFlipRtl": boolean;
        /**
          * A text label that will appear on the clear button for screen readers.
         */
        "intlClear"?: string;
        /**
          * Accessible name that will appear while loading.
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When true, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the BCP 47 language tag for the desired language and country format.
         */
        "locale": string;
        /**
          * Toggles locale formatting for numbers.
         */
        "localeFormat": boolean;
        /**
          * Specifies the maximum value for type "number".
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @deprecated use maxLength instead
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum value for type "number".
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies the placement of the buttons for type "number".
         */
        "numberButtonType"?: InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
          * @mdn [numberingSystem](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem)
         */
        "numberingSystem"?: string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When true, the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When true, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects all text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * Specifies the component type.  Note that the following types add type-specific icons by default: "date", "email", "password", "search", "tel", "time".
         */
        "type": | "color"
    | "date"
    | "datetime-local"
    | "email"
    | "file"
    | "image"
    | "month"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "textarea"
    | "time"
    | "url"
    | "week";
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputDatePicker {
        /**
          * Expand or collapse when calendar does not have input
         */
        "active": boolean;
        /**
          * When false, the component won't be interactive.
         */
        "disabled": boolean;
        /**
          * Selected end date
          * @deprecated use value instead
         */
        "end"?: string;
        /**
          * Selected end date as full date object
          * @deprecated use valueAsDate instead
         */
        "endAsDate"?: Date;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadingLevel;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for "year" (used for aria label)
          * @default "Year"
         */
        "intlYear"?: string;
        /**
          * Layout
         */
        "layout": "horizontal" | "vertical";
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * The picker's name. Gets submitted with the form.
         */
        "name": string;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the date-picker component will be positioned relative to the input.
          * @default "bottom-leading"
         */
        "placement": MenuPlacement;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * Range mode activation
         */
        "range": boolean;
        /**
          * When true, still focusable but controls are gone and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * specify the scale of the date picker
         */
        "scale": "s" | "m" | "l";
        /**
          * Updates the position of the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Selected start date
          * @deprecated use value instead
         */
        "start"?: string;
        /**
          * Selected start date as full date object
          * @deprecated use valueAsDate instead
         */
        "startAsDate"?: Date;
        /**
          * Selected date
         */
        "value": string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteInputMessage {
        /**
          * Indicates whether the message is displayed.
         */
        "active": boolean;
        /**
          * when used as a boolean set to true, show a default icon based on status. You can also pass a calcite-ui-icon name to this prop to display a custom icon
         */
        "icon": boolean | string;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale": Scale;
        /**
          * specify the status of the input field, determines message and icons
         */
        "status": Status;
        /**
          * specify the appearance of any slotted message - default (displayed under input), or floating (positioned absolutely under input)
          * @deprecated "floating" type is no longer supported
         */
        "type": "default";
    }
    interface CalciteInputNumber {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment": Position;
        /**
          * When true, the component is focused on page load.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus": boolean;
        /**
          * When true, a clear button is displayed when the component has a value.
         */
        "clearable": boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled": boolean;
        "editingEnabled": boolean;
        /**
          * When true, number values are displayed with the locale's group separator.
         */
        "groupSeparator": boolean;
        /**
          * When true, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden": boolean;
        /**
          * When true, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon": string | boolean;
        /**
          * When true, the icon is flipped in RTL.
         */
        "iconFlipRtl": boolean;
        /**
          * A text label that will appear on the clear button for screen readers.
         */
        "intlClear"?: string;
        /**
          * Accessible name that will appear while loading.
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When true, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading": boolean;
        /**
          * Specifies the BCP 47 language tag for the desired language and country format.
         */
        "locale": string;
        /**
          * Toggles locale formatting for numbers.
         */
        "localeFormat": boolean;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name": string;
        /**
          * Specifies the placement of the buttons.
         */
        "numberButtonType"?: InputPlacement1;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
          * @mdn [numberingSystem](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem)
         */
        "numberingSystem"?: string;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder": string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When true, the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * When true, the component must have a value in order for the form to submit.
         */
        "required": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Selects all text of the component's `value`.
         */
        "selectText": () => Promise<void>;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status": Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * The component's value.
         */
        "value": string;
    }
    interface CalciteInputTimePicker {
        /**
          * The active state of the time input
         */
        "active": boolean;
        /**
          * The disabled state of the time input
         */
        "disabled": boolean;
        /**
          * aria-label for the hour input
         */
        "intlHour"?: string;
        /**
          * aria-label for the hour down button
         */
        "intlHourDown"?: string;
        /**
          * aria-label for the hour up button
         */
        "intlHourUp"?: string;
        /**
          * aria-label for the meridiem (am/pm) input
         */
        "intlMeridiem"?: string;
        /**
          * aria-label for the meridiem (am/pm) down button
         */
        "intlMeridiemDown"?: string;
        /**
          * aria-label for the meridiem (am/pm) up button
         */
        "intlMeridiemUp"?: string;
        /**
          * aria-label for the minute input
         */
        "intlMinute"?: string;
        /**
          * aria-label for the minute down button
         */
        "intlMinuteDown"?: string;
        /**
          * aria-label for the minute up button
         */
        "intlMinuteUp"?: string;
        /**
          * aria-label for the second input
         */
        "intlSecond"?: string;
        /**
          * aria-label for the second down button
         */
        "intlSecondDown"?: string;
        /**
          * aria-label for the second up button
         */
        "intlSecondUp"?: string;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale": string;
        /**
          * The name of the time input
         */
        "name": string;
        /**
          * Determines where the popover will be positioned relative to the input.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement": PopperPlacement;
        /**
          * When true, still focusable but controls are gone and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly": boolean;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * The scale (size) of the time input
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * number (seconds) that specifies the granularity that the value must adhere to
         */
        "step": number;
        /**
          * The selected time in UTC (always 24-hour format)
         */
        "value": string;
    }
    interface CalciteLabel {
        /**
          * specify the text alignment of the label
         */
        "alignment": Alignment;
        /**
          * eliminates any space around the label
          * @deprecated set the --calcite-label-margin-bottom css variable to 0 instead
         */
        "disableSpacing": boolean;
        /**
          * is the label disabled
          * @deprecated use the `disabled` property on the interactive components instead
         */
        "disabled": boolean;
        /**
          * The id of the input associated with the label
         */
        "for": string;
        /**
          * is the wrapped element positioned inline with the label slotted text
         */
        "layout": "inline" | "inline-space-between" | "default";
        /**
          * specify the scale of the label, defaults to m
         */
        "scale": Scale;
        /**
          * specify the status of the label and any child input / input messages
          * @deprecated set directly on child element instead
         */
        "status": Status;
    }
    interface CalciteLink {
        /**
          * is the link disabled
         */
        "disabled": boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download": string | boolean;
        /**
          * optionally pass a href - used to determine if the component should render as a link or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of a button - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of a button - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * The rel attribute to apply to the hyperlink
         */
        "rel"?: string;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The target attribute to apply to the hyperlink
         */
        "target"?: string;
    }
    interface CalciteList {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteListItem {
        /**
          * A description for the component. Displays below the label text.
         */
        "description"?: string;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * The label text of the component. Displays above the description text.
         */
        "label": string;
        /**
          * When true, prevents the content of the component from user interaction.
         */
        "nonInteractive": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
    }
    interface CalciteListItemGroup {
        /**
          * The header text for all nested `calcite-list-item` rows.
         */
        "heading": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
    }
    interface CalciteLoader {
        /**
          * When true, the component is active.
         */
        "active": boolean;
        /**
          * When true, displays smaller and appears to the left of the text.
         */
        "inline": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Disables spacing around the component.
         */
        "noPadding": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Use indeterminate if finding actual progress value is impossible.
         */
        "type": "indeterminate" | "determinate";
        /**
          * The component's value. Valid only for determinate indicators. Percent complete of 100.
         */
        "value": number;
    }
    interface CalciteModal {
        /**
          * When true, the `calcite-modal` is active.
          * @deprecated use open instead
         */
        "active": boolean;
        /**
          * Sets the background color of the component's content.
         */
        "backgroundColor": ModalBackgroundColor;
        /**
          * Passes a function to run before the `calcite-modal` closes.
         */
        "beforeClose"?: (el: HTMLElement) => Promise<void>;
        /**
          * Adds a color bar to the top of component for visual impact. Use color to add importance to destructive or workflow dialogs.
         */
        "color"?: "red" | "blue";
        /**
          * When true, disables the component's close button.
         */
        "disableCloseButton": boolean;
        /**
          * When true, disables the default close on escape behavior.
         */
        "disableEscape": boolean;
        /**
          * When true, disables the closing of the component when clicked outside.
         */
        "disableOutsideClose": boolean;
        /**
          * When true, prevents the component from expanding to the entire screen on mobile devices.
         */
        "docked": boolean;
        /**
          * Focus the first interactive element.
          * @param el
          * @deprecated use `setFocus` instead.
         */
        "focusElement": (el?: HTMLElement) => Promise<void>;
        /**
          * Sets the component to always be fullscreen (overrides width).
         */
        "fullscreen": boolean;
        /**
          * Accessible name for the component's close button.
         */
        "intlClose": string;
        /**
          * When true, disables spacing to the content area slot.
         */
        "noPadding": boolean;
        /**
          * When true,`calcite-modal`  opens
         */
        "open": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets the scroll top of the component's content.
          * @param top
          * @param left
         */
        "scrollContent": (top?: number, left?: number) => Promise<void>;
        /**
          * Sets focus on the component.  By default, tries to focus on focusable content. If there is none, it will focus on the close button. To focus on the close button, use the `close-button` focus ID.
          * @param focusId
         */
        "setFocus": (focusId?: "close-button") => Promise<void>;
        /**
          * Specifies the width of the component. Can use scale sizes or pass a number (displays in pixels).
         */
        "width": Scale | number;
    }
    interface CalciteNotice {
        /**
          * When true, the component is active.
         */
        "active": boolean;
        /**
          * When true, displays a button user can click to dismiss the `calcite-notice`
         */
        "closable"?: boolean;
        /**
          * The color for the component's top border and icon.
         */
        "color": StatusColor;
        /**
          * When true, a close button is added to the component.
          * @deprecated use closable instead
         */
        "dismissible"?: boolean;
        /**
          * When present, shows a default recommended icon. You can also pass a calcite-ui-icon name to display a requested icon.
         */
        "icon": string | boolean;
        /**
          * Accessible name for the close button.
          * @default "Close"
         */
        "intlClose": string;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the width of the component.
         */
        "width": Width;
    }
    interface CalciteOption {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When true, the component is selected.
         */
        "selected": boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalciteOptionGroup {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
    }
    interface CalcitePagination {
        /**
          * Go to the next page of results.
         */
        "nextPage": () => Promise<void>;
        /**
          * Specifies the number of items per page.
         */
        "num": number;
        /**
          * Go to the previous page of results.
         */
        "previousPage": () => Promise<void>;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Specifies the starting item number.
         */
        "start": number;
        /**
          * Accessible name for the component's next button.
          * @default "Next"
         */
        "textLabelNext": string;
        /**
          * Accessible name for the component's previous button.
          * @default "Previous"
         */
        "textLabelPrevious": string;
        /**
          * Specifies the total number of items.
         */
        "total": number;
    }
    interface CalcitePanel {
        /**
          * When provided, this method will be called before it is removed from the parent flow.
         */
        "beforeBack"?: () => Promise<void>;
        /**
          * When true, displays a close button in the trailing side of the header
         */
        "closable": boolean;
        /**
          * When true, panel will be hidden
         */
        "closed": boolean;
        /**
          * A description for the component.
         */
        "description": string;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When true, hides the component.
          * @deprecated use closed instead
         */
        "dismissed": boolean;
        /**
          * When true, a close button is added to the component.
          * @deprecated use closable instead
         */
        "dismissible": boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Specifies the maximum height of the component.
         */
        "heightScale"?: Scale;
        /**
          * Accessible name for the component's back button. The back button will only be shown when 'showBackButton' is true.
         */
        "intlBack"?: string;
        /**
          * Accessible name for the component's close button. The close button will only be shown when 'dismissible' is true.
         */
        "intlClose"?: string;
        /**
          * Accessible name for the component's actions menu.
         */
        "intlOptions"?: string;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * When true, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen": boolean;
        /**
          * Scrolls the component's content to a specified set of coordinates.  ```   myCalcitePanel.scrollContentTo({     left: 0, // Specifies the number of pixels along the X axis to scroll the window or element.     top: 0, // Specifies the number of pixels along the Y axis to scroll the window or element     behavior: "auto" // Specifies whether the scrolling should animate smoothly (smooth), or happen instantly in a single jump (auto, the default value).   }); ```
          * @param options
         */
        "scrollContentTo": (options?: ScrollToOptions) => Promise<void>;
        /**
          * Sets focus on the component.
          * @param focusId
         */
        "setFocus": (focusId?: "dismiss-button" | "back-button") => Promise<void>;
        /**
          * When true, displays a back button in the header.
         */
        "showBackButton": boolean;
        /**
          * Summary text. A description displayed underneath the heading.
          * @deprecated use description instead
         */
        "summary"?: string;
        /**
          * Specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalcitePickList {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When true, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the filter input field.
         */
        "filterPlaceholder": string;
        /**
          * Returns the component's selected `calcite-pick-list-item`s.
         */
        "getSelectedItems": () => Promise<Map<string, HTMLCalcitePickListItemElement>>;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When true, a user can select multiple `calcite-pick-list-item`s at a time. When false, only a single `calcite-pick-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple": boolean;
        /**
          * When true and single-selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
         */
        "selectionFollowsFocus": boolean;
        /**
          * Sets focus on the component.
          * @param focusId
         */
        "setFocus": (focusId?: ListFocusId) => Promise<void>;
    }
    interface CalcitePickListGroup {
        /**
          * Specifies the title for all nested `calcite-pick-list-item`s.
         */
        "groupTitle": string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
    }
    interface CalcitePickListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        /**
          * When false, the component cannot be deselected by user interaction.
         */
        "disableDeselect": boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Accessible name for the component's remove button. Only applicable if removable is "true".
          * @default "Remove"
         */
        "intlRemove": string;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        "nonInteractive": boolean;
        /**
          * When true, displays a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * When true, selects an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Toggles the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalcitePopover {
        /**
          * When true and clicking outside of the component, automatically closes open `calcite-popover`s.
         */
        "autoClose": boolean;
        /**
          * When true, display a close button within the Popover
         */
        "closable": boolean;
        /**
          * When true, a close button is added to the component.
          * @deprecated use dismissible instead.
         */
        "closeButton": boolean;
        /**
          * When true, prevents flipping the component's placement when overlapping its `referenceElement`.
         */
        "disableFlip": boolean;
        /**
          * When true, removes the caret pointer.
         */
        "disablePointer": boolean;
        /**
          * When true, a close button is added to the component.
          * @deprecated use closable instead
         */
        "dismissible": boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel": HeadingLevel;
        /**
          * Accessible name for the component's close button.
          * @default "Close"
         */
        "intlClose": string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Offsets the position of the popover away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offsets the position of the popover along the `referenceElement`.
         */
        "offsetSkidding": number;
        /**
          * When true, displays and positions the component.
         */
        "open": boolean;
        /**
          * Describes the positioning type to use for the overlaid content. If the element is in a fixed container, use the "fixed" value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement": PopperPlacement;
        /**
          * The `referenceElement` used to position the component according to its "placement" value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
        /**
          * Sets focus on the component.
          * @param focusId
         */
        "setFocus": (focusId?: "close-button") => Promise<void>;
        /**
          * Toggles the component's open property.
          * @param value
         */
        "toggle": (value?: boolean) => Promise<void>;
        /**
          * When true, disables automatically toggling the component when its `referenceElement` has been triggered. This property can be set to "true" to manage when a popover is open.
         */
        "triggerDisabled": boolean;
    }
    interface CalcitePopoverManager {
        /**
          * Automatically closes any currently open popovers when clicking outside of a popover.
         */
        "autoClose": boolean;
        /**
          * CSS Selector to match reference elements for popovers. Reference elements will be identified by this selector in order to open their associated popover.
          * @default `[data-calcite-popover-reference]`
         */
        "selector": string;
    }
    interface CalciteProgress {
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * When true and for indeterminate progress bars, reverses the animation direction.
         */
        "reversed": boolean;
        /**
          * Text that displays under the component's indicator.
         */
        "text": string;
        /**
          * Use indeterminate if finding actual progress value is impossible.
         */
        "type": "indeterminate" | "determinate";
        /**
          * The component's progress value, with a range of 0.0 - 1.0.
         */
        "value": number;
    }
    interface CalciteRadioButton {
        /**
          * The checked state of the radio button.
         */
        "checked": boolean;
        /**
          * The disabled state of the radio button.
         */
        "disabled": boolean;
        "emitCheckedChange": () => Promise<void>;
        /**
          * The focused state of the radio button.
         */
        "focused": boolean;
        /**
          * The id attribute of the radio button.  When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * The radio button's hidden status.  When a radio button is hidden it is not focusable or checkable.
         */
        "hidden": boolean;
        /**
          * The hovered state of the radio button.
         */
        "hovered": boolean;
        /**
          * The label of the radio input
         */
        "label"?: string;
        /**
          * The name of the radio button. `name` is passed as a property automatically from `calcite-radio-button-group`.
         */
        "name": string;
        /**
          * Requires that a value is selected for the radio button group before the parent form will submit.
         */
        "required": boolean;
        /**
          * The scale (size) of the radio button. `scale` is passed as a property automatically from `calcite-radio-button-group`.
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the radio button.
         */
        "value": any;
    }
    interface CalciteRadioButtonGroup {
        /**
          * The disabled state of the radio button group.
         */
        "disabled": boolean;
        /**
          * The radio button group's hidden status.  When a radio button group is hidden none of its options are focusable or checkable.
         */
        "hidden": boolean;
        /**
          * The layout direction of the radio buttons in a group.
         */
        "layout": Layout;
        /**
          * The name of the radio button group. `name` must be unique to other radio button group instances.
         */
        "name": string;
        /**
          * Requires that a value is selected for the radio button group before the parent form will submit.
         */
        "required": boolean;
        /**
          * The scale (size) of the radio button group.
         */
        "scale": Scale;
    }
    interface CalciteRadioGroup {
        /**
          * specify the appearance style of the radio group, defaults to solid.
         */
        "appearance": RadioAppearance;
        /**
          * is the radio group disabled
         */
        "disabled": boolean;
        /**
          * specify the layout of the radio group, defaults to horizontal
         */
        "layout": Layout;
        /**
          * The group's name. Gets submitted with the form.
         */
        "name": string;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * The scale of the radio group
         */
        "scale": Scale;
        /**
          * The group's selected item.
          * @readonly
         */
        "selectedItem": HTMLCalciteRadioGroupItemElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the selectedItem
         */
        "value": string;
        /**
          * specify the width of the group, defaults to auto
         */
        "width": Extract<"auto" | "full", Width>;
    }
    interface CalciteRadioGroupItem {
        /**
          * Indicates whether the control is checked.
         */
        "checked": boolean;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * flip the icon in rtl
         */
        "iconFlipRtl": boolean;
        /**
          * optionally used with icon, select where to position the icon
         */
        "iconPosition"?: Position;
        /**
          * The control's value.
         */
        "value": any | null;
    }
    interface CalciteRating {
        /**
          * optionally pass a cumulative average rating to display
         */
        "average"?: number;
        /**
          * optionally pass a number of previous ratings to display
         */
        "count"?: number;
        /**
          * is the rating component in a selectable mode
         */
        "disabled": boolean;
        /**
          * Localized string for "Rating" (used for aria label)
          * @default "Rating"
         */
        "intlRating"?: string;
        /**
          * Localized string for labelling each star, `${num}` in the string will be replaced by the number
          * @default "Stars: ${num}"
         */
        "intlStars"?: string;
        /**
          * The name of the rating
         */
        "name": string;
        /**
          * is the rating component in a selectable mode
         */
        "readOnly": boolean;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * specify the scale of the component, defaults to m
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Show average and count data summary chip (if available)
         */
        "showChip": boolean;
        /**
          * the value of the rating component
         */
        "value": number;
    }
    interface CalciteScrim {
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Determines if the component will have the loader overlay. Otherwise, will render opaque disabled state.
         */
        "loading": boolean;
    }
    interface CalciteSelect {
        /**
          * When true, it prevents the option from being selected.
         */
        "disabled": boolean;
        /**
          * The component's label. This is required for accessibility purposes.
         */
        "label": string;
        /**
          * The select's name. Gets submitted with the form.
         */
        "name": string;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * The component scale.
         */
        "scale": Scale;
        /**
          * The currently selected option.
          * @readonly
         */
        "selectedOption": HTMLCalciteOptionElement;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the selectedOption
         */
        "value": string;
        /**
          * The component width.
         */
        "width": Width;
    }
    interface CalciteShell {
        /**
          * Positions the center content behind any calcite-shell-panels.
         */
        "contentBehind": boolean;
    }
    interface CalciteShellCenterRow {
        /**
          * This property makes the content area appear like a "floating" panel.
         */
        "detached": boolean;
        /**
          * Specifies the maximum height of the row.
         */
        "heightScale": Scale;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position": Position;
    }
    interface CalciteShellPanel {
        /**
          * Hide the content panel.
         */
        "collapsed": boolean;
        /**
          * This property makes the content area appear like a "floating" panel.
         */
        "detached": boolean;
        /**
          * Specifies the maximum height of the contents when detached.
         */
        "detachedHeightScale": Scale;
        /**
          * Accessible label for resize separator.
          * @default "Resize"
         */
        "intlResize": string;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position": Position;
        /**
          * This property makes the content area resizable if the calcite-shell-panel is not 'detached'.
         */
        "resizable": boolean;
        /**
          * This sets width of the content area.
         */
        "widthScale": Scale;
    }
    interface CalciteSlider {
        /**
          * Disable and gray out the slider
         */
        "disabled": boolean;
        /**
          * Indicates if a histogram is present
         */
        "hasHistogram": boolean;
        /**
          * List of x,y coordinates within the slider's min and max, displays above the slider track.
          * @see [DataSeries](https://github.com/Esri/calcite-components/blob/master/src/components/graph/interfaces.ts#L5)
         */
        "histogram"?: DataSeries;
        /**
          * Array of values describing a single color stop, sorted by offset ascending.
         */
        "histogramStops": ColorStop[];
        /**
          * Label handles with their numeric value
         */
        "labelHandles": boolean;
        /**
          * Label tick marks with their numeric value.
         */
        "labelTicks": boolean;
        /**
          * Maximum selectable value
         */
        "max": number;
        /**
          * Used as an accessible label (aria-label) for second handle if needed (ex. "Temperature, upper bound")
         */
        "maxLabel"?: string;
        /**
          * Currently selected upper number (if multi-select)
         */
        "maxValue"?: number;
        /**
          * Minimum selectable value
         */
        "min": number;
        /**
          * Used as an accessible label (aria-label) for first (or only) handle (ex. "Temperature, lower bound")
         */
        "minLabel": string;
        /**
          * Currently selected lower number (if multi-select)
         */
        "minValue"?: number;
        /**
          * When true, the slider will display values from high to low.  Note that this value will be ignored if the slider has an associated histogram.
         */
        "mirrored": boolean;
        /**
          * The name of the slider
         */
        "name": string;
        /**
          * Interval to move on page up/page down keys
         */
        "pageStep"?: number;
        /**
          * Use finer point for handles
         */
        "precise": boolean;
        /**
          * When true, makes the component required for form-submission.
         */
        "required": boolean;
        /**
          * Specify the scale of the slider, defaults to m
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * When true, enables snap selection along the step interval
         */
        "snap": boolean;
        /**
          * Interval to move on up/down keys
         */
        "step"?: number;
        /**
          * Show tick marks on the number line at provided interval
         */
        "ticks"?: number;
        /**
          * Currently selected number (if single select)
         */
        "value": null | number | number[];
    }
    interface CalciteSortableList {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled": boolean;
        /**
          * Specifies which items inside the element should be draggable.
         */
        "dragSelector"?: string;
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * The selector for the handle elements.
         */
        "handleSelector": string;
        /**
          * Indicates the horizontal or vertical orientation of the component.
         */
        "layout": Layout;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading": boolean;
    }
    interface CalciteSplitButton {
        /**
          * Is the dropdown currently active or not
         */
        "active": boolean;
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance": ButtonAppearance;
        /**
          * specify the color of the control, defaults to blue
         */
        "color": ButtonColor;
        /**
          * is the control disabled
         */
        "disabled": boolean;
        /**
          * specify the icon used for the dropdown menu, defaults to chevron
         */
        "dropdownIconType": DropdownIconType;
        /**
          * aria label for overflow button
         */
        "dropdownLabel"?: string;
        /**
          * optionally add a calcite-loader component to the control, disabling interaction. with the primary button
         */
        "loading": boolean;
        /**
          * Describes the type of positioning to use for the dropdown. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * optionally pass an icon to display at the end of the primary button - accepts Calcite UI icon names
         */
        "primaryIconEnd"?: string;
        /**
          * flip the primary icon(s) in rtl
         */
        "primaryIconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of the primary button - accepts Calcite UI icon names
         */
        "primaryIconStart"?: string;
        /**
          * optionally pass an aria-label for the primary button
         */
        "primaryLabel"?: string;
        /**
          * text for primary action button
         */
        "primaryText": string;
        /**
          * specify the scale of the control, defaults to m
         */
        "scale": Scale;
        /**
          * specify the width of the button, defaults to auto
         */
        "width": Width;
    }
    interface CalciteStepper {
        /**
          * set the last step as active
         */
        "endStep": () => Promise<void>;
        /**
          * set the requested step as active
          * @param step
         */
        "goToStep": (step: number) => Promise<void>;
        /**
          * optionally display a status icon next to the step title
         */
        "icon": boolean;
        /**
          * specify the layout of stepper, defaults to horizontal
         */
        "layout": Extract<"horizontal" | "vertical", Layout>;
        /**
          * set the next step as active
         */
        "nextStep": () => Promise<void>;
        /**
          * optionally display the number next to the step title
         */
        "numbered": boolean;
        /**
          * set the previous step as active
         */
        "prevStep": () => Promise<void>;
        "requestedContent": Node[];
        /**
          * specify the scale of stepper, defaults to m
         */
        "scale": Scale;
        /**
          * set the first step as active
         */
        "startStep": () => Promise<void>;
    }
    interface CalciteStepperItem {
        /**
          * is the step active
         */
        "active": boolean;
        /**
          * has the step been completed
         */
        "complete": boolean;
        /**
          * stepper item description
         */
        "description": string;
        /**
          * is the step disabled and not navigable to by a user
         */
        "disabled": boolean;
        /**
          * does the step contain an error that needs to be resolved by the user
         */
        "error": boolean;
        /**
          * stepper item heading
         */
        "heading"?: string;
        "icon": boolean;
        /**
          * pass a title for the stepper item
          * @deprecated use description instead
         */
        "itemSubtitle"?: string;
        /**
          * pass a title for the stepper item
          * @deprecated use heading instead
         */
        "itemTitle"?: string;
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        "numbered": boolean;
        "scale": Scale;
    }
    interface CalciteSwitch {
        /**
          * True if the switch is initially on
         */
        "checked": boolean;
        /**
          * True if the switch is disabled
         */
        "disabled": boolean;
        /**
          * Applies to the aria-label attribute on the switch
         */
        "label"?: string;
        /**
          * The name of the switch input
         */
        "name": string;
        /**
          * The scale of the switch
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * True if the switch is initially on
          * @deprecated use 'checked' instead.
         */
        "switched": boolean;
        /**
          * The value of the switch input
         */
        "value": any;
    }
    interface CalciteTab {
        /**
          * Show this tab
         */
        "active": boolean;
        /**
          * Return the index of this tab within the tab array
         */
        "getTabIndex": () => Promise<number>;
        "scale": Scale;
        /**
          * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
         */
        "tab": string;
        /**
          * @param tabIds
          * @param titleIds
         */
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabNav {
        "bordered": boolean;
        "indicatorOffset": number;
        "indicatorWidth": number;
        "layout": TabLayout;
        "position": TabPosition;
        "scale": Scale;
        /**
          * Name to use when saving selected tab data to localStorage
         */
        "storageId": string;
        /**
          * Pass the same string to multiple tab navs to keep them all in sync if one changes
         */
        "syncId": string;
    }
    interface CalciteTabTitle {
        /**
          * Show this tab title as selected
         */
        "active": boolean;
        "bordered": boolean;
        /**
          * Disable this tab title
         */
        "disabled": boolean;
        "getTabIdentifier": () => Promise<TabID>;
        /**
          * Return the index of this title within the nav
         */
        "getTabIndex": () => Promise<number>;
        /**
          * optionally pass an icon to display at the end of a tab title - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of a tab title - accepts calcite ui icon names
         */
        "iconStart"?: string;
        "layout": TabLayout;
        "position": TabPosition;
        "scale": Scale;
        /**
          * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
         */
        "tab"?: string;
        /**
          * @param tabIds
          * @param titleIds
         */
        "updateAriaInfo": (tabIds?: string[], titleIds?: string[]) => Promise<void>;
    }
    interface CalciteTabs {
        /**
          * Optionally enable tabs to appear like a folder-style menu when its layout is "inline"
         */
        "bordered": boolean;
        /**
          * Align tab titles to the edge or fully justify them across the tab nav ("center")
         */
        "layout": TabLayout;
        /**
          * Display the tabs top (default) or bottom of the tab content. above and below are deprecated.
         */
        "position": TabPosition;
        /**
          * Specify the scale of the tabs component, defaults to m
         */
        "scale": Scale;
    }
    interface CalciteTile {
        /**
          * The active state of the tile.
         */
        "active": boolean;
        /**
          * The description text that appears beneath the heading of the tile.
         */
        "description"?: string;
        /**
          * When true, prevents interaction.
         */
        "disabled": boolean;
        /**
          * The embed mode of the tile.  When true, renders without a border and padding for use by other components.
         */
        "embed": boolean;
        /**
          * The focused state of the tile.
         */
        "focused": boolean;
        /**
          * The heading text that appears between the icon and description of the tile.
         */
        "heading"?: string;
        /**
          * The hidden state of the tile.
         */
        "hidden": boolean;
        /**
          * The (optional) url for the tile. (Only applies when embed is set to false)
         */
        "href"?: string;
        /**
          * The icon that appears at the top of the tile.
         */
        "icon"?: string;
    }
    interface CalciteTileSelect {
        /**
          * The checked state of the tile select.
         */
        "checked": boolean;
        /**
          * The description text that appears beneath the heading of the tile.
         */
        "description"?: string;
        /**
          * The disabled state of the tile select.
         */
        "disabled": boolean;
        /**
          * The heading text that appears between the icon and description of the tile.
         */
        "heading"?: string;
        /**
          * The hidden state of the tile select.
         */
        "hidden": boolean;
        /**
          * The icon that appears at the top of the tile.
         */
        "icon"?: string;
        /**
          * The side of the tile that the radio or checkbox appears on when inputEnabled is true.
         */
        "inputAlignment": Extract<"end" | "start", Alignment>;
        /**
          * Display an interactive radio or checkbox.
         */
        "inputEnabled": boolean;
        /**
          * The name of the tile select.  This name will appear in form submissions as either a radio or checkbox identifier based on the `type` property.
         */
        "name": any;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * The selection mode of the tile select: radio (single) or checkbox (multiple).
         */
        "type": TileSelectType;
        /**
          * The value of the tile select.  This value will appear in form submissions when this tile select is checked.
         */
        "value"?: any;
        /**
          * specify the width of the tile, defaults to auto
         */
        "width": Extract<"auto" | "full", Width>;
    }
    interface CalciteTileSelectGroup {
        /**
          * The disabled state of the tile select.
         */
        "disabled": boolean;
        /**
          * Tiles by default move horizontally, stacking with each row, vertical allows single-column layouts
         */
        "layout"?: TileSelectGroupLayout;
    }
    interface CalciteTimePicker {
        /**
          * aria-label for the hour input
          * @default "Hour"
         */
        "intlHour": string;
        /**
          * aria-label for the hour down button
          * @default "Decrease hour"
         */
        "intlHourDown": string;
        /**
          * aria-label for the hour up button
          * @default "Increase hour"
         */
        "intlHourUp": string;
        /**
          * aria-label for the meridiem (am/pm) input
          * @default "AM/PM"
         */
        "intlMeridiem": string;
        /**
          * aria-label for the meridiem (am/pm) down button
          * @default "Decrease AM/PM"
         */
        "intlMeridiemDown": string;
        /**
          * aria-label for the meridiem (am/pm) up button
          * @default "Increase AM/PM"
         */
        "intlMeridiemUp": string;
        /**
          * aria-label for the minute input
          * @default "Minute"
         */
        "intlMinute": string;
        /**
          * aria-label for the minute down button
          * @default "Decrease minute"
         */
        "intlMinuteDown": string;
        /**
          * aria-label for the minute up button
          * @default "Increase minute"
         */
        "intlMinuteUp": string;
        /**
          * aria-label for the second input
          * @default "Second"
         */
        "intlSecond": string;
        /**
          * aria-label for the second down button
          * @default "Decrease second"
         */
        "intlSecondDown": string;
        /**
          * aria-label for the second up button
          * @default "Increase second"
         */
        "intlSecondUp": string;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale": string;
        /**
          * The scale (size) of the time picker
         */
        "scale": Scale;
        /**
          * Sets focus on the component.
          * @param target
         */
        "setFocus": (target: TimePart) => Promise<void>;
        /**
          * number (seconds) that specifies the granularity that the value must adhere to
         */
        "step": number;
        /**
          * The selected time in UTC (always 24-hour format)
         */
        "value": string;
    }
    interface CalciteTip {
        /**
          * No longer displays the tip.
         */
        "dismissed": boolean;
        /**
          * The heading of the tip.
         */
        "heading"?: string;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadingLevel;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * Indicates whether the tip can be dismissed.
         */
        "nonDismissible": boolean;
        /**
          * The selected state of the tip if it is being used inside a `calcite-tip-manager`.
         */
        "selected": boolean;
    }
    interface CalciteTipGroup {
        /**
          * The title used for all nested tips.
         */
        "groupTitle"?: string;
    }
    interface CalciteTipManager {
        /**
          * Closed state of the `calcite-tip-manager`.
         */
        "closed": boolean;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadingLevel;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * The default group title for the `calcite-tip-manager`.
         */
        "intlDefaultTitle"?: string;
        /**
          * Alternate text for navigating to the next tip.
         */
        "intlNext"?: string;
        /**
          * Label that appears on hover of pagination icon.
         */
        "intlPaginationLabel"?: string;
        /**
          * Alternate text for navigating to the previous tip.
         */
        "intlPrevious"?: string;
        /**
          * Selects the next tip to display
         */
        "nextTip": () => Promise<void>;
        /**
          * Selects the previous tip to display
         */
        "previousTip": () => Promise<void>;
    }
    interface CalciteTooltip {
        /**
          * Closes the component when the `referenceElement` is clicked.
         */
        "closeOnClick": boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Offset the position of the component away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offset the position of the component along the `referenceElement`.
         */
        "offsetSkidding": number;
        /**
          * When true, the component is open.
         */
        "open": boolean;
        /**
          * Describes the positioning type to use for the overlaid content. If the `referenceElement` is in a fixed container, use the "fixed" value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement": PopperPlacement;
        /**
          * The `referenceElement` to position the component according to its "placement" value. Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`. However, a string ID of the reference element can be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
    }
    interface CalciteTooltipManager {
        /**
          * CSS Selector to match reference elements for tooltips. Reference elements will be identified by this selector in order to open their associated tooltip.
          * @default `[data-calcite-tooltip-reference]`
         */
        "selector": string;
    }
    interface CalciteTree {
        "child": boolean;
        /**
          * Display input
          * @deprecated Use "ancestors" selection-mode for checkbox input.
         */
        "inputEnabled": boolean;
        /**
          * Displays indentation guide lines.
         */
        "lines": boolean;
        /**
          * Specifies the size of the component.
         */
        "scale": Scale;
        /**
          * Customize how the component's selection works.
          * @default "single"
          * @see [TreeSelectionMode](https://github.com/Esri/calcite-components/blob/master/src/components/tree/interfaces.ts#L5)
         */
        "selectionMode": TreeSelectionMode;
    }
    interface CalciteTreeItem {
        "depth": number;
        /**
          * When true, the component is expanded.
         */
        "expanded": boolean;
        "hasChildren": boolean;
        /**
          * In ancestor selection mode, show as indeterminate when only some children are selected.
         */
        "indeterminate": boolean;
        /**
          * Displays checkboxes (set on parent).
          * @deprecated Use "ancestors" selection-mode on parent for checkbox input.
         */
        "inputEnabled": boolean;
        "lines": boolean;
        "parentExpanded": boolean;
        "scale": Scale;
        /**
          * When true, the component is selected.
         */
        "selected": boolean;
        "selectionMode": TreeSelectionMode;
    }
    interface CalciteValueList {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        /**
          * When true, `calcite-value-list-item`s are sortable via a draggable button.
         */
        "dragEnabled": boolean;
        /**
          * When true, an input appears at the top of the component that can be used by end users to filter list items.
         */
        "filterEnabled": boolean;
        /**
          * Placeholder text for the filter's input field.
         */
        "filterPlaceholder": string;
        /**
          * Returns the currently selected items
         */
        "getSelectedItems": () => Promise<Map<string, HTMLCalciteValueListItemElement>>;
        /**
          * The component's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the component.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleActive"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the `calcite-value-list-item`'s new position.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleChange"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the `calcite-value-list-item`'s current position after commit.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleCommit"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the `calcite-value-list-item`'s initial position.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleIdle"?: string;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading": boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When true, a user can select multiple `calcite-value-list-item`s at a time. When false, only a single `calcite-value-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple": boolean;
        /**
          * When true and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.
         */
        "selectionFollowsFocus": boolean;
        /**
          * Sets focus on the component.
          * @param focusId
         */
        "setFocus": (focusId?: ListFocusId) => Promise<void>;
    }
    interface CalciteValueListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        "disableDeselect": boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled": boolean;
        "handleActivated"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * When true, prevents the content of the component from user interaction.
         */
        "nonInteractive": boolean;
        /**
          * When true, adds an action to remove the component.
         */
        "removable": boolean;
        /**
          * When true, the component is selected.
         */
        "selected": boolean;
        /**
          * Set focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * Toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
          * @param coerce
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The component's value.
         */
        "value": any;
    }
}
export interface CalciteAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAccordionElement;
}
export interface CalciteAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAccordionItemElement;
}
export interface CalciteActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionElement;
}
export interface CalciteActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionBarElement;
}
export interface CalciteActionMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionMenuElement;
}
export interface CalciteActionPadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteActionPadElement;
}
export interface CalciteAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteAlertElement;
}
export interface CalciteBlockCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteBlockElement;
}
export interface CalciteBlockSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteBlockSectionElement;
}
export interface CalciteCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCardElement;
}
export interface CalciteCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteCheckboxElement;
}
export interface CalciteChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteChipElement;
}
export interface CalciteColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteColorPickerElement;
}
export interface CalciteColorPickerHexInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteColorPickerHexInputElement;
}
export interface CalciteComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteComboboxElement;
}
export interface CalciteComboboxItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteComboboxItemElement;
}
export interface CalciteDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerElement;
}
export interface CalciteDatePickerDayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerDayElement;
}
export interface CalciteDatePickerMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerMonthElement;
}
export interface CalciteDatePickerMonthHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDatePickerMonthHeaderElement;
}
export interface CalciteDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownElement;
}
export interface CalciteDropdownGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownGroupElement;
}
export interface CalciteDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteDropdownItemElement;
}
export interface CalciteFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteFilterElement;
}
export interface CalciteHandleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteHandleElement;
}
export interface CalciteInlineEditableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInlineEditableElement;
}
export interface CalciteInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputElement;
}
export interface CalciteInputDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputDatePickerElement;
}
export interface CalciteInputNumberCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputNumberElement;
}
export interface CalciteInputTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteInputTimePickerElement;
}
export interface CalciteLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteLabelElement;
}
export interface CalciteModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteModalElement;
}
export interface CalciteNoticeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteNoticeElement;
}
export interface CalciteOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteOptionElement;
}
export interface CalciteOptionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteOptionGroupElement;
}
export interface CalcitePaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePaginationElement;
}
export interface CalcitePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePanelElement;
}
export interface CalcitePickListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePickListElement;
}
export interface CalcitePickListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePickListItemElement;
}
export interface CalcitePopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalcitePopoverElement;
}
export interface CalciteRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioButtonElement;
}
export interface CalciteRadioButtonGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioButtonGroupElement;
}
export interface CalciteRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioGroupElement;
}
export interface CalciteRadioGroupItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRadioGroupItemElement;
}
export interface CalciteRatingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteRatingElement;
}
export interface CalciteSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSelectElement;
}
export interface CalciteShellPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteShellPanelElement;
}
export interface CalciteSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSliderElement;
}
export interface CalciteSortableListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSortableListElement;
}
export interface CalciteSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSplitButtonElement;
}
export interface CalciteStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteStepperElement;
}
export interface CalciteStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteStepperItemElement;
}
export interface CalciteSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteSwitchElement;
}
export interface CalciteTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabElement;
}
export interface CalciteTabNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabNavElement;
}
export interface CalciteTabTitleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTabTitleElement;
}
export interface CalciteTileSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTileSelectElement;
}
export interface CalciteTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTimePickerElement;
}
export interface CalciteTipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTipElement;
}
export interface CalciteTipManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTipManagerElement;
}
export interface CalciteTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTreeElement;
}
export interface CalciteTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteTreeItemElement;
}
export interface CalciteValueListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteValueListElement;
}
export interface CalciteValueListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCalciteValueListItemElement;
}
declare global {
    interface HTMLCalciteAccordionElement extends Components.CalciteAccordion, HTMLStencilElement {
    }
    var HTMLCalciteAccordionElement: {
        prototype: HTMLCalciteAccordionElement;
        new (): HTMLCalciteAccordionElement;
    };
    interface HTMLCalciteAccordionItemElement extends Components.CalciteAccordionItem, HTMLStencilElement {
    }
    var HTMLCalciteAccordionItemElement: {
        prototype: HTMLCalciteAccordionItemElement;
        new (): HTMLCalciteAccordionItemElement;
    };
    interface HTMLCalciteActionElement extends Components.CalciteAction, HTMLStencilElement {
    }
    var HTMLCalciteActionElement: {
        prototype: HTMLCalciteActionElement;
        new (): HTMLCalciteActionElement;
    };
    interface HTMLCalciteActionBarElement extends Components.CalciteActionBar, HTMLStencilElement {
    }
    var HTMLCalciteActionBarElement: {
        prototype: HTMLCalciteActionBarElement;
        new (): HTMLCalciteActionBarElement;
    };
    interface HTMLCalciteActionGroupElement extends Components.CalciteActionGroup, HTMLStencilElement {
    }
    var HTMLCalciteActionGroupElement: {
        prototype: HTMLCalciteActionGroupElement;
        new (): HTMLCalciteActionGroupElement;
    };
    interface HTMLCalciteActionMenuElement extends Components.CalciteActionMenu, HTMLStencilElement {
    }
    var HTMLCalciteActionMenuElement: {
        prototype: HTMLCalciteActionMenuElement;
        new (): HTMLCalciteActionMenuElement;
    };
    interface HTMLCalciteActionPadElement extends Components.CalciteActionPad, HTMLStencilElement {
    }
    var HTMLCalciteActionPadElement: {
        prototype: HTMLCalciteActionPadElement;
        new (): HTMLCalciteActionPadElement;
    };
    interface HTMLCalciteAlertElement extends Components.CalciteAlert, HTMLStencilElement {
    }
    var HTMLCalciteAlertElement: {
        prototype: HTMLCalciteAlertElement;
        new (): HTMLCalciteAlertElement;
    };
    interface HTMLCalciteAvatarElement extends Components.CalciteAvatar, HTMLStencilElement {
    }
    var HTMLCalciteAvatarElement: {
        prototype: HTMLCalciteAvatarElement;
        new (): HTMLCalciteAvatarElement;
    };
    interface HTMLCalciteBlockElement extends Components.CalciteBlock, HTMLStencilElement {
    }
    var HTMLCalciteBlockElement: {
        prototype: HTMLCalciteBlockElement;
        new (): HTMLCalciteBlockElement;
    };
    interface HTMLCalciteBlockSectionElement extends Components.CalciteBlockSection, HTMLStencilElement {
    }
    var HTMLCalciteBlockSectionElement: {
        prototype: HTMLCalciteBlockSectionElement;
        new (): HTMLCalciteBlockSectionElement;
    };
    interface HTMLCalciteButtonElement extends Components.CalciteButton, HTMLStencilElement {
    }
    var HTMLCalciteButtonElement: {
        prototype: HTMLCalciteButtonElement;
        new (): HTMLCalciteButtonElement;
    };
    interface HTMLCalciteCardElement extends Components.CalciteCard, HTMLStencilElement {
    }
    var HTMLCalciteCardElement: {
        prototype: HTMLCalciteCardElement;
        new (): HTMLCalciteCardElement;
    };
    interface HTMLCalciteCheckboxElement extends Components.CalciteCheckbox, HTMLStencilElement {
    }
    var HTMLCalciteCheckboxElement: {
        prototype: HTMLCalciteCheckboxElement;
        new (): HTMLCalciteCheckboxElement;
    };
    interface HTMLCalciteChipElement extends Components.CalciteChip, HTMLStencilElement {
    }
    var HTMLCalciteChipElement: {
        prototype: HTMLCalciteChipElement;
        new (): HTMLCalciteChipElement;
    };
    interface HTMLCalciteColorPickerElement extends Components.CalciteColorPicker, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerElement: {
        prototype: HTMLCalciteColorPickerElement;
        new (): HTMLCalciteColorPickerElement;
    };
    interface HTMLCalciteColorPickerHexInputElement extends Components.CalciteColorPickerHexInput, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerHexInputElement: {
        prototype: HTMLCalciteColorPickerHexInputElement;
        new (): HTMLCalciteColorPickerHexInputElement;
    };
    interface HTMLCalciteColorPickerSwatchElement extends Components.CalciteColorPickerSwatch, HTMLStencilElement {
    }
    var HTMLCalciteColorPickerSwatchElement: {
        prototype: HTMLCalciteColorPickerSwatchElement;
        new (): HTMLCalciteColorPickerSwatchElement;
    };
    interface HTMLCalciteComboboxElement extends Components.CalciteCombobox, HTMLStencilElement {
    }
    var HTMLCalciteComboboxElement: {
        prototype: HTMLCalciteComboboxElement;
        new (): HTMLCalciteComboboxElement;
    };
    interface HTMLCalciteComboboxItemElement extends Components.CalciteComboboxItem, HTMLStencilElement {
    }
    var HTMLCalciteComboboxItemElement: {
        prototype: HTMLCalciteComboboxItemElement;
        new (): HTMLCalciteComboboxItemElement;
    };
    interface HTMLCalciteComboboxItemGroupElement extends Components.CalciteComboboxItemGroup, HTMLStencilElement {
    }
    var HTMLCalciteComboboxItemGroupElement: {
        prototype: HTMLCalciteComboboxItemGroupElement;
        new (): HTMLCalciteComboboxItemGroupElement;
    };
    interface HTMLCalciteDatePickerElement extends Components.CalciteDatePicker, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerElement: {
        prototype: HTMLCalciteDatePickerElement;
        new (): HTMLCalciteDatePickerElement;
    };
    interface HTMLCalciteDatePickerDayElement extends Components.CalciteDatePickerDay, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerDayElement: {
        prototype: HTMLCalciteDatePickerDayElement;
        new (): HTMLCalciteDatePickerDayElement;
    };
    interface HTMLCalciteDatePickerMonthElement extends Components.CalciteDatePickerMonth, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerMonthElement: {
        prototype: HTMLCalciteDatePickerMonthElement;
        new (): HTMLCalciteDatePickerMonthElement;
    };
    interface HTMLCalciteDatePickerMonthHeaderElement extends Components.CalciteDatePickerMonthHeader, HTMLStencilElement {
    }
    var HTMLCalciteDatePickerMonthHeaderElement: {
        prototype: HTMLCalciteDatePickerMonthHeaderElement;
        new (): HTMLCalciteDatePickerMonthHeaderElement;
    };
    interface HTMLCalciteDropdownElement extends Components.CalciteDropdown, HTMLStencilElement {
    }
    var HTMLCalciteDropdownElement: {
        prototype: HTMLCalciteDropdownElement;
        new (): HTMLCalciteDropdownElement;
    };
    interface HTMLCalciteDropdownGroupElement extends Components.CalciteDropdownGroup, HTMLStencilElement {
    }
    var HTMLCalciteDropdownGroupElement: {
        prototype: HTMLCalciteDropdownGroupElement;
        new (): HTMLCalciteDropdownGroupElement;
    };
    interface HTMLCalciteDropdownItemElement extends Components.CalciteDropdownItem, HTMLStencilElement {
    }
    var HTMLCalciteDropdownItemElement: {
        prototype: HTMLCalciteDropdownItemElement;
        new (): HTMLCalciteDropdownItemElement;
    };
    interface HTMLCalciteFabElement extends Components.CalciteFab, HTMLStencilElement {
    }
    var HTMLCalciteFabElement: {
        prototype: HTMLCalciteFabElement;
        new (): HTMLCalciteFabElement;
    };
    interface HTMLCalciteFilterElement extends Components.CalciteFilter, HTMLStencilElement {
    }
    var HTMLCalciteFilterElement: {
        prototype: HTMLCalciteFilterElement;
        new (): HTMLCalciteFilterElement;
    };
    interface HTMLCalciteFlowElement extends Components.CalciteFlow, HTMLStencilElement {
    }
    var HTMLCalciteFlowElement: {
        prototype: HTMLCalciteFlowElement;
        new (): HTMLCalciteFlowElement;
    };
    interface HTMLCalciteGraphElement extends Components.CalciteGraph, HTMLStencilElement {
    }
    var HTMLCalciteGraphElement: {
        prototype: HTMLCalciteGraphElement;
        new (): HTMLCalciteGraphElement;
    };
    interface HTMLCalciteHandleElement extends Components.CalciteHandle, HTMLStencilElement {
    }
    var HTMLCalciteHandleElement: {
        prototype: HTMLCalciteHandleElement;
        new (): HTMLCalciteHandleElement;
    };
    interface HTMLCalciteIconElement extends Components.CalciteIcon, HTMLStencilElement {
    }
    var HTMLCalciteIconElement: {
        prototype: HTMLCalciteIconElement;
        new (): HTMLCalciteIconElement;
    };
    interface HTMLCalciteInlineEditableElement extends Components.CalciteInlineEditable, HTMLStencilElement {
    }
    var HTMLCalciteInlineEditableElement: {
        prototype: HTMLCalciteInlineEditableElement;
        new (): HTMLCalciteInlineEditableElement;
    };
    interface HTMLCalciteInputElement extends Components.CalciteInput, HTMLStencilElement {
    }
    var HTMLCalciteInputElement: {
        prototype: HTMLCalciteInputElement;
        new (): HTMLCalciteInputElement;
    };
    interface HTMLCalciteInputDatePickerElement extends Components.CalciteInputDatePicker, HTMLStencilElement {
    }
    var HTMLCalciteInputDatePickerElement: {
        prototype: HTMLCalciteInputDatePickerElement;
        new (): HTMLCalciteInputDatePickerElement;
    };
    interface HTMLCalciteInputMessageElement extends Components.CalciteInputMessage, HTMLStencilElement {
    }
    var HTMLCalciteInputMessageElement: {
        prototype: HTMLCalciteInputMessageElement;
        new (): HTMLCalciteInputMessageElement;
    };
    interface HTMLCalciteInputNumberElement extends Components.CalciteInputNumber, HTMLStencilElement {
    }
    var HTMLCalciteInputNumberElement: {
        prototype: HTMLCalciteInputNumberElement;
        new (): HTMLCalciteInputNumberElement;
    };
    interface HTMLCalciteInputTimePickerElement extends Components.CalciteInputTimePicker, HTMLStencilElement {
    }
    var HTMLCalciteInputTimePickerElement: {
        prototype: HTMLCalciteInputTimePickerElement;
        new (): HTMLCalciteInputTimePickerElement;
    };
    interface HTMLCalciteLabelElement extends Components.CalciteLabel, HTMLStencilElement {
    }
    var HTMLCalciteLabelElement: {
        prototype: HTMLCalciteLabelElement;
        new (): HTMLCalciteLabelElement;
    };
    interface HTMLCalciteLinkElement extends Components.CalciteLink, HTMLStencilElement {
    }
    var HTMLCalciteLinkElement: {
        prototype: HTMLCalciteLinkElement;
        new (): HTMLCalciteLinkElement;
    };
    interface HTMLCalciteListElement extends Components.CalciteList, HTMLStencilElement {
    }
    var HTMLCalciteListElement: {
        prototype: HTMLCalciteListElement;
        new (): HTMLCalciteListElement;
    };
    interface HTMLCalciteListItemElement extends Components.CalciteListItem, HTMLStencilElement {
    }
    var HTMLCalciteListItemElement: {
        prototype: HTMLCalciteListItemElement;
        new (): HTMLCalciteListItemElement;
    };
    interface HTMLCalciteListItemGroupElement extends Components.CalciteListItemGroup, HTMLStencilElement {
    }
    var HTMLCalciteListItemGroupElement: {
        prototype: HTMLCalciteListItemGroupElement;
        new (): HTMLCalciteListItemGroupElement;
    };
    interface HTMLCalciteLoaderElement extends Components.CalciteLoader, HTMLStencilElement {
    }
    var HTMLCalciteLoaderElement: {
        prototype: HTMLCalciteLoaderElement;
        new (): HTMLCalciteLoaderElement;
    };
    interface HTMLCalciteModalElement extends Components.CalciteModal, HTMLStencilElement {
    }
    var HTMLCalciteModalElement: {
        prototype: HTMLCalciteModalElement;
        new (): HTMLCalciteModalElement;
    };
    interface HTMLCalciteNoticeElement extends Components.CalciteNotice, HTMLStencilElement {
    }
    var HTMLCalciteNoticeElement: {
        prototype: HTMLCalciteNoticeElement;
        new (): HTMLCalciteNoticeElement;
    };
    interface HTMLCalciteOptionElement extends Components.CalciteOption, HTMLStencilElement {
    }
    var HTMLCalciteOptionElement: {
        prototype: HTMLCalciteOptionElement;
        new (): HTMLCalciteOptionElement;
    };
    interface HTMLCalciteOptionGroupElement extends Components.CalciteOptionGroup, HTMLStencilElement {
    }
    var HTMLCalciteOptionGroupElement: {
        prototype: HTMLCalciteOptionGroupElement;
        new (): HTMLCalciteOptionGroupElement;
    };
    interface HTMLCalcitePaginationElement extends Components.CalcitePagination, HTMLStencilElement {
    }
    var HTMLCalcitePaginationElement: {
        prototype: HTMLCalcitePaginationElement;
        new (): HTMLCalcitePaginationElement;
    };
    interface HTMLCalcitePanelElement extends Components.CalcitePanel, HTMLStencilElement {
    }
    var HTMLCalcitePanelElement: {
        prototype: HTMLCalcitePanelElement;
        new (): HTMLCalcitePanelElement;
    };
    interface HTMLCalcitePickListElement extends Components.CalcitePickList, HTMLStencilElement {
    }
    var HTMLCalcitePickListElement: {
        prototype: HTMLCalcitePickListElement;
        new (): HTMLCalcitePickListElement;
    };
    interface HTMLCalcitePickListGroupElement extends Components.CalcitePickListGroup, HTMLStencilElement {
    }
    var HTMLCalcitePickListGroupElement: {
        prototype: HTMLCalcitePickListGroupElement;
        new (): HTMLCalcitePickListGroupElement;
    };
    interface HTMLCalcitePickListItemElement extends Components.CalcitePickListItem, HTMLStencilElement {
    }
    var HTMLCalcitePickListItemElement: {
        prototype: HTMLCalcitePickListItemElement;
        new (): HTMLCalcitePickListItemElement;
    };
    interface HTMLCalcitePopoverElement extends Components.CalcitePopover, HTMLStencilElement {
    }
    var HTMLCalcitePopoverElement: {
        prototype: HTMLCalcitePopoverElement;
        new (): HTMLCalcitePopoverElement;
    };
    interface HTMLCalcitePopoverManagerElement extends Components.CalcitePopoverManager, HTMLStencilElement {
    }
    var HTMLCalcitePopoverManagerElement: {
        prototype: HTMLCalcitePopoverManagerElement;
        new (): HTMLCalcitePopoverManagerElement;
    };
    interface HTMLCalciteProgressElement extends Components.CalciteProgress, HTMLStencilElement {
    }
    var HTMLCalciteProgressElement: {
        prototype: HTMLCalciteProgressElement;
        new (): HTMLCalciteProgressElement;
    };
    interface HTMLCalciteRadioButtonElement extends Components.CalciteRadioButton, HTMLStencilElement {
    }
    var HTMLCalciteRadioButtonElement: {
        prototype: HTMLCalciteRadioButtonElement;
        new (): HTMLCalciteRadioButtonElement;
    };
    interface HTMLCalciteRadioButtonGroupElement extends Components.CalciteRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLCalciteRadioButtonGroupElement: {
        prototype: HTMLCalciteRadioButtonGroupElement;
        new (): HTMLCalciteRadioButtonGroupElement;
    };
    interface HTMLCalciteRadioGroupElement extends Components.CalciteRadioGroup, HTMLStencilElement {
    }
    var HTMLCalciteRadioGroupElement: {
        prototype: HTMLCalciteRadioGroupElement;
        new (): HTMLCalciteRadioGroupElement;
    };
    interface HTMLCalciteRadioGroupItemElement extends Components.CalciteRadioGroupItem, HTMLStencilElement {
    }
    var HTMLCalciteRadioGroupItemElement: {
        prototype: HTMLCalciteRadioGroupItemElement;
        new (): HTMLCalciteRadioGroupItemElement;
    };
    interface HTMLCalciteRatingElement extends Components.CalciteRating, HTMLStencilElement {
    }
    var HTMLCalciteRatingElement: {
        prototype: HTMLCalciteRatingElement;
        new (): HTMLCalciteRatingElement;
    };
    interface HTMLCalciteScrimElement extends Components.CalciteScrim, HTMLStencilElement {
    }
    var HTMLCalciteScrimElement: {
        prototype: HTMLCalciteScrimElement;
        new (): HTMLCalciteScrimElement;
    };
    interface HTMLCalciteSelectElement extends Components.CalciteSelect, HTMLStencilElement {
    }
    var HTMLCalciteSelectElement: {
        prototype: HTMLCalciteSelectElement;
        new (): HTMLCalciteSelectElement;
    };
    interface HTMLCalciteShellElement extends Components.CalciteShell, HTMLStencilElement {
    }
    var HTMLCalciteShellElement: {
        prototype: HTMLCalciteShellElement;
        new (): HTMLCalciteShellElement;
    };
    interface HTMLCalciteShellCenterRowElement extends Components.CalciteShellCenterRow, HTMLStencilElement {
    }
    var HTMLCalciteShellCenterRowElement: {
        prototype: HTMLCalciteShellCenterRowElement;
        new (): HTMLCalciteShellCenterRowElement;
    };
    interface HTMLCalciteShellPanelElement extends Components.CalciteShellPanel, HTMLStencilElement {
    }
    var HTMLCalciteShellPanelElement: {
        prototype: HTMLCalciteShellPanelElement;
        new (): HTMLCalciteShellPanelElement;
    };
    interface HTMLCalciteSliderElement extends Components.CalciteSlider, HTMLStencilElement {
    }
    var HTMLCalciteSliderElement: {
        prototype: HTMLCalciteSliderElement;
        new (): HTMLCalciteSliderElement;
    };
    interface HTMLCalciteSortableListElement extends Components.CalciteSortableList, HTMLStencilElement {
    }
    var HTMLCalciteSortableListElement: {
        prototype: HTMLCalciteSortableListElement;
        new (): HTMLCalciteSortableListElement;
    };
    interface HTMLCalciteSplitButtonElement extends Components.CalciteSplitButton, HTMLStencilElement {
    }
    var HTMLCalciteSplitButtonElement: {
        prototype: HTMLCalciteSplitButtonElement;
        new (): HTMLCalciteSplitButtonElement;
    };
    interface HTMLCalciteStepperElement extends Components.CalciteStepper, HTMLStencilElement {
    }
    var HTMLCalciteStepperElement: {
        prototype: HTMLCalciteStepperElement;
        new (): HTMLCalciteStepperElement;
    };
    interface HTMLCalciteStepperItemElement extends Components.CalciteStepperItem, HTMLStencilElement {
    }
    var HTMLCalciteStepperItemElement: {
        prototype: HTMLCalciteStepperItemElement;
        new (): HTMLCalciteStepperItemElement;
    };
    interface HTMLCalciteSwitchElement extends Components.CalciteSwitch, HTMLStencilElement {
    }
    var HTMLCalciteSwitchElement: {
        prototype: HTMLCalciteSwitchElement;
        new (): HTMLCalciteSwitchElement;
    };
    interface HTMLCalciteTabElement extends Components.CalciteTab, HTMLStencilElement {
    }
    var HTMLCalciteTabElement: {
        prototype: HTMLCalciteTabElement;
        new (): HTMLCalciteTabElement;
    };
    interface HTMLCalciteTabNavElement extends Components.CalciteTabNav, HTMLStencilElement {
    }
    var HTMLCalciteTabNavElement: {
        prototype: HTMLCalciteTabNavElement;
        new (): HTMLCalciteTabNavElement;
    };
    interface HTMLCalciteTabTitleElement extends Components.CalciteTabTitle, HTMLStencilElement {
    }
    var HTMLCalciteTabTitleElement: {
        prototype: HTMLCalciteTabTitleElement;
        new (): HTMLCalciteTabTitleElement;
    };
    interface HTMLCalciteTabsElement extends Components.CalciteTabs, HTMLStencilElement {
    }
    var HTMLCalciteTabsElement: {
        prototype: HTMLCalciteTabsElement;
        new (): HTMLCalciteTabsElement;
    };
    interface HTMLCalciteTileElement extends Components.CalciteTile, HTMLStencilElement {
    }
    var HTMLCalciteTileElement: {
        prototype: HTMLCalciteTileElement;
        new (): HTMLCalciteTileElement;
    };
    interface HTMLCalciteTileSelectElement extends Components.CalciteTileSelect, HTMLStencilElement {
    }
    var HTMLCalciteTileSelectElement: {
        prototype: HTMLCalciteTileSelectElement;
        new (): HTMLCalciteTileSelectElement;
    };
    interface HTMLCalciteTileSelectGroupElement extends Components.CalciteTileSelectGroup, HTMLStencilElement {
    }
    var HTMLCalciteTileSelectGroupElement: {
        prototype: HTMLCalciteTileSelectGroupElement;
        new (): HTMLCalciteTileSelectGroupElement;
    };
    interface HTMLCalciteTimePickerElement extends Components.CalciteTimePicker, HTMLStencilElement {
    }
    var HTMLCalciteTimePickerElement: {
        prototype: HTMLCalciteTimePickerElement;
        new (): HTMLCalciteTimePickerElement;
    };
    interface HTMLCalciteTipElement extends Components.CalciteTip, HTMLStencilElement {
    }
    var HTMLCalciteTipElement: {
        prototype: HTMLCalciteTipElement;
        new (): HTMLCalciteTipElement;
    };
    interface HTMLCalciteTipGroupElement extends Components.CalciteTipGroup, HTMLStencilElement {
    }
    var HTMLCalciteTipGroupElement: {
        prototype: HTMLCalciteTipGroupElement;
        new (): HTMLCalciteTipGroupElement;
    };
    interface HTMLCalciteTipManagerElement extends Components.CalciteTipManager, HTMLStencilElement {
    }
    var HTMLCalciteTipManagerElement: {
        prototype: HTMLCalciteTipManagerElement;
        new (): HTMLCalciteTipManagerElement;
    };
    interface HTMLCalciteTooltipElement extends Components.CalciteTooltip, HTMLStencilElement {
    }
    var HTMLCalciteTooltipElement: {
        prototype: HTMLCalciteTooltipElement;
        new (): HTMLCalciteTooltipElement;
    };
    interface HTMLCalciteTooltipManagerElement extends Components.CalciteTooltipManager, HTMLStencilElement {
    }
    var HTMLCalciteTooltipManagerElement: {
        prototype: HTMLCalciteTooltipManagerElement;
        new (): HTMLCalciteTooltipManagerElement;
    };
    interface HTMLCalciteTreeElement extends Components.CalciteTree, HTMLStencilElement {
    }
    var HTMLCalciteTreeElement: {
        prototype: HTMLCalciteTreeElement;
        new (): HTMLCalciteTreeElement;
    };
    interface HTMLCalciteTreeItemElement extends Components.CalciteTreeItem, HTMLStencilElement {
    }
    var HTMLCalciteTreeItemElement: {
        prototype: HTMLCalciteTreeItemElement;
        new (): HTMLCalciteTreeItemElement;
    };
    interface HTMLCalciteValueListElement extends Components.CalciteValueList, HTMLStencilElement {
    }
    var HTMLCalciteValueListElement: {
        prototype: HTMLCalciteValueListElement;
        new (): HTMLCalciteValueListElement;
    };
    interface HTMLCalciteValueListItemElement extends Components.CalciteValueListItem, HTMLStencilElement {
    }
    var HTMLCalciteValueListItemElement: {
        prototype: HTMLCalciteValueListItemElement;
        new (): HTMLCalciteValueListItemElement;
    };
    interface HTMLElementTagNameMap {
        "calcite-accordion": HTMLCalciteAccordionElement;
        "calcite-accordion-item": HTMLCalciteAccordionItemElement;
        "calcite-action": HTMLCalciteActionElement;
        "calcite-action-bar": HTMLCalciteActionBarElement;
        "calcite-action-group": HTMLCalciteActionGroupElement;
        "calcite-action-menu": HTMLCalciteActionMenuElement;
        "calcite-action-pad": HTMLCalciteActionPadElement;
        "calcite-alert": HTMLCalciteAlertElement;
        "calcite-avatar": HTMLCalciteAvatarElement;
        "calcite-block": HTMLCalciteBlockElement;
        "calcite-block-section": HTMLCalciteBlockSectionElement;
        "calcite-button": HTMLCalciteButtonElement;
        "calcite-card": HTMLCalciteCardElement;
        "calcite-checkbox": HTMLCalciteCheckboxElement;
        "calcite-chip": HTMLCalciteChipElement;
        "calcite-color-picker": HTMLCalciteColorPickerElement;
        "calcite-color-picker-hex-input": HTMLCalciteColorPickerHexInputElement;
        "calcite-color-picker-swatch": HTMLCalciteColorPickerSwatchElement;
        "calcite-combobox": HTMLCalciteComboboxElement;
        "calcite-combobox-item": HTMLCalciteComboboxItemElement;
        "calcite-combobox-item-group": HTMLCalciteComboboxItemGroupElement;
        "calcite-date-picker": HTMLCalciteDatePickerElement;
        "calcite-date-picker-day": HTMLCalciteDatePickerDayElement;
        "calcite-date-picker-month": HTMLCalciteDatePickerMonthElement;
        "calcite-date-picker-month-header": HTMLCalciteDatePickerMonthHeaderElement;
        "calcite-dropdown": HTMLCalciteDropdownElement;
        "calcite-dropdown-group": HTMLCalciteDropdownGroupElement;
        "calcite-dropdown-item": HTMLCalciteDropdownItemElement;
        "calcite-fab": HTMLCalciteFabElement;
        "calcite-filter": HTMLCalciteFilterElement;
        "calcite-flow": HTMLCalciteFlowElement;
        "calcite-graph": HTMLCalciteGraphElement;
        "calcite-handle": HTMLCalciteHandleElement;
        "calcite-icon": HTMLCalciteIconElement;
        "calcite-inline-editable": HTMLCalciteInlineEditableElement;
        "calcite-input": HTMLCalciteInputElement;
        "calcite-input-date-picker": HTMLCalciteInputDatePickerElement;
        "calcite-input-message": HTMLCalciteInputMessageElement;
        "calcite-input-number": HTMLCalciteInputNumberElement;
        "calcite-input-time-picker": HTMLCalciteInputTimePickerElement;
        "calcite-label": HTMLCalciteLabelElement;
        "calcite-link": HTMLCalciteLinkElement;
        "calcite-list": HTMLCalciteListElement;
        "calcite-list-item": HTMLCalciteListItemElement;
        "calcite-list-item-group": HTMLCalciteListItemGroupElement;
        "calcite-loader": HTMLCalciteLoaderElement;
        "calcite-modal": HTMLCalciteModalElement;
        "calcite-notice": HTMLCalciteNoticeElement;
        "calcite-option": HTMLCalciteOptionElement;
        "calcite-option-group": HTMLCalciteOptionGroupElement;
        "calcite-pagination": HTMLCalcitePaginationElement;
        "calcite-panel": HTMLCalcitePanelElement;
        "calcite-pick-list": HTMLCalcitePickListElement;
        "calcite-pick-list-group": HTMLCalcitePickListGroupElement;
        "calcite-pick-list-item": HTMLCalcitePickListItemElement;
        "calcite-popover": HTMLCalcitePopoverElement;
        "calcite-popover-manager": HTMLCalcitePopoverManagerElement;
        "calcite-progress": HTMLCalciteProgressElement;
        "calcite-radio-button": HTMLCalciteRadioButtonElement;
        "calcite-radio-button-group": HTMLCalciteRadioButtonGroupElement;
        "calcite-radio-group": HTMLCalciteRadioGroupElement;
        "calcite-radio-group-item": HTMLCalciteRadioGroupItemElement;
        "calcite-rating": HTMLCalciteRatingElement;
        "calcite-scrim": HTMLCalciteScrimElement;
        "calcite-select": HTMLCalciteSelectElement;
        "calcite-shell": HTMLCalciteShellElement;
        "calcite-shell-center-row": HTMLCalciteShellCenterRowElement;
        "calcite-shell-panel": HTMLCalciteShellPanelElement;
        "calcite-slider": HTMLCalciteSliderElement;
        "calcite-sortable-list": HTMLCalciteSortableListElement;
        "calcite-split-button": HTMLCalciteSplitButtonElement;
        "calcite-stepper": HTMLCalciteStepperElement;
        "calcite-stepper-item": HTMLCalciteStepperItemElement;
        "calcite-switch": HTMLCalciteSwitchElement;
        "calcite-tab": HTMLCalciteTabElement;
        "calcite-tab-nav": HTMLCalciteTabNavElement;
        "calcite-tab-title": HTMLCalciteTabTitleElement;
        "calcite-tabs": HTMLCalciteTabsElement;
        "calcite-tile": HTMLCalciteTileElement;
        "calcite-tile-select": HTMLCalciteTileSelectElement;
        "calcite-tile-select-group": HTMLCalciteTileSelectGroupElement;
        "calcite-time-picker": HTMLCalciteTimePickerElement;
        "calcite-tip": HTMLCalciteTipElement;
        "calcite-tip-group": HTMLCalciteTipGroupElement;
        "calcite-tip-manager": HTMLCalciteTipManagerElement;
        "calcite-tooltip": HTMLCalciteTooltipElement;
        "calcite-tooltip-manager": HTMLCalciteTooltipManagerElement;
        "calcite-tree": HTMLCalciteTreeElement;
        "calcite-tree-item": HTMLCalciteTreeItemElement;
        "calcite-value-list": HTMLCalciteValueListElement;
        "calcite-value-list-item": HTMLCalciteValueListItemElement;
    }
}
declare namespace LocalJSX {
    interface CalciteAccordion {
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: AccordionAppearance;
        /**
          * Specifies the placement of the icon in the header.
         */
        "iconPosition"?: Position;
        /**
          * Specifies the type of the icon in the header.
         */
        "iconType"?: "chevron" | "caret" | "plus-minus";
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the selection mode - "multi" (allow any number of open items), "single" (allow one open item), or "single-persist" (allow and require one open item).
         */
        "selectionMode"?: "multi" | "single" | "single-persist";
    }
    interface CalciteAccordionItem {
        /**
          * When true, the component is active.
          * @deprecated use expanded instead
         */
        "active"?: boolean;
        /**
          * Specifies a description for the component.
         */
        "description"?: string;
        /**
          * When true, item is expanded
         */
        "expanded"?: boolean;
        /**
          * Specifies heading text for the component.
         */
        "heading"?: string;
        /**
          * Specifies an icon to display - accepts Calcite UI icon names.
         */
        "icon"?: string;
        /**
          * Specifies a subtitle for the component.
          * @deprecated Use `description` instead.
         */
        "itemSubtitle"?: string;
        /**
          * Specifies a title for the component.
          * @deprecated Use `heading` instead.
         */
        "itemTitle"?: string;
    }
    interface CalciteAction {
        /**
          * When true, the component is highlighted.
         */
        "active"?: boolean;
        /**
          * Specifies the horizontal alignment of button elements with text content.
         */
        "alignment"?: Alignment;
        /**
          * Specifies the appearance of the component.
         */
        "appearance"?: Extract<"solid" | "clear", Appearance>;
        /**
          * When true, the side padding of the component is reduced. Compact mode is used internally by components, e.g. `calcite-block-section`.
         */
        "compact"?: boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies an icon to display - accepts Calcite UI icon names.
         */
        "icon"?: string;
        /**
          * When true, indicates unread changes.
         */
        "indicator"?: boolean;
        /**
          * Specifies the text label to display while loading.
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Emits when the component has been clicked.
          * @deprecated use onClick instead.
         */
        "onCalciteActionClick"?: (event: CalciteActionCustomEvent<any>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies text that accompanies the icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
    }
    interface CalciteActionBar {
        /**
          * When true, the expand-toggling behavior is disabled.
         */
        "expandDisabled"?: boolean;
        /**
          * When true, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Specifies the label of the expand icon when the component is collapsed.
         */
        "intlExpand"?: string;
        /**
          * Emits when the `expanded` property is toggled.
         */
        "onCalciteActionBarToggle"?: (event: CalciteActionBarCustomEvent<any>) => void;
        /**
          * Disables automatically overflowing `calcite-action`s that won't fit into menus.
         */
        "overflowActionsDisabled"?: boolean;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position"?: Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionGroup {
        /**
          * Indicates number of columns.
         */
        "columns"?: Columns;
        /**
          * When true, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies a text string for the `calcite-action-menu`.
         */
        "intlMore"?: string;
        /**
          * Indicates the layout of the component.
         */
        "layout"?: Layout;
        /**
          * When true, the `calcite-action-menu` is open.
         */
        "menuOpen"?: boolean;
        /**
          * Specifies the size of the `calcite-action-menu`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionMenu {
        /**
          * When true, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * Specifies the text string for the component.
         */
        "label": string;
        /**
          * Emits when the `open` property has changed.
         */
        "onCalciteActionMenuOpenChange"?: (event: CalciteActionMenuCustomEvent<any>) => void;
        /**
          * When true, the component is open.
         */
        "open"?: boolean;
        /**
          * Determines the type of positioning to use for the overlaid content. If your element is in a fixed container, use the "fixed" value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement"?: PopperPlacement;
        /**
          * Specifies the size of the component's trigger `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteActionPad {
        /**
          * When true, the expand-toggling behavior is disabled.
         */
        "expandDisabled"?: boolean;
        /**
          * When true, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * Specifies the label of the collapse icon when the component is expanded.
         */
        "intlCollapse"?: string;
        /**
          * Specifies the label of the expand icon when the component is collapsed.
         */
        "intlExpand"?: string;
        /**
          * Indicates the layout of the component.
         */
        "layout"?: Layout;
        /**
          * Emits when the `expanded` property is toggled.
         */
        "onCalciteActionPadToggle"?: (event: CalciteActionPadCustomEvent<any>) => void;
        /**
          * Arranges the component depending on the element's `dir` property.
         */
        "position"?: Position;
        /**
          * Specifies the size of the expand `calcite-action`.
         */
        "scale"?: Scale;
    }
    interface CalciteAlert {
        /**
          * When true, the component is active.
         */
        "active"?: boolean;
        /**
          * When true, the component closes automatically (recommended for passive, non-blocking alerts).
         */
        "autoDismiss"?: boolean;
        /**
          * Specifies the duration before the component automatically closes (only use with `autoDismiss`).
         */
        "autoDismissDuration"?: AlertDuration;
        /**
          * Specifies the color for the component (will apply to top border and icon).
         */
        "color"?: StatusColor;
        /**
          * When true, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: string | boolean;
        /**
          * Specifies the text label for the close button.
          * @default "Close"
         */
        "intlClose"?: string;
        /**
          * Specifies an accessible name for the component.
         */
        "label": string;
        "onCalciteAlertBeforeClose"?: (event: CalciteAlertCustomEvent<{
    el: HTMLCalciteAlertElement;
    queue: HTMLCalciteAlertElement[];
  }>) => void;
        "onCalciteAlertBeforeOpen"?: (event: CalciteAlertCustomEvent<{
    el: HTMLCalciteAlertElement;
    queue: HTMLCalciteAlertElement[];
  }>) => void;
        "onCalciteAlertClose"?: (event: CalciteAlertCustomEvent<{
    el: HTMLCalciteAlertElement;
    queue: HTMLCalciteAlertElement[];
  }>) => void;
        "onCalciteAlertOpen"?: (event: CalciteAlertCustomEvent<{
    el: HTMLCalciteAlertElement;
    queue: HTMLCalciteAlertElement[];
  }>) => void;
        /**
          * Specifies the placement of the component
         */
        "placement"?: AlertPlacement;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
    }
    interface CalciteAvatar {
        /**
          * Specifies the full name of the user.
         */
        "fullName"?: string;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the `src` to an image (remember to add a token if the user is private).
         */
        "thumbnail"?: string;
        /**
          * Specifies the unique id of the user.
         */
        "userId"?: string;
        /**
          * Specifies the username of the user.
         */
        "username"?: string;
    }
    interface CalciteBlock {
        /**
          * When true, this block will be collapsible.
         */
        "collapsible"?: boolean;
        /**
          * Block description
         */
        "description"?: string;
        /**
          * When true, removes padding for the slotted content
         */
        "disablePadding"?: boolean;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * When true, displays a drag handle in the header.
         */
        "dragHandle"?: boolean;
        /**
          * Block heading.
         */
        "heading": string;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Aria-label for collapsing the toggle and tooltip used for the toggle when expanded.
          * @default "Collapse"
         */
        "intlCollapse"?: string;
        /**
          * Aria-label for expanding the toggle and tooltip used for the toggle when collapsed.
          * @default "Expand"
         */
        "intlExpand"?: string;
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Text string used for the actions menu
          * @default "Options"
         */
        "intlOptions"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emitted when the header has been clicked.
         */
        "onCalciteBlockToggle"?: (event: CalciteBlockCustomEvent<any>) => void;
        /**
          * When true, the block's content will be displayed.
         */
        "open"?: boolean;
        /**
          * Block status. Updates or adds icon to show related icon and color.
         */
        "status"?: Status;
        /**
          * Block summary.
          * @deprecated use description instead
         */
        "summary"?: string;
    }
    interface CalciteBlockSection {
        /**
          * Tooltip used for the toggle when expanded.
         */
        "intlCollapse"?: string;
        /**
          * Tooltip used for the toggle when collapsed.
         */
        "intlExpand"?: string;
        /**
          * Emitted when the header has been clicked.
         */
        "onCalciteBlockSectionToggle"?: (event: CalciteBlockSectionCustomEvent<any>) => void;
        /**
          * When true, the block's section content will be displayed.
         */
        "open"?: boolean;
        /**
          * BlockSection status. Adds indicator to show valid or invalid status.
         */
        "status"?: Status;
        /**
          * Text displayed in the button.
         */
        "text"?: string;
        /**
          * This property determines the look of the section toggle. If the value is "switch", a toggle-switch will be displayed. If the value is "button", a clickable header is displayed.
         */
        "toggleDisplay"?: BlockSectionToggleDisplay;
    }
    interface CalciteButton {
        /**
          * optionally specify alignment of button elements.
         */
        "alignment"?: ButtonAlignment;
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance"?: ButtonAppearance;
        /**
          * specify the color of the button, defaults to blue
         */
        "color"?: ButtonColor;
        /**
          * is the button disabled
         */
        "disabled"?: boolean;
        /**
          * The form ID to associate with the component
          * @deprecated – this property is no longer needed if placed inside a form.
         */
        "form"?: string;
        /**
          * optionally pass a href - used to determine if the component should render as a button or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of a button - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of a button - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Applies to the aria-label attribute on the button or hyperlink
         */
        "label"?: string;
        /**
          * optionally add a calcite-loader component to the button, disabling interaction.
         */
        "loading"?: boolean;
        /**
          * The name attribute to apply to the button
         */
        "name"?: string;
        /**
          * The rel attribute to apply to the hyperlink
         */
        "rel"?: string;
        /**
          * optionally add a round style to the button
         */
        "round"?: boolean;
        /**
          * specify the scale of the button, defaults to m
         */
        "scale"?: Scale;
        /**
          * is the button a child of a calcite-split-button
         */
        "splitChild"?: "primary" | "secondary" | false;
        /**
          * The target attribute to apply to the hyperlink
         */
        "target"?: string;
        /**
          * The type attribute to apply to the button
         */
        "type"?: string;
        /**
          * specify the width of the button, defaults to auto
         */
        "width"?: Width;
    }
    interface CalciteCard {
        /**
          * string to override English deselect text for checkbox when selectable is true
          * @default "Deselect"
         */
        "intlDeselect"?: string;
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * string to override English select text for checkbox when selectable is true
          * @default "Select"
         */
        "intlSelect"?: string;
        /**
          * When true, the cards content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Fired when a selectable card is selected
         */
        "onCalciteCardSelect"?: (event: CalciteCardCustomEvent<any>) => void;
        /**
          * Indicates whether the card is selectable.
         */
        "selectable"?: boolean;
        /**
          * Indicates whether the card is selected.
         */
        "selected"?: boolean;
        "thumbnailPosition"?: LogicalFlowPosition;
    }
    interface CalciteCheckbox {
        /**
          * The checked state of the checkbox.
         */
        "checked"?: boolean;
        /**
          * True if the checkbox is disabled
         */
        "disabled"?: boolean;
        /**
          * The id attribute of the checkbox.  When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * True if the checkbox is initially indeterminate, which is independent from its checked state https://css-tricks.com/indeterminate-checkboxes/
         */
        "indeterminate"?: boolean;
        /**
          * The name of the checkbox input
         */
        "name"?: any;
        /**
          * Emitted when the checkbox checked status changes
         */
        "onCalciteCheckboxChange"?: (event: CalciteCheckboxCustomEvent<any>) => void;
        /**
          * specify the scale of the checkbox, defaults to m
         */
        "scale"?: Scale;
        /**
          * The value of the checkbox input
         */
        "value"?: any;
    }
    interface CalciteChip {
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance"?: Extract<"solid" | "clear", Appearance>;
        /**
          * When true, show abutton user can click to dismiss the chip.
         */
        "closable"?: boolean;
        /**
          * When true, hides the chip
         */
        "closed"?: boolean;
        /**
          * specify the color of the button, defaults to blue
         */
        "color"?: ChipColor;
        /**
          * Aria label for the "x" button
          * @default "Close"
         */
        "dismissLabel"?: string;
        /**
          * Optionally show a button the user can click to dismiss the chip
          * @deprecated use closable instead
         */
        "dismissible"?: boolean;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * flip the icon in rtl
         */
        "iconFlipRtl"?: boolean;
        /**
          * Emitted when the dismiss button is clicked
         */
        "onCalciteChipDismiss"?: (event: CalciteChipCustomEvent<any>) => void;
        /**
          * specify the scale of the chip, defaults to m
         */
        "scale"?: Scale;
        /**
          * The assigned value for the chip
         */
        "value": any;
    }
    interface CalciteColorPicker {
        /**
          * When false, empty color (null) will be allowed as a value. Otherwise, a color value is always enforced by the component.  When true, clearing the input and blurring will restore the last valid color set. When false, it will set it to empty.
         */
        "allowEmpty"?: boolean;
        /**
          * specify the appearance - default (containing border), or minimal (no containing border)
         */
        "appearance"?: ColorAppearance;
        /**
          * When true, disabled prevents user interaction.
         */
        "disabled"?: boolean;
        /**
          * The format of the value property.  When "auto", the format will be inferred from `value` when set.
          * @default "auto"
         */
        "format"?: Format;
        /**
          * When true, hides the RGB/HSV channel inputs
         */
        "hideChannels"?: boolean;
        /**
          * When true, hides the hex input
         */
        "hideHex"?: boolean;
        /**
          * When true, hides the saved colors section
         */
        "hideSaved"?: boolean;
        /**
          * Label used for the blue channel
          * @default "B"
         */
        "intlB"?: string;
        /**
          * Label used for the blue channel description
          * @default "Blue"
         */
        "intlBlue"?: string;
        /**
          * Label used for the delete color button.
          * @default "Delete color"
         */
        "intlDeleteColor"?: string;
        /**
          * Label used for the green channel
          * @default "G"
         */
        "intlG"?: string;
        /**
          * Label used for the green channel description
          * @default "Green"
         */
        "intlGreen"?: string;
        /**
          * Label used for the hue channel
          * @default "H"
         */
        "intlH"?: string;
        /**
          * Label used for the hex input
          * @default "Hex"
         */
        "intlHex"?: string;
        /**
          * Label used for the HSV mode
          * @default "HSV"
         */
        "intlHsv"?: string;
        /**
          * Label used for the hue channel description
          * @default "Hue"
         */
        "intlHue"?: string;
        /**
          * Label used for the hex input when there is no color selected.
          * @default "No color"
         */
        "intlNoColor"?: string;
        /**
          * Label used for the red channel
          * @default "R"
         */
        "intlR"?: string;
        /**
          * Label used for the red channel description
          * @default "Red"
         */
        "intlRed"?: string;
        /**
          * Label used for the RGB mode
          * @default "RGB"
         */
        "intlRgb"?: string;
        /**
          * Label used for the saturation channel
          * @default "S"
         */
        "intlS"?: string;
        /**
          * Label used for the saturation channel description
          * @default "Saturation"
         */
        "intlSaturation"?: string;
        /**
          * Label used for the save color button.
          * @default "Save color"
         */
        "intlSaveColor"?: string;
        /**
          * Label used for the saved colors section
          * @default "Saved"
         */
        "intlSaved"?: string;
        /**
          * Label used for the value channel
          * @default "V"
         */
        "intlV"?: string;
        /**
          * Label used for the
          * @default "Value"
         */
        "intlValue"?: string;
        /**
          * standard UniCode numeral system tag for localization
         */
        "numberingSystem"?: string;
        /**
          * Fires when the color value has changed.
         */
        "onCalciteColorPickerChange"?: (event: CalciteColorPickerCustomEvent<any>) => void;
        /**
          * Fires as the color value changes.  This is similar to the change event with the exception of dragging. When dragging the color field or hue slider thumb, this event fires as the thumb is moved.
         */
        "onCalciteColorPickerInput"?: (event: CalciteColorPickerCustomEvent<any>) => void;
        /**
          * The scale of the color picker.
         */
        "scale"?: Scale;
        /**
          * Storage ID for colors.
         */
        "storageId"?: string;
        /**
          * The color value.  This value can be either a {@link https ://developer.mozilla.org/en-US/docs/Web/CSS/color|CSS string} a RGB, HSL or HSV object.  The type will be preserved as the color is updated.
          * @default "#007ac2"
          * @see [ColorValue](https://github.com/Esri/calcite-components/blob/master/src/components/color-picker/interfaces.ts#L10)
         */
        "value"?: ColorValue | null;
    }
    interface CalciteColorPickerHexInput {
        /**
          * When false, empty color (null) will be allowed as a value. Otherwise, a color value is always enforced by the component.  When true, clearing the input and blurring will restore the last valid color set. When false, it will set it to empty.
         */
        "allowEmpty"?: boolean;
        /**
          * Label used for the hex input.
          * @default "Hex"
         */
        "intlHex"?: string;
        /**
          * Label used for the hex input when there is no color selected.
          * @default "No color"
         */
        "intlNoColor"?: string;
        /**
          * standard UniCode numeral system tag for localization
         */
        "numberingSystem"?: string;
        /**
          * Emitted when the hex value changes.
         */
        "onCalciteColorPickerHexInputChange"?: (event: CalciteColorPickerHexInputCustomEvent<any>) => void;
        /**
          * The component's scale.
         */
        "scale"?: Scale;
        /**
          * The hex value.
         */
        "value"?: string;
    }
    interface CalciteColorPickerSwatch {
        /**
          * Used to display whether the swatch is active or not.
         */
        "active"?: boolean;
        /**
          * The color value.
          * @see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value
         */
        "color"?: string;
        /**
          * The component scale.
         */
        "scale"?: Scale;
    }
    interface CalciteCombobox {
        /**
          * When true, opens the combobox
          * @deprecated use open instead
         */
        "active"?: boolean;
        /**
          * Allow entry of custom values which are not in the original set of items
         */
        "allowCustomValues"?: boolean;
        /**
          * Disable combobox input
         */
        "disabled"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * string to override the English "Remove tag" text for when an item is selected.
          * @default "Remove tag"
         */
        "intlRemoveTag"?: string;
        /**
          * Aria label for combobox (required)
         */
        "label": string;
        /**
          * Specify the maximum number of combobox items (including nested children) to display before showing the scroller
         */
        "maxItems"?: number;
        /**
          * The name of the switch input
         */
        "name"?: string;
        "onCalciteComboboxBeforeClose"?: (event: CalciteComboboxCustomEvent<{ el: HTMLCalciteComboboxElement }>) => void;
        "onCalciteComboboxBeforeOpen"?: (event: CalciteComboboxCustomEvent<{ el: HTMLCalciteComboboxElement }>) => void;
        /**
          * Called when the selected item(s) changes.
         */
        "onCalciteComboboxChange"?: (event: CalciteComboboxCustomEvent<{ selectedItems: HTMLCalciteComboboxItemElement[] }>) => void;
        /**
          * Called when a selected item in the combobox is dismissed via its chip
         */
        "onCalciteComboboxChipDismiss"?: (event: CalciteComboboxCustomEvent<any>) => void;
        "onCalciteComboboxClose"?: (event: CalciteComboboxCustomEvent<{ el: HTMLCalciteComboboxElement }>) => void;
        /**
          * Called when the user has entered text to filter the options list
         */
        "onCalciteComboboxFilterChange"?: (event: CalciteComboboxCustomEvent<{
    visibleItems: HTMLCalciteComboboxItemElement[];
    text: string;
  }>) => void;
        "onCalciteComboboxOpen"?: (event: CalciteComboboxCustomEvent<{ el: HTMLCalciteComboboxElement }>) => void;
        /**
          * Called when the selected items set changes
          * @deprecated use calciteComboboxChange instead
         */
        "onCalciteLookupChange"?: (event: CalciteComboboxCustomEvent<HTMLCalciteComboboxItemElement[]>) => void;
        /**
          * When true, opens the combobox
         */
        "open"?: boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Placeholder text for input
         */
        "placeholder"?: string;
        /**
          * Placeholder icon for input
         */
        "placeholderIcon"?: string;
        /**
          * Specify the scale of the combobox, defaults to m
         */
        "scale"?: Scale;
        /**
          * specify the selection mode - multi: allow any number of selected items (default) - single: only one selection) - ancestors: like multi, but show ancestors of selected items as selected, only deepest children shown in chips
         */
        "selectionMode"?: ComboboxSelectionMode;
        /**
          * The value(s) of the selectedItem(s)
         */
        "value"?: string | string[];
    }
    interface CalciteComboboxItem {
        /**
          * True when item is highlighted either from keyboard or mouse hover
         */
        "active"?: boolean;
        /**
          * Parent and grandparent combobox items, this is set internally for use from combobox
         */
        "ancestors"?: ComboboxChildElement[];
        /**
          * Don't filter this item based on the search text
          * @deprecated use filterDisabled instead
         */
        "constant"?: boolean;
        /**
          * When true, the item cannot be clicked and is visually muted.
         */
        "disabled"?: boolean;
        /**
          * Do not filter this item based on the search text
         */
        "filterDisabled"?: boolean;
        /**
          * Unique identifier, used for accessibility
         */
        "guid"?: string;
        /**
          * Custom icon to display both in combobox chips and next to combobox item text
         */
        "icon"?: string;
        /**
          * Emitted whenever the item is selected or unselected.
         */
        "onCalciteComboboxItemChange"?: (event: CalciteComboboxItemCustomEvent<any>) => void;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * The main label for this item.
         */
        "textLabel": string;
        /**
          * The item's associated value
         */
        "value": any;
    }
    interface CalciteComboboxItemGroup {
        /**
          * Parent and grandparent combobox items, this is set internally for use from combobox
         */
        "ancestors"?: ComboboxChildElement[];
        /**
          * Title of the group
         */
        "label": string;
    }
    interface CalciteDatePicker {
        /**
          * Active range
         */
        "activeRange"?: "start" | "end";
        /**
          * Selected end date
          * @deprecated use value instead
         */
        "end"?: string;
        /**
          * Selected end date as full date object
          * @deprecated use valueAsDate instead
         */
        "endAsDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for "year" (used for aria label)
          * @default "Year"
         */
        "intlYear"?: string;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * Trigger calcite date change when a user changes the date.
         */
        "onCalciteDatePickerChange"?: (event: CalciteDatePickerCustomEvent<Date>) => void;
        /**
          * Trigger calcite date change when a user changes the date range.
          * @see [DateRangeChange](https://github.com/Esri/calcite-components/blob/master/src/components/date-picker/interfaces.ts#L1)
         */
        "onCalciteDatePickerRangeChange"?: (event: CalciteDatePickerCustomEvent<DateRangeChange>) => void;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * Range mode activation
         */
        "range"?: boolean;
        /**
          * specify the scale of the date picker
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Selected start date
          * @deprecated use value instead
         */
        "start"?: string;
        /**
          * Selected start date as full date object
          * @deprecated use valueAsDate instead
         */
        "startAsDate"?: Date;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteDatePickerDay {
        /**
          * Date is actively in focus for keyboard navigation
         */
        "active"?: boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth"?: boolean;
        /**
          * Day of the month to be shown.
         */
        "day"?: number;
        /**
          * Date is outside of range and can't be selected
         */
        "disabled"?: boolean;
        /**
          * Date is the end of date range
         */
        "endOfRange"?: boolean;
        /**
          * Date is currently highlighted as part of the range
         */
        "highlighted"?: boolean;
        /**
          * CLDR data for current locale
         */
        "localeData"?: DateLocaleData;
        /**
          * Emitted when user selects day
         */
        "onCalciteDaySelect"?: (event: CalciteDatePickerDayCustomEvent<any>) => void;
        /**
          * Showing date range
         */
        "range"?: boolean;
        /**
          * Date is being hovered and within the set range
         */
        "rangeHover"?: boolean;
        /**
          * specify the scale of the date picker
         */
        "scale"?: Scale;
        /**
          * Date is the current selected date of the picker
         */
        "selected"?: boolean;
        /**
          * Date is the start of date range
         */
        "startOfRange"?: boolean;
        /**
          * Date value for the day.
         */
        "value"?: Date;
    }
    interface CalciteDatePickerMonth {
        /**
          * Date currently active.
         */
        "activeDate"?: Date;
        /**
          * End date currently active
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered
         */
        "hoverRange"?: HoverRange;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max"?: Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min"?: Date;
        /**
          * Active date for the user keyboard access.
         */
        "onCalciteDatePickerActiveDateChange"?: (event: CalciteDatePickerMonthCustomEvent<any>) => void;
        /**
          * Event emitted when user selects the date.
         */
        "onCalciteDatePickerSelect"?: (event: CalciteDatePickerMonthCustomEvent<any>) => void;
        /**
          * specify the scale of the date picker
         */
        "scale"?: Scale;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface CalciteDatePickerMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Localized string for next month.
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for previous month.
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for year.
         */
        "intlYear"?: string;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale"?: string;
        /**
          * CLDR locale data for translated calendar info
         */
        "localeData"?: DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max"?: Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min"?: Date;
        /**
          * Changes to active date
         */
        "onCalciteDatePickerSelect"?: (event: CalciteDatePickerMonthHeaderCustomEvent<Date>) => void;
        /**
          * specify the scale of the date picker
         */
        "scale"?: Scale;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
    }
    interface CalciteDropdown {
        /**
          * Opens or closes the dropdown
          * @deprecated use open instead.
         */
        "active"?: boolean;
        /**
          * allow the dropdown to remain open after a selection is made if the selection-mode of the selected item's containing group is "none", the dropdown will always close
         */
        "disableCloseOnSelect"?: boolean;
        /**
          * is the dropdown disabled
         */
        "disabled"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * specify the maximum number of calcite-dropdown-items to display before showing the scroller, must be greater than 0 - this value does not include groupTitles passed to calcite-dropdown-group
         */
        "maxItems"?: number;
        "onCalciteDropdownBeforeClose"?: (event: CalciteDropdownCustomEvent<{ el: HTMLCalciteDropdownElement }>) => void;
        "onCalciteDropdownBeforeOpen"?: (event: CalciteDropdownCustomEvent<{ el: HTMLCalciteDropdownElement }>) => void;
        "onCalciteDropdownClose"?: (event: CalciteDropdownCustomEvent<{ el: HTMLCalciteDropdownElement }>) => void;
        "onCalciteDropdownOpen"?: (event: CalciteDropdownCustomEvent<{ el: HTMLCalciteDropdownElement }>) => void;
        /**
          * fires when a dropdown item has been selected or deselected
         */
        "onCalciteDropdownSelect"?: (event: CalciteDropdownCustomEvent<void>) => void;
        /**
          * When true, opens the dropdown
         */
        "open"?: boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the dropdown will be positioned relative to the button.
          * @default "bottom-leading"
         */
        "placement"?: MenuPlacement;
        /**
          * specify the scale of dropdown, defaults to m
         */
        "scale"?: Scale;
        /**
          * **read-only** The currently selected items
          * @readonly
         */
        "selectedItems"?: HTMLCalciteDropdownItemElement[];
        /**
          * specify whether the dropdown is opened by hover or click of a trigger element
         */
        "type"?: "hover" | "click";
        /**
          * specify the width of dropdown
         */
        "width"?: Scale;
    }
    interface CalciteDropdownGroup {
        /**
          * optionally set a group title for display
         */
        "groupTitle"?: string;
        /**
          * Specifies the size of the action.
         */
        "scale"?: Scale;
        /**
          * specify the selection mode - multi (allow any number of (or no) active items), single (allow and require one active item), none (no active items), defaults to single
         */
        "selectionMode"?: SelectionMode;
    }
    interface CalciteDropdownItem {
        /**
          * Indicates whether the item is active.
         */
        "active"?: boolean;
        /**
          * optionally pass a href - used to determine if the component should render as anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of an item - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of an item - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * Applies to the aria-label attribute on the button or hyperlink
         */
        "label"?: string;
        /**
          * The rel attribute to apply to the hyperlink
         */
        "rel"?: string;
        /**
          * The target attribute to apply to the hyperlink
         */
        "target"?: string;
    }
    interface CalciteFab {
        /**
          * Used to set the button's appearance. Default is outline.
         */
        "appearance"?: Extract<"solid" | "outline", Appearance>;
        /**
          * Used to set the button's color. Default is light.
         */
        "color"?: ButtonColor;
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
          * @default "plus"
         */
        "icon"?: string;
        /**
          * Label of the FAB, exposed on hover when textEnabled is false. If no label is provided, the label inherits what's provided for the `text` prop.
         */
        "label"?: string;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Specifies the size of the fab.
         */
        "scale"?: Scale;
        /**
          * Text that accompanies the FAB icon.
         */
        "text"?: string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
    }
    interface CalciteFilter {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * The resulting items after filtering.
          * @readonly
         */
        "filteredItems"?: object[];
        /**
          * A text label that will appear on the clear button.
         */
        "intlClear"?: string;
        /**
          * A text label that will appear next to the input field.
         */
        "intlLabel"?: string;
        /**
          * The items to filter through. The filter uses this as the starting point, and returns items that contain the string entered in the input, using a partial match and recursive search.  This property is required.
         */
        "items"?: object[];
        /**
          * This event fires when the filter text changes.
         */
        "onCalciteFilterChange"?: (event: CalciteFilterCustomEvent<void>) => void;
        /**
          * Placeholder text for the input element's placeholder attribute
         */
        "placeholder"?: string;
        /**
          * specify the scale of filter, defaults to m
         */
        "scale"?: Scale;
        /**
          * Filter value.
         */
        "value"?: string;
    }
    interface CalciteFlow {
    }
    interface CalciteGraph {
        /**
          * Array of values describing a single color stop ([offset, color, opacity]) These color stops should be sorted by offset value
         */
        "colorStops"?: ColorStop[];
        /**
          * Array of tuples describing a single data point ([x, y]) These data points should be sorted by x-axis value
         */
        "data"?: DataSeries;
        /**
          * End of highlight color if highlighting range
         */
        "highlightMax"?: number;
        /**
          * Start of highlight color if highlighting range
         */
        "highlightMin"?: number;
        /**
          * Highest point of the range
         */
        "max": number;
        /**
          * Lowest point of the range
         */
        "min": number;
    }
    interface CalciteHandle {
        /**
          * Emitted when the the handle is activated and the up or down arrow key is pressed.
         */
        "onCalciteHandleNudge"?: (event: CalciteHandleCustomEvent<any>) => void;
        /**
          * Value for the button title attribute
         */
        "textTitle"?: string;
    }
    interface CalciteIcon {
        /**
          * When true, the icon will be flipped when the element direction is 'rtl'.
         */
        "flipRtl"?: boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from https://esri.github.io/calcite-ui-icons/.
         */
        "icon"?: string;
        /**
          * Icon scale.
         */
        "scale"?: Scale;
        /**
          * The icon label.  It is recommended to set this value if your icon is semantic.
         */
        "textLabel"?: string;
    }
    interface CalciteInlineEditable {
        /**
          * when controls, specify a callback to be executed prior to disabling editing. when provided, loading state will be handled automatically.
         */
        "afterConfirm"?: () => Promise<void>;
        /**
          * specify whether save/cancel controls should be displayed when editingEnabled is true, defaults to false
         */
        "controls"?: boolean;
        /**
          * specify whether editing can be enabled
         */
        "disabled"?: boolean;
        /**
          * specify whether the wrapped input element is editable, defaults to false
         */
        "editingEnabled"?: boolean;
        /**
          * specify text to be user for the cancel editing button's aria-label, defaults to `Cancel`
          * @default "Cancel"
         */
        "intlCancelEditing"?: string;
        /**
          * specify text to be user for the confirm changes button's aria-label, defaults to `Save`
          * @default "Save"
         */
        "intlConfirmChanges"?: string;
        /**
          * specify text to be user for the enable editing button's aria-label, defaults to `Click to edit`
          * @default "Click to edit"
         */
        "intlEnableEditing"?: string;
        /**
          * specify whether the confirm button should display a loading state, defaults to false
         */
        "loading"?: boolean;
        /**
          * Emitted when the cancel button gets clicked.
         */
        "onCalciteInlineEditableEditCancel"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        /**
          * Emitted when the check button gets clicked.
         */
        "onCalciteInlineEditableEditConfirm"?: (event: CalciteInlineEditableCustomEvent<void>) => void;
        /**
          * specify the scale of the inline-editable component, defaults to the scale of the wrapped calcite-input or the scale of the closest wrapping component with a set scale
         */
        "scale"?: Scale;
    }
    interface CalciteInput {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Position;
        /**
          * When true, the component is focused on page load.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus"?: boolean;
        /**
          * When true, a clear button is displayed when the component has a value. The clear button shows by default for "search", "time", and "date" types, and will not display for the "textarea" type.
         */
        "clearable"?: boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * When true, number values are displayed with the locale's group separator.
         */
        "groupSeparator"?: boolean;
        /**
          * When true, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden"?: boolean;
        /**
          * When true, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: string | boolean;
        /**
          * When true, the icon is flipped in RTL.
         */
        "iconFlipRtl"?: boolean;
        /**
          * A text label that will appear on the clear button for screen readers.
         */
        "intlClear"?: string;
        /**
          * Accessible name that will appear while loading.
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When true, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the BCP 47 language tag for the desired language and country format.
         */
        "locale"?: string;
        /**
          * Specifies the maximum value for type "number".
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @deprecated use maxLength instead
         */
        "maxlength"?: number;
        /**
          * Specifies the minimum value for type "number".
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Specifies the placement of the buttons for type "number".
         */
        "numberButtonType"?: InputPlacement;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
          * @mdn [numberingSystem](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem)
         */
        "numberingSystem"?: string;
        /**
          * Fires each time a new value is typed and committed.
         */
        "onCalciteInputChange"?: (event: CalciteInputCustomEvent<void>) => void;
        /**
          * Fires each time a new value is typed.
         */
        "onCalciteInputInput"?: (event: CalciteInputCustomEvent<any>) => void;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When true, the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When true, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * Specifies the component type.  Note that the following types add type-specific icons by default: "date", "email", "password", "search", "tel", "time".
         */
        "type"?: | "color"
    | "date"
    | "datetime-local"
    | "email"
    | "file"
    | "image"
    | "month"
    | "number"
    | "password"
    | "search"
    | "tel"
    | "text"
    | "textarea"
    | "time"
    | "url"
    | "week";
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputDatePicker {
        /**
          * Expand or collapse when calendar does not have input
         */
        "active"?: boolean;
        /**
          * When false, the component won't be interactive.
         */
        "disabled"?: boolean;
        /**
          * Selected end date
          * @deprecated use value instead
         */
        "end"?: string;
        /**
          * Selected end date as full date object
          * @deprecated use valueAsDate instead
         */
        "endAsDate"?: Date;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for "year" (used for aria label)
          * @default "Year"
         */
        "intlYear"?: string;
        /**
          * Layout
         */
        "layout"?: "horizontal" | "vertical";
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * The picker's name. Gets submitted with the form.
         */
        "name"?: string;
        /**
          * Trigger calcite date change when a user changes the date.
          * @deprecated use `calciteInputDatePickerChange` instead.
         */
        "onCalciteDatePickerChange"?: (event: CalciteInputDatePickerCustomEvent<Date>) => void;
        /**
          * Trigger calcite date change when a user changes the date range.
          * @see [DateRangeChange](https://github.com/Esri/calcite-components/blob/master/src/components/calcite-date-picker/interfaces.ts#L1)
          * @deprecated use `calciteInputDatePickerChange` instead.
         */
        "onCalciteDatePickerRangeChange"?: (event: CalciteInputDatePickerCustomEvent<DateRangeChange>) => void;
        /**
          * This event fires when the input date picker value changes.
         */
        "onCalciteInputDatePickerChange"?: (event: CalciteInputDatePickerCustomEvent<void>) => void;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the date-picker component will be positioned relative to the input.
          * @default "bottom-leading"
         */
        "placement"?: MenuPlacement;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * Range mode activation
         */
        "range"?: boolean;
        /**
          * When true, still focusable but controls are gone and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * specify the scale of the date picker
         */
        "scale"?: "s" | "m" | "l";
        /**
          * Selected start date
          * @deprecated use value instead
         */
        "start"?: string;
        /**
          * Selected start date as full date object
          * @deprecated use valueAsDate instead
         */
        "startAsDate"?: Date;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface CalciteInputMessage {
        /**
          * Indicates whether the message is displayed.
         */
        "active"?: boolean;
        /**
          * when used as a boolean set to true, show a default icon based on status. You can also pass a calcite-ui-icon name to this prop to display a custom icon
         */
        "icon"?: boolean | string;
        /**
          * specify the scale of the input, defaults to m
         */
        "scale"?: Scale;
        /**
          * specify the status of the input field, determines message and icons
         */
        "status"?: Status;
        /**
          * specify the appearance of any slotted message - default (displayed under input), or floating (positioned absolutely under input)
          * @deprecated "floating" type is no longer supported
         */
        "type"?: "default";
    }
    interface CalciteInputNumber {
        /**
          * Specifies the text alignment of the component's value.
         */
        "alignment"?: Position;
        /**
          * When true, the component is focused on page load.
          * @mdn [autofocus](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus)
         */
        "autofocus"?: boolean;
        /**
          * When true, a clear button is displayed when the component has a value.
         */
        "clearable"?: boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
          * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)
         */
        "disabled"?: boolean;
        /**
          * When true, number values are displayed with the locale's group separator.
         */
        "groupSeparator"?: boolean;
        /**
          * When true, the component will not be visible.
          * @mdn [hidden](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden)
         */
        "hidden"?: boolean;
        /**
          * When true, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.
         */
        "icon"?: string | boolean;
        /**
          * When true, the icon is flipped in RTL.
         */
        "iconFlipRtl"?: boolean;
        /**
          * A text label that will appear on the clear button for screen readers.
         */
        "intlClear"?: string;
        /**
          * Accessible name that will appear while loading.
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Accessible name for the component's button or hyperlink.
         */
        "label"?: string;
        /**
          * When true, the component is in the loading state and `calcite-progress` is displayed.
         */
        "loading"?: boolean;
        /**
          * Specifies the BCP 47 language tag for the desired language and country format.
         */
        "locale"?: string;
        /**
          * Specifies the maximum value.
          * @mdn [max](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#max)
         */
        "max"?: number;
        /**
          * Specifies the maximum length of text for the component's value.
          * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)
         */
        "maxLength"?: number;
        /**
          * Specifies the minimum value.
          * @mdn [min](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#min)
         */
        "min"?: number;
        /**
          * Specifies the minimum length of text for the component's value.
          * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)
         */
        "minLength"?: number;
        /**
          * Specifies the name of the component.
          * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)
         */
        "name"?: string;
        /**
          * Specifies the placement of the buttons.
         */
        "numberButtonType"?: InputPlacement1;
        /**
          * Specifies the Unicode numeral system used by the component for localization.
          * @mdn [numberingSystem](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem)
         */
        "numberingSystem"?: string;
        /**
          * Fires each time a new value is typed and committed.
         */
        "onCalciteInputNumberChange"?: (event: CalciteInputNumberCustomEvent<void>) => void;
        /**
          * Fires each time a new value is typed.
         */
        "onCalciteInputNumberInput"?: (event: CalciteInputNumberCustomEvent<any>) => void;
        /**
          * Specifies placeholder text for the component.
          * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)
         */
        "placeholder"?: string;
        /**
          * Adds text to the start of the component.
         */
        "prefixText"?: string;
        /**
          * When true, the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * When true, the component must have a value in order for the form to submit.
         */
        "required"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the status of the input field, which determines message and icons.
         */
        "status"?: Status;
        /**
          * Specifies the granularity that the component's value must adhere to.
          * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step)
         */
        "step"?: number | "any";
        /**
          * Adds text to the end of the component.
         */
        "suffixText"?: string;
        /**
          * The component's value.
         */
        "value"?: string;
    }
    interface CalciteInputTimePicker {
        /**
          * The active state of the time input
         */
        "active"?: boolean;
        /**
          * The disabled state of the time input
         */
        "disabled"?: boolean;
        /**
          * aria-label for the hour input
         */
        "intlHour"?: string;
        /**
          * aria-label for the hour down button
         */
        "intlHourDown"?: string;
        /**
          * aria-label for the hour up button
         */
        "intlHourUp"?: string;
        /**
          * aria-label for the meridiem (am/pm) input
         */
        "intlMeridiem"?: string;
        /**
          * aria-label for the meridiem (am/pm) down button
         */
        "intlMeridiemDown"?: string;
        /**
          * aria-label for the meridiem (am/pm) up button
         */
        "intlMeridiemUp"?: string;
        /**
          * aria-label for the minute input
         */
        "intlMinute"?: string;
        /**
          * aria-label for the minute down button
         */
        "intlMinuteDown"?: string;
        /**
          * aria-label for the minute up button
         */
        "intlMinuteUp"?: string;
        /**
          * aria-label for the second input
         */
        "intlSecond"?: string;
        /**
          * aria-label for the second down button
         */
        "intlSecondDown"?: string;
        /**
          * aria-label for the second up button
         */
        "intlSecondUp"?: string;
        /**
          * The name of the time input
         */
        "name"?: string;
        /**
          * Fires when the time value is changed as a result of user input.
         */
        "onCalciteInputTimePickerChange"?: (event: CalciteInputTimePickerCustomEvent<string>) => void;
        /**
          * Determines where the popover will be positioned relative to the input.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement"?: PopperPlacement;
        /**
          * When true, still focusable but controls are gone and the value cannot be modified.
          * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)
         */
        "readOnly"?: boolean;
        /**
          * The scale (size) of the time input
         */
        "scale"?: Scale;
        /**
          * number (seconds) that specifies the granularity that the value must adhere to
         */
        "step"?: number;
        /**
          * The selected time in UTC (always 24-hour format)
         */
        "value"?: string;
    }
    interface CalciteLabel {
        /**
          * specify the text alignment of the label
         */
        "alignment"?: Alignment;
        /**
          * eliminates any space around the label
          * @deprecated set the --calcite-label-margin-bottom css variable to 0 instead
         */
        "disableSpacing"?: boolean;
        /**
          * is the label disabled
          * @deprecated use the `disabled` property on the interactive components instead
         */
        "disabled"?: boolean;
        /**
          * The id of the input associated with the label
         */
        "for"?: string;
        /**
          * is the wrapped element positioned inline with the label slotted text
         */
        "layout"?: "inline" | "inline-space-between" | "default";
        /**
          * specify the scale of the label, defaults to m
         */
        "scale"?: Scale;
        /**
          * specify the status of the label and any child input / input messages
          * @deprecated set directly on child element instead
         */
        "status"?: Status;
    }
    interface CalciteLink {
        /**
          * is the link disabled
         */
        "disabled"?: boolean;
        /**
          * Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value: Without a value, the browser will suggest a filename/extension See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download"?: string | boolean;
        /**
          * optionally pass a href - used to determine if the component should render as a link or an anchor
         */
        "href"?: string;
        /**
          * optionally pass an icon to display at the end of a button - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of a button - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * The rel attribute to apply to the hyperlink
         */
        "rel"?: string;
        /**
          * The target attribute to apply to the hyperlink
         */
        "target"?: string;
    }
    interface CalciteList {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
    }
    interface CalciteListItem {
        /**
          * A description for the component. Displays below the label text.
         */
        "description"?: string;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * The label text of the component. Displays above the description text.
         */
        "label"?: string;
        /**
          * When true, prevents the content of the component from user interaction.
         */
        "nonInteractive"?: boolean;
    }
    interface CalciteListItemGroup {
        /**
          * The header text for all nested `calcite-list-item` rows.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
    }
    interface CalciteLoader {
        /**
          * When true, the component is active.
         */
        "active"?: boolean;
        /**
          * When true, displays smaller and appears to the left of the text.
         */
        "inline"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Disables spacing around the component.
         */
        "noPadding"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Use indeterminate if finding actual progress value is impossible.
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * The component's value. Valid only for determinate indicators. Percent complete of 100.
         */
        "value"?: number;
    }
    interface CalciteModal {
        /**
          * When true, the `calcite-modal` is active.
          * @deprecated use open instead
         */
        "active"?: boolean;
        /**
          * Sets the background color of the component's content.
         */
        "backgroundColor"?: ModalBackgroundColor;
        /**
          * Passes a function to run before the `calcite-modal` closes.
         */
        "beforeClose"?: (el: HTMLElement) => Promise<void>;
        /**
          * Adds a color bar to the top of component for visual impact. Use color to add importance to destructive or workflow dialogs.
         */
        "color"?: "red" | "blue";
        /**
          * When true, disables the component's close button.
         */
        "disableCloseButton"?: boolean;
        /**
          * When true, disables the default close on escape behavior.
         */
        "disableEscape"?: boolean;
        /**
          * When true, disables the closing of the component when clicked outside.
         */
        "disableOutsideClose"?: boolean;
        /**
          * When true, prevents the component from expanding to the entire screen on mobile devices.
         */
        "docked"?: boolean;
        /**
          * Sets the component to always be fullscreen (overrides width).
         */
        "fullscreen"?: boolean;
        /**
          * Accessible name for the component's close button.
         */
        "intlClose"?: string;
        /**
          * When true, disables spacing to the content area slot.
         */
        "noPadding"?: boolean;
        /**
          * Emits when the component finishes the close animation.
         */
        "onCalciteModalClose"?: (event: CalciteModalCustomEvent<any>) => void;
        /**
          * Emits when the component finishes the open animation.
         */
        "onCalciteModalOpen"?: (event: CalciteModalCustomEvent<any>) => void;
        /**
          * When true,`calcite-modal`  opens
         */
        "open"?: boolean;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component. Can use scale sizes or pass a number (displays in pixels).
         */
        "width"?: Scale | number;
    }
    interface CalciteNotice {
        /**
          * When true, the component is active.
         */
        "active"?: boolean;
        /**
          * When true, displays a button user can click to dismiss the `calcite-notice`
         */
        "closable"?: boolean;
        /**
          * The color for the component's top border and icon.
         */
        "color"?: StatusColor;
        /**
          * When true, a close button is added to the component.
          * @deprecated use closable instead
         */
        "dismissible"?: boolean;
        /**
          * When present, shows a default recommended icon. You can also pass a calcite-ui-icon name to display a requested icon.
         */
        "icon"?: string | boolean;
        /**
          * Accessible name for the close button.
          * @default "Close"
         */
        "intlClose"?: string;
        /**
          * Fired when the component is closed.
         */
        "onCalciteNoticeClose"?: (event: CalciteNoticeCustomEvent<any>) => void;
        /**
          * Fired when the component is opened.
         */
        "onCalciteNoticeOpen"?: (event: CalciteNoticeCustomEvent<any>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the width of the component.
         */
        "width"?: Width;
    }
    interface CalciteOption {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When true, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value"?: any;
    }
    interface CalciteOptionGroup {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
    }
    interface CalcitePagination {
        /**
          * Specifies the number of items per page.
         */
        "num"?: number;
        /**
          * Emits when the selected page changes.
          * @see [PaginationDetail](https://github.com/Esri/calcite-components/blob/master/src/components/pagination/pagination.tsx#L23)
         */
        "onCalcitePaginationChange"?: (event: CalcitePaginationCustomEvent<PaginationDetail>) => void;
        /**
          * Emits when the selected page changes.
          * @deprecated use calcitePaginationChange instead
         */
        "onCalcitePaginationUpdate"?: (event: CalcitePaginationCustomEvent<PaginationDetail>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Specifies the starting item number.
         */
        "start"?: number;
        /**
          * Accessible name for the component's next button.
          * @default "Next"
         */
        "textLabelNext"?: string;
        /**
          * Accessible name for the component's previous button.
          * @default "Previous"
         */
        "textLabelPrevious"?: string;
        /**
          * Specifies the total number of items.
         */
        "total"?: number;
    }
    interface CalcitePanel {
        /**
          * When provided, this method will be called before it is removed from the parent flow.
         */
        "beforeBack"?: () => Promise<void>;
        /**
          * When true, displays a close button in the trailing side of the header
         */
        "closable"?: boolean;
        /**
          * When true, panel will be hidden
         */
        "closed"?: boolean;
        /**
          * A description for the component.
         */
        "description"?: string;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When true, hides the component.
          * @deprecated use closed instead
         */
        "dismissed"?: boolean;
        /**
          * When true, a close button is added to the component.
          * @deprecated use closable instead
         */
        "dismissible"?: boolean;
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Specifies the maximum height of the component.
         */
        "heightScale"?: Scale;
        /**
          * Accessible name for the component's back button. The back button will only be shown when 'showBackButton' is true.
         */
        "intlBack"?: string;
        /**
          * Accessible name for the component's close button. The close button will only be shown when 'dismissible' is true.
         */
        "intlClose"?: string;
        /**
          * Accessible name for the component's actions menu.
         */
        "intlOptions"?: string;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * When true, the action menu items in the `header-menu-actions` slot are open.
         */
        "menuOpen"?: boolean;
        /**
          * Fires when the back button is clicked.
         */
        "onCalcitePanelBackClick"?: (event: CalcitePanelCustomEvent<any>) => void;
        /**
          * Fires when the close button is clicked.
         */
        "onCalcitePanelDismiss"?: (event: CalcitePanelCustomEvent<any>) => void;
        /**
          * Fires when the close button is clicked.
          * @deprecated use calcitePanelDismiss instead.
         */
        "onCalcitePanelDismissedChange"?: (event: CalcitePanelCustomEvent<any>) => void;
        /**
          * Fires when the content is scrolled.
         */
        "onCalcitePanelScroll"?: (event: CalcitePanelCustomEvent<any>) => void;
        /**
          * When true, displays a back button in the header.
         */
        "showBackButton"?: boolean;
        /**
          * Summary text. A description displayed underneath the heading.
          * @deprecated use description instead
         */
        "summary"?: string;
        /**
          * Specifies the width of the component.
         */
        "widthScale"?: Scale;
    }
    interface CalcitePickList {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When true, an input appears at the top of the list that can be used by end users to filter items in the list.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the filter input field.
         */
        "filterPlaceholder"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When true, a user can select multiple `calcite-pick-list-item`s at a time. When false, only a single `calcite-pick-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple"?: boolean;
        /**
          * Emits when any of the `calcite-pick-list-item` selections have changed.
         */
        "onCalciteListChange"?: (event: CalcitePickListCustomEvent<Map<string, HTMLCalcitePickListItemElement>>) => void;
        /**
          * When true and single-selection is enabled, the selection changes when navigating `calcite-pick-list-item`s via keyboard.
         */
        "selectionFollowsFocus"?: boolean;
    }
    interface CalcitePickListGroup {
        /**
          * Specifies the title for all nested `calcite-pick-list-item`s.
         */
        "groupTitle"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
    }
    interface CalcitePickListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        /**
          * When false, the component cannot be deselected by user interaction.
         */
        "disableDeselect"?: boolean;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Accessible name for the component's remove button. Only applicable if removable is "true".
          * @default "Remove"
         */
        "intlRemove"?: string;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label"?: string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * Fires when the component is selected or unselected.
         */
        "onCalciteListItemChange"?: (event: CalcitePickListItemCustomEvent<{
    item: HTMLCalcitePickListItemElement;
    value: any;
    selected: boolean;
    shiftPressed: boolean;
  }>) => void;
        /**
          * Fires when the remove button is pressed.
         */
        "onCalciteListItemRemove"?: (event: CalcitePickListItemCustomEvent<void>) => void;
        /**
          * When true, displays a remove action that removes the item from the list.
         */
        "removable"?: boolean;
        /**
          * When true, selects an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface CalcitePopover {
        /**
          * When true and clicking outside of the component, automatically closes open `calcite-popover`s.
         */
        "autoClose"?: boolean;
        /**
          * When true, display a close button within the Popover
         */
        "closable"?: boolean;
        /**
          * When true, a close button is added to the component.
          * @deprecated use dismissible instead.
         */
        "closeButton"?: boolean;
        /**
          * When true, prevents flipping the component's placement when overlapping its `referenceElement`.
         */
        "disableFlip"?: boolean;
        /**
          * When true, removes the caret pointer.
         */
        "disablePointer"?: boolean;
        /**
          * When true, a close button is added to the component.
          * @deprecated use closable instead
         */
        "dismissible"?: boolean;
        /**
          * Defines the available placements that can be used when a flip occurs.
         */
        "flipPlacements"?: ComputedPlacement[];
        /**
          * The component header text.
         */
        "heading"?: string;
        /**
          * Specifies the number at which section headings should start.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Accessible name for the component's close button.
          * @default "Close"
         */
        "intlClose"?: string;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Offsets the position of the popover away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offsets the position of the popover along the `referenceElement`.
         */
        "offsetSkidding"?: number;
        /**
          * Fired when the component is closed.
         */
        "onCalcitePopoverClose"?: (event: CalcitePopoverCustomEvent<any>) => void;
        /**
          * Fired when the component is opened.
         */
        "onCalcitePopoverOpen"?: (event: CalcitePopoverCustomEvent<any>) => void;
        /**
          * When true, displays and positions the component.
         */
        "open"?: boolean;
        /**
          * Describes the positioning type to use for the overlaid content. If the element is in a fixed container, use the "fixed" value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement"?: PopperPlacement;
        /**
          * The `referenceElement` used to position the component according to its "placement" value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
         */
        "referenceElement": ReferenceElement | string;
        /**
          * When true, disables automatically toggling the component when its `referenceElement` has been triggered. This property can be set to "true" to manage when a popover is open.
         */
        "triggerDisabled"?: boolean;
    }
    interface CalcitePopoverManager {
        /**
          * Automatically closes any currently open popovers when clicking outside of a popover.
         */
        "autoClose"?: boolean;
        /**
          * CSS Selector to match reference elements for popovers. Reference elements will be identified by this selector in order to open their associated popover.
          * @default `[data-calcite-popover-reference]`
         */
        "selector"?: string;
    }
    interface CalciteProgress {
        /**
          * Accessible name for the component.
         */
        "label"?: string;
        /**
          * When true and for indeterminate progress bars, reverses the animation direction.
         */
        "reversed"?: boolean;
        /**
          * Text that displays under the component's indicator.
         */
        "text"?: string;
        /**
          * Use indeterminate if finding actual progress value is impossible.
         */
        "type"?: "indeterminate" | "determinate";
        /**
          * The component's progress value, with a range of 0.0 - 1.0.
         */
        "value"?: number;
    }
    interface CalciteRadioButton {
        /**
          * The checked state of the radio button.
         */
        "checked"?: boolean;
        /**
          * The disabled state of the radio button.
         */
        "disabled"?: boolean;
        /**
          * The id attribute of the radio button.  When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * The radio button's hidden status.  When a radio button is hidden it is not focusable or checkable.
         */
        "hidden"?: boolean;
        /**
          * The name of the radio button. `name` is passed as a property automatically from `calcite-radio-button-group`.
         */
        "name"?: string;
        /**
          * Fires only when the radio button is checked.  This behavior is identical to the native HTML input element. Since this event does not fire when the radio button is unchecked, it's not recommended to attach a listener for this event directly on the element, but instead either attach it to a node that contains all of the radio buttons in the group or use the calciteRadioButtonGroupChange event if using this with calcite-radio-button-group.
         */
        "onCalciteRadioButtonChange"?: (event: CalciteRadioButtonCustomEvent<any>) => void;
        /**
          * Requires that a value is selected for the radio button group before the parent form will submit.
         */
        "required"?: boolean;
        /**
          * The scale (size) of the radio button. `scale` is passed as a property automatically from `calcite-radio-button-group`.
         */
        "scale"?: Scale;
        /**
          * The value of the radio button.
         */
        "value": any;
    }
    interface CalciteRadioButtonGroup {
        /**
          * The disabled state of the radio button group.
         */
        "disabled"?: boolean;
        /**
          * The radio button group's hidden status.  When a radio button group is hidden none of its options are focusable or checkable.
         */
        "hidden"?: boolean;
        /**
          * The layout direction of the radio buttons in a group.
         */
        "layout"?: Layout;
        /**
          * The name of the radio button group. `name` must be unique to other radio button group instances.
         */
        "name": string;
        /**
          * Emitted when the radio button group has changed.
         */
        "onCalciteRadioButtonGroupChange"?: (event: CalciteRadioButtonGroupCustomEvent<any>) => void;
        /**
          * Requires that a value is selected for the radio button group before the parent form will submit.
         */
        "required"?: boolean;
        /**
          * The scale (size) of the radio button group.
         */
        "scale"?: Scale;
    }
    interface CalciteRadioGroup {
        /**
          * specify the appearance style of the radio group, defaults to solid.
         */
        "appearance"?: RadioAppearance;
        /**
          * is the radio group disabled
         */
        "disabled"?: boolean;
        /**
          * specify the layout of the radio group, defaults to horizontal
         */
        "layout"?: Layout;
        /**
          * The group's name. Gets submitted with the form.
         */
        "name"?: string;
        /**
          * Fired when the selected option changes, event detail is the new value
         */
        "onCalciteRadioGroupChange"?: (event: CalciteRadioGroupCustomEvent<string>) => void;
        /**
          * The scale of the radio group
         */
        "scale"?: Scale;
        /**
          * The group's selected item.
          * @readonly
         */
        "selectedItem"?: HTMLCalciteRadioGroupItemElement;
        /**
          * The value of the selectedItem
         */
        "value"?: string;
        /**
          * specify the width of the group, defaults to auto
         */
        "width"?: Extract<"auto" | "full", Width>;
    }
    interface CalciteRadioGroupItem {
        /**
          * Indicates whether the control is checked.
         */
        "checked"?: boolean;
        /**
          * optionally pass an icon to display - accepts Calcite UI icon names
         */
        "icon"?: string;
        /**
          * flip the icon in rtl
         */
        "iconFlipRtl"?: boolean;
        /**
          * optionally used with icon, select where to position the icon
         */
        "iconPosition"?: Position;
        /**
          * The control's value.
         */
        "value"?: any | null;
    }
    interface CalciteRating {
        /**
          * optionally pass a cumulative average rating to display
         */
        "average"?: number;
        /**
          * optionally pass a number of previous ratings to display
         */
        "count"?: number;
        /**
          * is the rating component in a selectable mode
         */
        "disabled"?: boolean;
        /**
          * Localized string for "Rating" (used for aria label)
          * @default "Rating"
         */
        "intlRating"?: string;
        /**
          * Localized string for labelling each star, `${num}` in the string will be replaced by the number
          * @default "Stars: ${num}"
         */
        "intlStars"?: string;
        /**
          * The name of the rating
         */
        "name"?: string;
        /**
          * Fires when the rating value has changed.
         */
        "onCalciteRatingChange"?: (event: CalciteRatingCustomEvent<{ value: number }>) => void;
        /**
          * is the rating component in a selectable mode
         */
        "readOnly"?: boolean;
        /**
          * specify the scale of the component, defaults to m
         */
        "scale"?: Scale;
        /**
          * Show average and count data summary chip (if available)
         */
        "showChip"?: boolean;
        /**
          * the value of the rating component
         */
        "value"?: number;
    }
    interface CalciteScrim {
        /**
          * string to override English loading text
          * @default "Loading"
         */
        "intlLoading"?: string;
        /**
          * Determines if the component will have the loader overlay. Otherwise, will render opaque disabled state.
         */
        "loading"?: boolean;
    }
    interface CalciteSelect {
        /**
          * When true, it prevents the option from being selected.
         */
        "disabled"?: boolean;
        /**
          * The component's label. This is required for accessibility purposes.
         */
        "label": string;
        /**
          * The select's name. Gets submitted with the form.
         */
        "name"?: string;
        /**
          * This event will fire whenever the selected option changes.
         */
        "onCalciteSelectChange"?: (event: CalciteSelectCustomEvent<void>) => void;
        /**
          * The component scale.
         */
        "scale"?: Scale;
        /**
          * The currently selected option.
          * @readonly
         */
        "selectedOption"?: HTMLCalciteOptionElement;
        /**
          * The value of the selectedOption
         */
        "value"?: string;
        /**
          * The component width.
         */
        "width"?: Width;
    }
    interface CalciteShell {
        /**
          * Positions the center content behind any calcite-shell-panels.
         */
        "contentBehind"?: boolean;
    }
    interface CalciteShellCenterRow {
        /**
          * This property makes the content area appear like a "floating" panel.
         */
        "detached"?: boolean;
        /**
          * Specifies the maximum height of the row.
         */
        "heightScale"?: Scale;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position"?: Position;
    }
    interface CalciteShellPanel {
        /**
          * Hide the content panel.
         */
        "collapsed"?: boolean;
        /**
          * This property makes the content area appear like a "floating" panel.
         */
        "detached"?: boolean;
        /**
          * Specifies the maximum height of the contents when detached.
         */
        "detachedHeightScale"?: Scale;
        /**
          * Accessible label for resize separator.
          * @default "Resize"
         */
        "intlResize"?: string;
        /**
          * Emitted when collapse has been toggled.
          * @deprecated use a resizeObserver on the shell-panel to listen for changes to its size.
         */
        "onCalciteShellPanelToggle"?: (event: CalciteShellPanelCustomEvent<any>) => void;
        /**
          * Arranges the component depending on the elements 'dir' property.
         */
        "position"?: Position;
        /**
          * This property makes the content area resizable if the calcite-shell-panel is not 'detached'.
         */
        "resizable"?: boolean;
        /**
          * This sets width of the content area.
         */
        "widthScale"?: Scale;
    }
    interface CalciteSlider {
        /**
          * Disable and gray out the slider
         */
        "disabled"?: boolean;
        /**
          * Indicates if a histogram is present
         */
        "hasHistogram"?: boolean;
        /**
          * List of x,y coordinates within the slider's min and max, displays above the slider track.
          * @see [DataSeries](https://github.com/Esri/calcite-components/blob/master/src/components/graph/interfaces.ts#L5)
         */
        "histogram"?: DataSeries;
        /**
          * Array of values describing a single color stop, sorted by offset ascending.
         */
        "histogramStops"?: ColorStop[];
        /**
          * Label handles with their numeric value
         */
        "labelHandles"?: boolean;
        /**
          * Label tick marks with their numeric value.
         */
        "labelTicks"?: boolean;
        /**
          * Maximum selectable value
         */
        "max"?: number;
        /**
          * Used as an accessible label (aria-label) for second handle if needed (ex. "Temperature, upper bound")
         */
        "maxLabel"?: string;
        /**
          * Currently selected upper number (if multi-select)
         */
        "maxValue"?: number;
        /**
          * Minimum selectable value
         */
        "min"?: number;
        /**
          * Used as an accessible label (aria-label) for first (or only) handle (ex. "Temperature, lower bound")
         */
        "minLabel"?: string;
        /**
          * Currently selected lower number (if multi-select)
         */
        "minValue"?: number;
        /**
          * When true, the slider will display values from high to low.  Note that this value will be ignored if the slider has an associated histogram.
         */
        "mirrored"?: boolean;
        /**
          * The name of the slider
         */
        "name"?: string;
        /**
          * Fires on when the thumb is released on slider If you need to constantly listen to the drag event, please use calciteSliderInput instead
         */
        "onCalciteSliderChange"?: (event: CalciteSliderCustomEvent<any>) => void;
        /**
          * Fires on all updates to the slider. :warning: Will be fired frequently during drag. If you are performing any expensive operations consider using a debounce or throttle to avoid locking up the main thread.
         */
        "onCalciteSliderInput"?: (event: CalciteSliderCustomEvent<any>) => void;
        /**
          * Fires on all updates to the slider. :warning: Will be fired frequently during drag. If you are performing any expensive operations consider using a debounce or throttle to avoid locking up the main thread.
          * @deprecated use calciteSliderInput instead
         */
        "onCalciteSliderUpdate"?: (event: CalciteSliderCustomEvent<any>) => void;
        /**
          * Interval to move on page up/page down keys
         */
        "pageStep"?: number;
        /**
          * Use finer point for handles
         */
        "precise"?: boolean;
        /**
          * When true, makes the component required for form-submission.
         */
        "required"?: boolean;
        /**
          * Specify the scale of the slider, defaults to m
         */
        "scale"?: Scale;
        /**
          * When true, enables snap selection along the step interval
         */
        "snap"?: boolean;
        /**
          * Interval to move on up/down keys
         */
        "step"?: number;
        /**
          * Show tick marks on the number line at provided interval
         */
        "ticks"?: number;
        /**
          * Currently selected number (if single select)
         */
        "value"?: null | number | number[];
    }
    interface CalciteSortableList {
        /**
          * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.
         */
        "disabled"?: boolean;
        /**
          * Specifies which items inside the element should be draggable.
         */
        "dragSelector"?: string;
        /**
          * The list's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * The selector for the handle elements.
         */
        "handleSelector"?: string;
        /**
          * Indicates the horizontal or vertical orientation of the component.
         */
        "layout"?: Layout;
        /**
          * When true, content is waiting to be loaded. This state shows a busy indicator.
         */
        "loading"?: boolean;
        /**
          * Emitted when the order of the list has changed.
         */
        "onCalciteListOrderChange"?: (event: CalciteSortableListCustomEvent<any>) => void;
    }
    interface CalciteSplitButton {
        /**
          * specify the appearance style of the button, defaults to solid.
         */
        "appearance"?: ButtonAppearance;
        /**
          * specify the color of the control, defaults to blue
         */
        "color"?: ButtonColor;
        /**
          * is the control disabled
         */
        "disabled"?: boolean;
        /**
          * specify the icon used for the dropdown menu, defaults to chevron
         */
        "dropdownIconType"?: DropdownIconType;
        /**
          * aria label for overflow button
         */
        "dropdownLabel"?: string;
        /**
          * optionally add a calcite-loader component to the control, disabling interaction. with the primary button
         */
        "loading"?: boolean;
        /**
          * fired when the primary button is clicked
         */
        "onCalciteSplitButtonPrimaryClick"?: (event: CalciteSplitButtonCustomEvent<any>) => void;
        /**
          * fired when the secondary button is clicked
         */
        "onCalciteSplitButtonSecondaryClick"?: (event: CalciteSplitButtonCustomEvent<any>) => void;
        /**
          * Describes the type of positioning to use for the dropdown. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * optionally pass an icon to display at the end of the primary button - accepts Calcite UI icon names
         */
        "primaryIconEnd"?: string;
        /**
          * flip the primary icon(s) in rtl
         */
        "primaryIconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of the primary button - accepts Calcite UI icon names
         */
        "primaryIconStart"?: string;
        /**
          * optionally pass an aria-label for the primary button
         */
        "primaryLabel"?: string;
        /**
          * text for primary action button
         */
        "primaryText"?: string;
        /**
          * specify the scale of the control, defaults to m
         */
        "scale"?: Scale;
        /**
          * specify the width of the button, defaults to auto
         */
        "width"?: Width;
    }
    interface CalciteStepper {
        /**
          * optionally display a status icon next to the step title
         */
        "icon"?: boolean;
        /**
          * specify the layout of stepper, defaults to horizontal
         */
        "layout"?: Extract<"horizontal" | "vertical", Layout>;
        /**
          * optionally display the number next to the step title
         */
        "numbered"?: boolean;
        /**
          * This event fires when the active stepper item has changed.
         */
        "onCalciteStepperItemChange"?: (event: CalciteStepperCustomEvent<StepperItemChangeEventDetail>) => void;
        /**
          * specify the scale of stepper, defaults to m
         */
        "scale"?: Scale;
    }
    interface CalciteStepperItem {
        /**
          * is the step active
         */
        "active"?: boolean;
        /**
          * has the step been completed
         */
        "complete"?: boolean;
        /**
          * stepper item description
         */
        "description"?: string;
        /**
          * is the step disabled and not navigable to by a user
         */
        "disabled"?: boolean;
        /**
          * does the step contain an error that needs to be resolved by the user
         */
        "error"?: boolean;
        /**
          * stepper item heading
         */
        "heading"?: string;
        /**
          * pass a title for the stepper item
          * @deprecated use description instead
         */
        "itemSubtitle"?: string;
        /**
          * pass a title for the stepper item
          * @deprecated use heading instead
         */
        "itemTitle"?: string;
    }
    interface CalciteSwitch {
        /**
          * True if the switch is initially on
         */
        "checked"?: boolean;
        /**
          * True if the switch is disabled
         */
        "disabled"?: boolean;
        /**
          * Applies to the aria-label attribute on the switch
         */
        "label"?: string;
        /**
          * The name of the switch input
         */
        "name"?: string;
        /**
          * Fires when the checked value has changed.
         */
        "onCalciteSwitchChange"?: (event: CalciteSwitchCustomEvent<any>) => void;
        /**
          * The scale of the switch
         */
        "scale"?: Scale;
        /**
          * True if the switch is initially on
          * @deprecated use 'checked' instead.
         */
        "switched"?: boolean;
        /**
          * The value of the switch input
         */
        "value"?: any;
    }
    interface CalciteTab {
        /**
          * Show this tab
         */
        "active"?: boolean;
        /**
          * Optionally include a unique name for this tab, be sure to also set this name on the associated title.
         */
        "tab"?: string;
    }
    interface CalciteTabNav {
        /**
          * Emitted when the active tab changes
          * @see [TabChangeEventDetail](https://github.com/Esri/calcite-components/blob/master/src/components/tab/interfaces.ts#L1)
         */
        "onCalciteTabChange"?: (event: CalciteTabNavCustomEvent<TabChangeEventDetail>) => void;
        /**
          * Name to use when saving selected tab data to localStorage
         */
        "storageId"?: string;
        /**
          * Pass the same string to multiple tab navs to keep them all in sync if one changes
         */
        "syncId"?: string;
    }
    interface CalciteTabTitle {
        /**
          * Show this tab title as selected
         */
        "active"?: boolean;
        /**
          * Disable this tab title
         */
        "disabled"?: boolean;
        /**
          * optionally pass an icon to display at the end of a tab title - accepts calcite ui icon names
         */
        "iconEnd"?: string;
        /**
          * flip the icon(s) in rtl
         */
        "iconFlipRtl"?: FlipContext;
        /**
          * optionally pass an icon to display at the start of a tab title - accepts calcite ui icon names
         */
        "iconStart"?: string;
        /**
          * Fires when a specific tab is activated. Emits the "tab" property or the index position.
          * @see [TabChangeEventDetail](https://github.com/Esri/calcite-components/blob/master/src/components/tab/interfaces.ts#L1)
         */
        "onCalciteTabsActivate"?: (event: CalciteTabTitleCustomEvent<TabChangeEventDetail>) => void;
        /**
          * Optionally include a unique name for the tab title, be sure to also set this name on the associated tab.
         */
        "tab"?: string;
    }
    interface CalciteTabs {
        /**
          * Optionally enable tabs to appear like a folder-style menu when its layout is "inline"
         */
        "bordered"?: boolean;
        /**
          * Align tab titles to the edge or fully justify them across the tab nav ("center")
         */
        "layout"?: TabLayout;
        /**
          * Display the tabs top (default) or bottom of the tab content. above and below are deprecated.
         */
        "position"?: TabPosition;
        /**
          * Specify the scale of the tabs component, defaults to m
         */
        "scale"?: Scale;
    }
    interface CalciteTile {
        /**
          * The active state of the tile.
         */
        "active"?: boolean;
        /**
          * The description text that appears beneath the heading of the tile.
         */
        "description"?: string;
        /**
          * When true, prevents interaction.
         */
        "disabled"?: boolean;
        /**
          * The embed mode of the tile.  When true, renders without a border and padding for use by other components.
         */
        "embed"?: boolean;
        /**
          * The heading text that appears between the icon and description of the tile.
         */
        "heading"?: string;
        /**
          * The hidden state of the tile.
         */
        "hidden"?: boolean;
        /**
          * The (optional) url for the tile. (Only applies when embed is set to false)
         */
        "href"?: string;
        /**
          * The icon that appears at the top of the tile.
         */
        "icon"?: string;
    }
    interface CalciteTileSelect {
        /**
          * The checked state of the tile select.
         */
        "checked"?: boolean;
        /**
          * The description text that appears beneath the heading of the tile.
         */
        "description"?: string;
        /**
          * The disabled state of the tile select.
         */
        "disabled"?: boolean;
        /**
          * The heading text that appears between the icon and description of the tile.
         */
        "heading"?: string;
        /**
          * The hidden state of the tile select.
         */
        "hidden"?: boolean;
        /**
          * The icon that appears at the top of the tile.
         */
        "icon"?: string;
        /**
          * The side of the tile that the radio or checkbox appears on when inputEnabled is true.
         */
        "inputAlignment"?: Extract<"end" | "start", Alignment>;
        /**
          * Display an interactive radio or checkbox.
         */
        "inputEnabled"?: boolean;
        /**
          * The name of the tile select.  This name will appear in form submissions as either a radio or checkbox identifier based on the `type` property.
         */
        "name"?: any;
        /**
          * Emits a custom change event.  For checkboxes, it emits when the checkbox is checked or unchecked.  For radios it only emits when it is checked.
         */
        "onCalciteTileSelectChange"?: (event: CalciteTileSelectCustomEvent<any>) => void;
        /**
          * The selection mode of the tile select: radio (single) or checkbox (multiple).
         */
        "type"?: TileSelectType;
        /**
          * The value of the tile select.  This value will appear in form submissions when this tile select is checked.
         */
        "value"?: any;
        /**
          * specify the width of the tile, defaults to auto
         */
        "width"?: Extract<"auto" | "full", Width>;
    }
    interface CalciteTileSelectGroup {
        /**
          * The disabled state of the tile select.
         */
        "disabled"?: boolean;
        /**
          * Tiles by default move horizontally, stacking with each row, vertical allows single-column layouts
         */
        "layout"?: TileSelectGroupLayout;
    }
    interface CalciteTimePicker {
        /**
          * aria-label for the hour input
          * @default "Hour"
         */
        "intlHour"?: string;
        /**
          * aria-label for the hour down button
          * @default "Decrease hour"
         */
        "intlHourDown"?: string;
        /**
          * aria-label for the hour up button
          * @default "Increase hour"
         */
        "intlHourUp"?: string;
        /**
          * aria-label for the meridiem (am/pm) input
          * @default "AM/PM"
         */
        "intlMeridiem"?: string;
        /**
          * aria-label for the meridiem (am/pm) down button
          * @default "Decrease AM/PM"
         */
        "intlMeridiemDown"?: string;
        /**
          * aria-label for the meridiem (am/pm) up button
          * @default "Increase AM/PM"
         */
        "intlMeridiemUp"?: string;
        /**
          * aria-label for the minute input
          * @default "Minute"
         */
        "intlMinute"?: string;
        /**
          * aria-label for the minute down button
          * @default "Decrease minute"
         */
        "intlMinuteDown"?: string;
        /**
          * aria-label for the minute up button
          * @default "Increase minute"
         */
        "intlMinuteUp"?: string;
        /**
          * aria-label for the second input
          * @default "Second"
         */
        "intlSecond"?: string;
        /**
          * aria-label for the second down button
          * @default "Decrease second"
         */
        "intlSecondDown"?: string;
        /**
          * aria-label for the second up button
          * @default "Increase second"
         */
        "intlSecondUp"?: string;
        /**
          * The scale (size) of the time picker
         */
        "scale"?: Scale;
        /**
          * number (seconds) that specifies the granularity that the value must adhere to
         */
        "step"?: number;
        /**
          * The selected time in UTC (always 24-hour format)
         */
        "value"?: string;
    }
    interface CalciteTip {
        /**
          * No longer displays the tip.
         */
        "dismissed"?: boolean;
        /**
          * The heading of the tip.
         */
        "heading"?: string;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * Indicates whether the tip can be dismissed.
         */
        "nonDismissible"?: boolean;
        /**
          * Emitted when the component has been dismissed.
         */
        "onCalciteTipDismiss"?: (event: CalciteTipCustomEvent<any>) => void;
        /**
          * The selected state of the tip if it is being used inside a `calcite-tip-manager`.
         */
        "selected"?: boolean;
    }
    interface CalciteTipGroup {
        /**
          * The title used for all nested tips.
         */
        "groupTitle"?: string;
    }
    interface CalciteTipManager {
        /**
          * Closed state of the `calcite-tip-manager`.
         */
        "closed"?: boolean;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadingLevel;
        /**
          * Alternate text for closing the tip.
         */
        "intlClose"?: string;
        /**
          * The default group title for the `calcite-tip-manager`.
         */
        "intlDefaultTitle"?: string;
        /**
          * Alternate text for navigating to the next tip.
         */
        "intlNext"?: string;
        /**
          * Label that appears on hover of pagination icon.
         */
        "intlPaginationLabel"?: string;
        /**
          * Alternate text for navigating to the previous tip.
         */
        "intlPrevious"?: string;
        /**
          * Emitted when the `calcite-tip-manager` has been closed.
         */
        "onCalciteTipManagerClose"?: (event: CalciteTipManagerCustomEvent<any>) => void;
        /**
          * Emitted when the `calcite-tip-manager` has been toggled open or closed.
          * @deprecated use calciteTipManagerClose instead.
         */
        "onCalciteTipManagerToggle"?: (event: CalciteTipManagerCustomEvent<any>) => void;
    }
    interface CalciteTooltip {
        /**
          * Closes the component when the `referenceElement` is clicked.
         */
        "closeOnClick"?: boolean;
        /**
          * Accessible name for the component.
         */
        "label": string;
        /**
          * Offset the position of the component away from the `referenceElement`.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the component along the `referenceElement`.
         */
        "offsetSkidding"?: number;
        /**
          * When true, the component is open.
         */
        "open"?: boolean;
        /**
          * Describes the positioning type to use for the overlaid content. If the `referenceElement` is in a fixed container, use the "fixed" value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
          * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
         */
        "placement"?: PopperPlacement;
        /**
          * The `referenceElement` to position the component according to its "placement" value. Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`. However, a string ID of the reference element can be used.
         */
        "referenceElement"?: ReferenceElement | string;
    }
    interface CalciteTooltipManager {
        /**
          * CSS Selector to match reference elements for tooltips. Reference elements will be identified by this selector in order to open their associated tooltip.
          * @default `[data-calcite-tooltip-reference]`
         */
        "selector"?: string;
    }
    interface CalciteTree {
        /**
          * Display input
          * @deprecated Use "ancestors" selection-mode for checkbox input.
         */
        "inputEnabled"?: boolean;
        /**
          * Displays indentation guide lines.
         */
        "lines"?: boolean;
        /**
          * Fires when the user selects/deselects `calcite-tree-items`. An object including an array of selected items will be passed in the event's "detail" property.
          * @see [TreeSelectDetail](https://github.com/Esri/calcite-components/blob/master/src/components/tree/interfaces.ts#L1)
         */
        "onCalciteTreeSelect"?: (event: CalciteTreeCustomEvent<TreeSelectDetail>) => void;
        /**
          * Specifies the size of the component.
         */
        "scale"?: Scale;
        /**
          * Customize how the component's selection works.
          * @default "single"
          * @see [TreeSelectionMode](https://github.com/Esri/calcite-components/blob/master/src/components/tree/interfaces.ts#L5)
         */
        "selectionMode"?: TreeSelectionMode;
    }
    interface CalciteTreeItem {
        /**
          * When true, the component is expanded.
         */
        "expanded"?: boolean;
        /**
          * When true, the component is selected.
         */
        "selected"?: boolean;
    }
    interface CalciteValueList {
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * When true, `calcite-value-list-item`s are sortable via a draggable button.
         */
        "dragEnabled"?: boolean;
        /**
          * When true, an input appears at the top of the component that can be used by end users to filter list items.
         */
        "filterEnabled"?: boolean;
        /**
          * Placeholder text for the filter's input field.
         */
        "filterPlaceholder"?: string;
        /**
          * The component's group identifier.  To drag elements from one list into another, both lists must have the same group value.
         */
        "group"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the component.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleActive"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the `calcite-value-list-item`'s new position.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleChange"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the `calcite-value-list-item`'s current position after commit.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleCommit"?: string;
        /**
          * When "drag-enabled" is true and active, specifies accessible context to the `calcite-value-list-item`'s initial position.  Use ${position} of ${total} as placeholder for displaying indices and ${item.label} as placeholder for displaying label of `calcite-value-list-item`.
         */
        "intlDragHandleIdle"?: string;
        /**
          * When true, a busy indicator is displayed.
         */
        "loading"?: boolean;
        /**
          * Similar to standard radio buttons and checkboxes. When true, a user can select multiple `calcite-value-list-item`s at a time. When false, only a single `calcite-value-list-item` can be selected at a time, and a new selection will deselect previous selections.
         */
        "multiple"?: boolean;
        /**
          * Emits when any of the list item selections have changed.
         */
        "onCalciteListChange"?: (event: CalciteValueListCustomEvent<Map<string, HTMLCalciteValueListItemElement>>) => void;
        /**
          * Emits when the order of the list has changed.
         */
        "onCalciteListOrderChange"?: (event: CalciteValueListCustomEvent<any[]>) => void;
        /**
          * When true and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.
         */
        "selectionFollowsFocus"?: boolean;
    }
    interface CalciteValueListItem {
        /**
          * A description for the component that displays below the label text.
         */
        "description"?: string;
        /**
          * When true, interaction is prevented and the component is displayed with lower opacity.
         */
        "disabled"?: boolean;
        /**
          * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.
          * @see [ICON_TYPES](https://github.com/Esri/calcite-components/blob/master/src/components/pick-list/resources.ts#L5)
         */
        "icon"?: ICON_TYPES | null;
        /**
          * Label and accessible name for the component. Appears next to the icon.
         */
        "label": string;
        /**
          * Provides additional metadata to the component. Primary use is for a filter on the parent list.
         */
        "metadata"?: Record<string, unknown>;
        /**
          * When true, prevents the content of the component from user interaction.
         */
        "nonInteractive"?: boolean;
        /**
          * Fires when the remove button is pressed.
         */
        "onCalciteListItemRemove"?: (event: CalciteValueListItemCustomEvent<void>) => void;
        /**
          * When true, adds an action to remove the component.
         */
        "removable"?: boolean;
        /**
          * When true, the component is selected.
         */
        "selected"?: boolean;
        /**
          * The component's value.
         */
        "value": any;
    }
    interface IntrinsicElements {
        "calcite-accordion": CalciteAccordion;
        "calcite-accordion-item": CalciteAccordionItem;
        "calcite-action": CalciteAction;
        "calcite-action-bar": CalciteActionBar;
        "calcite-action-group": CalciteActionGroup;
        "calcite-action-menu": CalciteActionMenu;
        "calcite-action-pad": CalciteActionPad;
        "calcite-alert": CalciteAlert;
        "calcite-avatar": CalciteAvatar;
        "calcite-block": CalciteBlock;
        "calcite-block-section": CalciteBlockSection;
        "calcite-button": CalciteButton;
        "calcite-card": CalciteCard;
        "calcite-checkbox": CalciteCheckbox;
        "calcite-chip": CalciteChip;
        "calcite-color-picker": CalciteColorPicker;
        "calcite-color-picker-hex-input": CalciteColorPickerHexInput;
        "calcite-color-picker-swatch": CalciteColorPickerSwatch;
        "calcite-combobox": CalciteCombobox;
        "calcite-combobox-item": CalciteComboboxItem;
        "calcite-combobox-item-group": CalciteComboboxItemGroup;
        "calcite-date-picker": CalciteDatePicker;
        "calcite-date-picker-day": CalciteDatePickerDay;
        "calcite-date-picker-month": CalciteDatePickerMonth;
        "calcite-date-picker-month-header": CalciteDatePickerMonthHeader;
        "calcite-dropdown": CalciteDropdown;
        "calcite-dropdown-group": CalciteDropdownGroup;
        "calcite-dropdown-item": CalciteDropdownItem;
        "calcite-fab": CalciteFab;
        "calcite-filter": CalciteFilter;
        "calcite-flow": CalciteFlow;
        "calcite-graph": CalciteGraph;
        "calcite-handle": CalciteHandle;
        "calcite-icon": CalciteIcon;
        "calcite-inline-editable": CalciteInlineEditable;
        "calcite-input": CalciteInput;
        "calcite-input-date-picker": CalciteInputDatePicker;
        "calcite-input-message": CalciteInputMessage;
        "calcite-input-number": CalciteInputNumber;
        "calcite-input-time-picker": CalciteInputTimePicker;
        "calcite-label": CalciteLabel;
        "calcite-link": CalciteLink;
        "calcite-list": CalciteList;
        "calcite-list-item": CalciteListItem;
        "calcite-list-item-group": CalciteListItemGroup;
        "calcite-loader": CalciteLoader;
        "calcite-modal": CalciteModal;
        "calcite-notice": CalciteNotice;
        "calcite-option": CalciteOption;
        "calcite-option-group": CalciteOptionGroup;
        "calcite-pagination": CalcitePagination;
        "calcite-panel": CalcitePanel;
        "calcite-pick-list": CalcitePickList;
        "calcite-pick-list-group": CalcitePickListGroup;
        "calcite-pick-list-item": CalcitePickListItem;
        "calcite-popover": CalcitePopover;
        "calcite-popover-manager": CalcitePopoverManager;
        "calcite-progress": CalciteProgress;
        "calcite-radio-button": CalciteRadioButton;
        "calcite-radio-button-group": CalciteRadioButtonGroup;
        "calcite-radio-group": CalciteRadioGroup;
        "calcite-radio-group-item": CalciteRadioGroupItem;
        "calcite-rating": CalciteRating;
        "calcite-scrim": CalciteScrim;
        "calcite-select": CalciteSelect;
        "calcite-shell": CalciteShell;
        "calcite-shell-center-row": CalciteShellCenterRow;
        "calcite-shell-panel": CalciteShellPanel;
        "calcite-slider": CalciteSlider;
        "calcite-sortable-list": CalciteSortableList;
        "calcite-split-button": CalciteSplitButton;
        "calcite-stepper": CalciteStepper;
        "calcite-stepper-item": CalciteStepperItem;
        "calcite-switch": CalciteSwitch;
        "calcite-tab": CalciteTab;
        "calcite-tab-nav": CalciteTabNav;
        "calcite-tab-title": CalciteTabTitle;
        "calcite-tabs": CalciteTabs;
        "calcite-tile": CalciteTile;
        "calcite-tile-select": CalciteTileSelect;
        "calcite-tile-select-group": CalciteTileSelectGroup;
        "calcite-time-picker": CalciteTimePicker;
        "calcite-tip": CalciteTip;
        "calcite-tip-group": CalciteTipGroup;
        "calcite-tip-manager": CalciteTipManager;
        "calcite-tooltip": CalciteTooltip;
        "calcite-tooltip-manager": CalciteTooltipManager;
        "calcite-tree": CalciteTree;
        "calcite-tree-item": CalciteTreeItem;
        "calcite-value-list": CalciteValueList;
        "calcite-value-list-item": CalciteValueListItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calcite-accordion": LocalJSX.CalciteAccordion & JSXBase.HTMLAttributes<HTMLCalciteAccordionElement>;
            "calcite-accordion-item": LocalJSX.CalciteAccordionItem & JSXBase.HTMLAttributes<HTMLCalciteAccordionItemElement>;
            "calcite-action": LocalJSX.CalciteAction & JSXBase.HTMLAttributes<HTMLCalciteActionElement>;
            "calcite-action-bar": LocalJSX.CalciteActionBar & JSXBase.HTMLAttributes<HTMLCalciteActionBarElement>;
            "calcite-action-group": LocalJSX.CalciteActionGroup & JSXBase.HTMLAttributes<HTMLCalciteActionGroupElement>;
            "calcite-action-menu": LocalJSX.CalciteActionMenu & JSXBase.HTMLAttributes<HTMLCalciteActionMenuElement>;
            "calcite-action-pad": LocalJSX.CalciteActionPad & JSXBase.HTMLAttributes<HTMLCalciteActionPadElement>;
            "calcite-alert": LocalJSX.CalciteAlert & JSXBase.HTMLAttributes<HTMLCalciteAlertElement>;
            "calcite-avatar": LocalJSX.CalciteAvatar & JSXBase.HTMLAttributes<HTMLCalciteAvatarElement>;
            "calcite-block": LocalJSX.CalciteBlock & JSXBase.HTMLAttributes<HTMLCalciteBlockElement>;
            "calcite-block-section": LocalJSX.CalciteBlockSection & JSXBase.HTMLAttributes<HTMLCalciteBlockSectionElement>;
            "calcite-button": LocalJSX.CalciteButton & JSXBase.HTMLAttributes<HTMLCalciteButtonElement>;
            "calcite-card": LocalJSX.CalciteCard & JSXBase.HTMLAttributes<HTMLCalciteCardElement>;
            "calcite-checkbox": LocalJSX.CalciteCheckbox & JSXBase.HTMLAttributes<HTMLCalciteCheckboxElement>;
            "calcite-chip": LocalJSX.CalciteChip & JSXBase.HTMLAttributes<HTMLCalciteChipElement>;
            "calcite-color-picker": LocalJSX.CalciteColorPicker & JSXBase.HTMLAttributes<HTMLCalciteColorPickerElement>;
            "calcite-color-picker-hex-input": LocalJSX.CalciteColorPickerHexInput & JSXBase.HTMLAttributes<HTMLCalciteColorPickerHexInputElement>;
            "calcite-color-picker-swatch": LocalJSX.CalciteColorPickerSwatch & JSXBase.HTMLAttributes<HTMLCalciteColorPickerSwatchElement>;
            "calcite-combobox": LocalJSX.CalciteCombobox & JSXBase.HTMLAttributes<HTMLCalciteComboboxElement>;
            "calcite-combobox-item": LocalJSX.CalciteComboboxItem & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemElement>;
            "calcite-combobox-item-group": LocalJSX.CalciteComboboxItemGroup & JSXBase.HTMLAttributes<HTMLCalciteComboboxItemGroupElement>;
            "calcite-date-picker": LocalJSX.CalciteDatePicker & JSXBase.HTMLAttributes<HTMLCalciteDatePickerElement>;
            "calcite-date-picker-day": LocalJSX.CalciteDatePickerDay & JSXBase.HTMLAttributes<HTMLCalciteDatePickerDayElement>;
            "calcite-date-picker-month": LocalJSX.CalciteDatePickerMonth & JSXBase.HTMLAttributes<HTMLCalciteDatePickerMonthElement>;
            "calcite-date-picker-month-header": LocalJSX.CalciteDatePickerMonthHeader & JSXBase.HTMLAttributes<HTMLCalciteDatePickerMonthHeaderElement>;
            "calcite-dropdown": LocalJSX.CalciteDropdown & JSXBase.HTMLAttributes<HTMLCalciteDropdownElement>;
            "calcite-dropdown-group": LocalJSX.CalciteDropdownGroup & JSXBase.HTMLAttributes<HTMLCalciteDropdownGroupElement>;
            "calcite-dropdown-item": LocalJSX.CalciteDropdownItem & JSXBase.HTMLAttributes<HTMLCalciteDropdownItemElement>;
            "calcite-fab": LocalJSX.CalciteFab & JSXBase.HTMLAttributes<HTMLCalciteFabElement>;
            "calcite-filter": LocalJSX.CalciteFilter & JSXBase.HTMLAttributes<HTMLCalciteFilterElement>;
            "calcite-flow": LocalJSX.CalciteFlow & JSXBase.HTMLAttributes<HTMLCalciteFlowElement>;
            "calcite-graph": LocalJSX.CalciteGraph & JSXBase.HTMLAttributes<HTMLCalciteGraphElement>;
            "calcite-handle": LocalJSX.CalciteHandle & JSXBase.HTMLAttributes<HTMLCalciteHandleElement>;
            "calcite-icon": LocalJSX.CalciteIcon & JSXBase.HTMLAttributes<HTMLCalciteIconElement>;
            "calcite-inline-editable": LocalJSX.CalciteInlineEditable & JSXBase.HTMLAttributes<HTMLCalciteInlineEditableElement>;
            "calcite-input": LocalJSX.CalciteInput & JSXBase.HTMLAttributes<HTMLCalciteInputElement>;
            "calcite-input-date-picker": LocalJSX.CalciteInputDatePicker & JSXBase.HTMLAttributes<HTMLCalciteInputDatePickerElement>;
            "calcite-input-message": LocalJSX.CalciteInputMessage & JSXBase.HTMLAttributes<HTMLCalciteInputMessageElement>;
            "calcite-input-number": LocalJSX.CalciteInputNumber & JSXBase.HTMLAttributes<HTMLCalciteInputNumberElement>;
            "calcite-input-time-picker": LocalJSX.CalciteInputTimePicker & JSXBase.HTMLAttributes<HTMLCalciteInputTimePickerElement>;
            "calcite-label": LocalJSX.CalciteLabel & JSXBase.HTMLAttributes<HTMLCalciteLabelElement>;
            "calcite-link": LocalJSX.CalciteLink & JSXBase.HTMLAttributes<HTMLCalciteLinkElement>;
            "calcite-list": LocalJSX.CalciteList & JSXBase.HTMLAttributes<HTMLCalciteListElement>;
            "calcite-list-item": LocalJSX.CalciteListItem & JSXBase.HTMLAttributes<HTMLCalciteListItemElement>;
            "calcite-list-item-group": LocalJSX.CalciteListItemGroup & JSXBase.HTMLAttributes<HTMLCalciteListItemGroupElement>;
            "calcite-loader": LocalJSX.CalciteLoader & JSXBase.HTMLAttributes<HTMLCalciteLoaderElement>;
            "calcite-modal": LocalJSX.CalciteModal & JSXBase.HTMLAttributes<HTMLCalciteModalElement>;
            "calcite-notice": LocalJSX.CalciteNotice & JSXBase.HTMLAttributes<HTMLCalciteNoticeElement>;
            "calcite-option": LocalJSX.CalciteOption & JSXBase.HTMLAttributes<HTMLCalciteOptionElement>;
            "calcite-option-group": LocalJSX.CalciteOptionGroup & JSXBase.HTMLAttributes<HTMLCalciteOptionGroupElement>;
            "calcite-pagination": LocalJSX.CalcitePagination & JSXBase.HTMLAttributes<HTMLCalcitePaginationElement>;
            "calcite-panel": LocalJSX.CalcitePanel & JSXBase.HTMLAttributes<HTMLCalcitePanelElement>;
            "calcite-pick-list": LocalJSX.CalcitePickList & JSXBase.HTMLAttributes<HTMLCalcitePickListElement>;
            "calcite-pick-list-group": LocalJSX.CalcitePickListGroup & JSXBase.HTMLAttributes<HTMLCalcitePickListGroupElement>;
            "calcite-pick-list-item": LocalJSX.CalcitePickListItem & JSXBase.HTMLAttributes<HTMLCalcitePickListItemElement>;
            "calcite-popover": LocalJSX.CalcitePopover & JSXBase.HTMLAttributes<HTMLCalcitePopoverElement>;
            "calcite-popover-manager": LocalJSX.CalcitePopoverManager & JSXBase.HTMLAttributes<HTMLCalcitePopoverManagerElement>;
            "calcite-progress": LocalJSX.CalciteProgress & JSXBase.HTMLAttributes<HTMLCalciteProgressElement>;
            "calcite-radio-button": LocalJSX.CalciteRadioButton & JSXBase.HTMLAttributes<HTMLCalciteRadioButtonElement>;
            "calcite-radio-button-group": LocalJSX.CalciteRadioButtonGroup & JSXBase.HTMLAttributes<HTMLCalciteRadioButtonGroupElement>;
            "calcite-radio-group": LocalJSX.CalciteRadioGroup & JSXBase.HTMLAttributes<HTMLCalciteRadioGroupElement>;
            "calcite-radio-group-item": LocalJSX.CalciteRadioGroupItem & JSXBase.HTMLAttributes<HTMLCalciteRadioGroupItemElement>;
            "calcite-rating": LocalJSX.CalciteRating & JSXBase.HTMLAttributes<HTMLCalciteRatingElement>;
            "calcite-scrim": LocalJSX.CalciteScrim & JSXBase.HTMLAttributes<HTMLCalciteScrimElement>;
            "calcite-select": LocalJSX.CalciteSelect & JSXBase.HTMLAttributes<HTMLCalciteSelectElement>;
            "calcite-shell": LocalJSX.CalciteShell & JSXBase.HTMLAttributes<HTMLCalciteShellElement>;
            "calcite-shell-center-row": LocalJSX.CalciteShellCenterRow & JSXBase.HTMLAttributes<HTMLCalciteShellCenterRowElement>;
            "calcite-shell-panel": LocalJSX.CalciteShellPanel & JSXBase.HTMLAttributes<HTMLCalciteShellPanelElement>;
            "calcite-slider": LocalJSX.CalciteSlider & JSXBase.HTMLAttributes<HTMLCalciteSliderElement>;
            "calcite-sortable-list": LocalJSX.CalciteSortableList & JSXBase.HTMLAttributes<HTMLCalciteSortableListElement>;
            "calcite-split-button": LocalJSX.CalciteSplitButton & JSXBase.HTMLAttributes<HTMLCalciteSplitButtonElement>;
            "calcite-stepper": LocalJSX.CalciteStepper & JSXBase.HTMLAttributes<HTMLCalciteStepperElement>;
            "calcite-stepper-item": LocalJSX.CalciteStepperItem & JSXBase.HTMLAttributes<HTMLCalciteStepperItemElement>;
            "calcite-switch": LocalJSX.CalciteSwitch & JSXBase.HTMLAttributes<HTMLCalciteSwitchElement>;
            "calcite-tab": LocalJSX.CalciteTab & JSXBase.HTMLAttributes<HTMLCalciteTabElement>;
            "calcite-tab-nav": LocalJSX.CalciteTabNav & JSXBase.HTMLAttributes<HTMLCalciteTabNavElement>;
            "calcite-tab-title": LocalJSX.CalciteTabTitle & JSXBase.HTMLAttributes<HTMLCalciteTabTitleElement>;
            "calcite-tabs": LocalJSX.CalciteTabs & JSXBase.HTMLAttributes<HTMLCalciteTabsElement>;
            "calcite-tile": LocalJSX.CalciteTile & JSXBase.HTMLAttributes<HTMLCalciteTileElement>;
            "calcite-tile-select": LocalJSX.CalciteTileSelect & JSXBase.HTMLAttributes<HTMLCalciteTileSelectElement>;
            "calcite-tile-select-group": LocalJSX.CalciteTileSelectGroup & JSXBase.HTMLAttributes<HTMLCalciteTileSelectGroupElement>;
            "calcite-time-picker": LocalJSX.CalciteTimePicker & JSXBase.HTMLAttributes<HTMLCalciteTimePickerElement>;
            "calcite-tip": LocalJSX.CalciteTip & JSXBase.HTMLAttributes<HTMLCalciteTipElement>;
            "calcite-tip-group": LocalJSX.CalciteTipGroup & JSXBase.HTMLAttributes<HTMLCalciteTipGroupElement>;
            "calcite-tip-manager": LocalJSX.CalciteTipManager & JSXBase.HTMLAttributes<HTMLCalciteTipManagerElement>;
            "calcite-tooltip": LocalJSX.CalciteTooltip & JSXBase.HTMLAttributes<HTMLCalciteTooltipElement>;
            "calcite-tooltip-manager": LocalJSX.CalciteTooltipManager & JSXBase.HTMLAttributes<HTMLCalciteTooltipManagerElement>;
            "calcite-tree": LocalJSX.CalciteTree & JSXBase.HTMLAttributes<HTMLCalciteTreeElement>;
            "calcite-tree-item": LocalJSX.CalciteTreeItem & JSXBase.HTMLAttributes<HTMLCalciteTreeItemElement>;
            "calcite-value-list": LocalJSX.CalciteValueList & JSXBase.HTMLAttributes<HTMLCalciteValueListElement>;
            "calcite-value-list-item": LocalJSX.CalciteValueListItem & JSXBase.HTMLAttributes<HTMLCalciteValueListItemElement>;
        }
    }
}
