import { VNode } from "../../stencil-public-runtime";
import { StrictModifiers, Instance as Popper } from "@popperjs/core";
import { PopperPlacement, OverlayPositioning, ReferenceElement } from "../../utils/popper";
/**
 * @slot - A slot for adding text.
 */
export declare class Tooltip {
  /** Closes the component when the `referenceElement` is clicked. */
  closeOnClick: boolean;
  /** Accessible name for the component. */
  label: string;
  /**
   * Offset the position of the component away from the `referenceElement`.
   *
   * @default 6
   */
  offsetDistance: number;
  offsetDistanceOffsetHandler(): void;
  /**
   * Offset the position of the component along the `referenceElement`.
   */
  offsetSkidding: number;
  offsetSkiddingHandler(): void;
  /**
   * When true, the component is open.
   */
  open: boolean;
  openHandler(): void;
  /** Describes the positioning type to use for the overlaid content. If the `referenceElement` is in a fixed container, use the "fixed" value. */
  overlayPositioning: OverlayPositioning;
  /**
   * Determines where the component will be positioned relative to the `referenceElement`.
   *
   * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
   */
  placement: PopperPlacement;
  placementHandler(): void;
  /**
   * The `referenceElement` to position the component according to its "placement" value. Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`. However, a string ID of the reference element can be used.
   */
  referenceElement: ReferenceElement | string;
  referenceElementHandler(): void;
  el: HTMLCalciteTooltipElement;
  effectiveReferenceElement: ReferenceElement;
  arrowEl: HTMLDivElement;
  popper: Popper;
  guid: string;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  /** Updates the position of the component. */
  reposition(): Promise<void>;
  setUpReferenceElement: () => void;
  getId: () => string;
  addReferences: () => void;
  removeReferences: () => void;
  getReferenceElement(): ReferenceElement;
  getModifiers(): Partial<StrictModifiers>[];
  createPopper(): void;
  destroyPopper(): void;
  render(): VNode;
}
