import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { Layout, Scale } from "../interfaces";
import { StepperItemChangeEventDetail, StepperItemEventDetail, StepperItemKeyEventDetail } from "./interfaces";
/**
 * @slot - A slot for adding `calcite-stepper-item`s.
 */
export declare class Stepper {
  el: HTMLCalciteStepperElement;
  /** optionally display a status icon next to the step title */
  icon: boolean;
  /** specify the layout of stepper, defaults to horizontal */
  layout: Extract<"horizontal" | "vertical", Layout>;
  /** optionally display the number next to the step title */
  numbered: boolean;
  /** specify the scale of stepper, defaults to m */
  scale: Scale;
  /** @internal */
  requestedContent: Node[];
  contentWatcher(): void;
  /**
   * This event fires when the active stepper item has changed.
   *
   */
  calciteStepperItemChange: EventEmitter<StepperItemChangeEventDetail>;
  /**
   * This event fires when the active stepper item has changed.
   *
   * @internal
   */
  calciteInternalStepperItemChange: EventEmitter<StepperItemChangeEventDetail>;
  componentDidLoad(): void;
  componentWillLoad(): void;
  render(): VNode;
  calciteInternalStepperItemKeyEvent(e: CustomEvent<StepperItemKeyEventDetail>): void;
  registerItem(event: CustomEvent<StepperItemEventDetail>): void;
  updateItem(event: CustomEvent<StepperItemEventDetail>): void;
  handleUserRequestedStepperItemSelect(event: CustomEvent<StepperItemChangeEventDetail>): void;
  /** set the next step as active */
  nextStep(): Promise<void>;
  /** set the previous step as active */
  prevStep(): Promise<void>;
  /**
   * set the requested step as active
   *
   * @param step
   */
  goToStep(step: number): Promise<void>;
  /** set the first step as active */
  startStep(): Promise<void>;
  /** set the last step as active */
  endStep(): Promise<void>;
  private itemMap;
  /** list of sorted Stepper items */
  private items;
  /** list of enabled Stepper items */
  private enabledItems;
  /** keep track of the currently active item position */
  private currentPosition;
  /** the container where we place horizontal layout step content */
  private stepperContentContainer;
  private getEnabledStepIndex;
  private addHorizontalContentContainer;
  private updateStep;
  private focusFirstItem;
  private focusLastItem;
  private focusNextItem;
  private focusPrevItem;
  private itemIndex;
  private focusElement;
  private sortItems;
  private filterItems;
  private updateContent;
}
