import { EventEmitter, VNode } from "../../stencil-public-runtime";
import { PopperPlacement, OverlayPositioning, ComputedPlacement, ReferenceElement } from "../../utils/popper";
import { StrictModifiers, Instance as Popper } from "@popperjs/core";
import { HeadingLevel } from "../functional/Heading";
/**
 * @slot - A slot for adding custom content.
 */
export declare class Popover {
  /**
   * When true and clicking outside of the component, automatically closes open `calcite-popover`s.
   */
  autoClose: boolean;
  /**
   * When true, a close button is added to the component.
   *
   * @deprecated use dismissible instead.
   */
  closeButton: boolean;
  /**
   * When true, a close button is added to the component.
   *
   * @deprecated use closable instead
   */
  dismissible: boolean;
  /** When true, display a close button within the Popover */
  closable: boolean;
  /**
   * When true, prevents flipping the component's placement when overlapping its `referenceElement`.
   */
  disableFlip: boolean;
  /**
   * When true, removes the caret pointer.
   */
  disablePointer: boolean;
  /**
   * Defines the available placements that can be used when a flip occurs.
   */
  flipPlacements?: ComputedPlacement[];
  flipPlacementsHandler(): void;
  /**
   * The component header text.
   */
  heading?: string;
  /**
   * Specifies the number at which section headings should start.
   */
  headingLevel: HeadingLevel;
  /** Accessible name for the component. */
  label: string;
  /**
   * Offsets the position of the popover away from the `referenceElement`.
   *
   * @default 6
   */
  offsetDistance: number;
  offsetDistanceOffsetHandler(): void;
  /**
   * Offsets the position of the popover along the `referenceElement`.
   */
  offsetSkidding: number;
  offsetSkiddingHandler(): void;
  /**
   * When true, displays and positions the component.
   */
  open: boolean;
  openHandler(): void;
  /** Describes the positioning type to use for the overlaid content. If the element is in a fixed container, use the "fixed" value. */
  overlayPositioning: OverlayPositioning;
  /**
   * Determines where the component will be positioned relative to the `referenceElement`.
   *
   * @see [PopperPlacement](https://github.com/Esri/calcite-components/blob/master/src/utils/popper.ts#L25)
   */
  placement: PopperPlacement;
  placementHandler(): void;
  /**
   *  The `referenceElement` used to position the component according to its "placement" value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.
   */
  referenceElement: ReferenceElement | string;
  referenceElementHandler(): void;
  /**
   * When true, disables automatically toggling the component when its `referenceElement` has been triggered. This property can be set to "true" to manage when a popover is open.
   */
  triggerDisabled: boolean;
  /**
   * Accessible name for the component's close button.
   *
   * @default "Close"
   */
  intlClose: string;
  filteredFlipPlacements: ComputedPlacement[];
  el: HTMLCalcitePopoverElement;
  effectiveReferenceElement: ReferenceElement;
  popper: Popper;
  arrowEl: HTMLDivElement;
  closeButtonEl: HTMLCalciteActionElement;
  guid: string;
  private activeTransitionProp;
  connectedCallback(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  /** Fired when the component is closed. */
  calcitePopoverClose: EventEmitter;
  /** Fired when the component is opened. */
  calcitePopoverOpen: EventEmitter;
  /** Updates the position of the component. */
  reposition(): Promise<void>;
  /**
   * Sets focus on the component.
   *
   * @param focusId
   */
  setFocus(focusId?: "close-button"): Promise<void>;
  /**
   * Toggles the component's open property.
   *
   * @param value
   */
  toggle(value?: boolean): Promise<void>;
  setFilteredPlacements: () => void;
  setUpReferenceElement: () => void;
  getId: () => string;
  setExpandedAttr: () => void;
  addReferences: () => void;
  removeReferences: () => void;
  getReferenceElement(): ReferenceElement;
  getModifiers(): Partial<StrictModifiers>[];
  createPopper(): void;
  destroyPopper(): void;
  hide: () => void;
  transitionEnd: (event: TransitionEvent) => void;
  renderCloseButton(): VNode;
  renderHeader(): VNode;
  render(): VNode;
}
